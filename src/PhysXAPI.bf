using System;

namespace PhysX
{
	[CRepr]
	public struct SimulationEventCallbackInfo
	{
		public typealias CollisionCallback = delegate void(void*, PxContactPairHeader*, PxContactPairHeader*, uint32);
		public typealias TriggerCallback = delegate void(void*, PxTriggerPair*, uint32);
		public typealias ConstraintBreakCallback = delegate void(void*, PxConstraintInfo*, uint32);
		public typealias WakeSleepCallback = delegate void(void*, PxActor**, uint32, bool);
		public typealias AdvanceCallback = delegate void(void*, PxRigidBody*, PxTransform*, uint32);

		// Callback for collision events.
		public CollisionCallback collisionCallback = null;
		public void* collisionUserData = null;
		// Callback for trigger shape events (an object entered or left a trigger shape).
		public TriggerCallback triggerCallback = null;
		public void* triggerUserData = null;
		// Callback for when a constraint breaks (such as a joint with a force limit)
		public ConstraintBreakCallback constraintBreakCallback = null;
		public void* constraintBreakUserData = null;
		// Callback for when an object falls asleep or is awoken.
		public WakeSleepCallback wakeSleepCallback = null;
		public void* wakeSleepUserData = null;
		// Callback to get the next pose early for objects (if flagged with eENABLE_POSE_INTEGRATION_PREVIEW).
		public AdvanceCallback advanceCallback = null;
		public void* advanceUserData = null;
	}

	typealias PxFilterObjectAttributes = uint32;

	[CRepr]
	public struct FilterShaderCallbackInfo
	{
		public PxFilterObjectAttributes attributes0;
		public PxFilterObjectAttributes attributes1;
		public PxFilterData filterData0;
		public PxFilterData filterData1;
		public PxPairFlags* pairFlags;
		public void* constantBlock;
		public uint32 constantBlockSize;
	}

	public static class PhysXAPI
	{
		public typealias RaycastHitCallback = delegate uint32(PxRigidActor* actor, PxFilterData* filterData, PxShape* shape, uint32 hitFlags, void* userData);
		public typealias AllocCallback = delegate void*(uint64 size, char8* typeName, char8* filename, int32 line, void* userdata);
		public typealias DeallocCallback = delegate void(void* ptr, void* userdata);
		public typealias SimulationShaderFilter = delegate uint16(FilterShaderCallbackInfo*);

		[LinkName("physx_create_foundation")] public static extern PxFoundation* create_foundation();
		[LinkName("physx_create_physics")] public static extern PxPhysics* create_physics(PxFoundation* foundation);

		[LinkName("create_raycast_filter_callback")] public static extern PxQueryFilterCallback* create_raycast_filter_callback(PxRigidActor* actor_to_ignore);

		[LinkName("create_raycast_filter_callback_func")] public static extern PxQueryFilterCallback* create_raycast_filter_callback_func(RaycastHitCallback callback, void* userData);

		[LinkName("create_alloc_callback")] public static extern PxAllocatorCallback* create_alloc_callback(AllocCallback alloc_callback, DeallocCallback dealloc_callback, void* userdata);
		[LinkName("get_alloc_callback_user_data")] public static extern void* get_alloc_callback_user_data(PxAllocatorCallback* allocator);
		[LinkName("get_default_simulation_filter_shader")] public static extern void* get_default_simulation_filter_shader();
		[LinkName("create_simulation_event_callbacks")] public static extern PxSimulationEventCallback* create_simulation_event_callbacks(SimulationEventCallbackInfo* callbacks);
		[LinkName("get_simulation_event_info")] public static extern SimulationEventCallbackInfo* get_simulation_event_info(PxSimulationEventCallback* callback);
		[LinkName("destroy_simulation_event_callbacks")] public static extern void destroy_simulation_event_callbacks(PxSimulationEventCallback* callback);

		[LinkName("enable_custom_filter_shader")] public static extern void enable_custom_filter_shader(PxSceneDesc* desc, SimulationShaderFilter filter, uint32 call_default_filter_shader_first);


		[LinkName("PxAllocatorCallback_delete")] public static extern void AllocatorCallback_delete(PxAllocatorCallback* self__pod);
		[LinkName("PxAllocatorCallback_allocate_mut")] public static extern void* AllocatorCallback_allocate_mut(PxAllocatorCallback* self__pod, uint64 size, char8* typeName, char8* filename, int32 line);
		[LinkName("PxAllocatorCallback_deallocate_mut")] public static extern void AllocatorCallback_deallocate_mut(PxAllocatorCallback* self__pod, void* ptr);
		[LinkName("PxAssertHandler_delete")] public static extern void AssertHandler_delete(PxAssertHandler* self__pod);
		[LinkName("phys_PxGetAssertHandler")] public static extern PxAssertHandler* GetAssertHandler();
		[LinkName("phys_PxSetAssertHandler")] public static extern void SetAssertHandler(PxAssertHandler* handler_pod);
		[LinkName("phys_PxAbs")] public static extern float Abs(float a);
		[LinkName("phys_PxEquals")] public static extern bool Equals(float a, float b, float eps);
		[LinkName("phys_PxAbs_1")] public static extern double Abs_1(double a);
		[LinkName("phys_PxAbs_2")] public static extern int32 Abs_2(int32 a);
		[LinkName("phys_PxSqrt")] public static extern float Sqrt(float a);
		[LinkName("phys_PxSqrt_1")] public static extern double Sqrt_1(double a);
		[LinkName("phys_PxRecipSqrt")] public static extern float RecipSqrt(float a);
		[LinkName("phys_PxRecipSqrt_1")] public static extern double RecipSqrt_1(double a);
		[LinkName("phys_PxSin")] public static extern float Sin(float a);
		[LinkName("phys_PxSin_1")] public static extern double Sin_1(double a);
		[LinkName("phys_PxCos")] public static extern float Cos(float a);
		[LinkName("phys_PxCos_1")] public static extern double Cos_1(double a);
		[LinkName("phys_PxTan")] public static extern float Tan(float a);
		[LinkName("phys_PxTan_1")] public static extern double Tan_1(double a);
		[LinkName("phys_PxAsin")] public static extern float Asin(float f);
		[LinkName("phys_PxAsin_1")] public static extern double Asin_1(double f);
		[LinkName("phys_PxAcos")] public static extern float Acos(float f);
		[LinkName("phys_PxAcos_1")] public static extern double Acos_1(double f);
		[LinkName("phys_PxAtan")] public static extern float Atan(float a);
		[LinkName("phys_PxAtan_1")] public static extern double Atan_1(double a);
		[LinkName("phys_PxAtan2")] public static extern float Atan2(float x, float y);
		[LinkName("phys_PxAtan2_1")] public static extern double Atan2_1(double x, double y);
		[LinkName("phys_PxIsFinite")] public static extern bool IsFinite(float f);
		[LinkName("phys_PxIsFinite_1")] public static extern bool IsFinite_1(double f);
		[LinkName("phys_PxFloor")] public static extern float Floor(float a);
		[LinkName("phys_PxExp")] public static extern float Exp(float a);
		[LinkName("phys_PxCeil")] public static extern float Ceil(float a);
		[LinkName("phys_PxSign")] public static extern float Sign(float a);
		[LinkName("phys_PxPow")] public static extern float Pow(float x, float y);
		[LinkName("phys_PxLog")] public static extern float Log(float x);
		[LinkName("PxVec3_new")] public static extern PxVec3 Vec3_new();
		[LinkName("PxVec3_new_1")] public static extern PxVec3 Vec3_new_1(uint32 r_pod);
		[LinkName("PxVec3_new_2")] public static extern PxVec3 Vec3_new_2(float a);
		[LinkName("PxVec3_new_3")] public static extern PxVec3 Vec3_new_3(float nx, float ny, float nz);
		[LinkName("PxVec3_isZero")] public static extern bool Vec3_isZero(PxVec3* self__pod);
		[LinkName("PxVec3_isFinite")] public static extern bool Vec3_isFinite(PxVec3* self__pod);
		[LinkName("PxVec3_isNormalized")] public static extern bool Vec3_isNormalized(PxVec3* self__pod);
		[LinkName("PxVec3_magnitudeSquared")] public static extern float Vec3_magnitudeSquared(PxVec3* self__pod);
		[LinkName("PxVec3_magnitude")] public static extern float Vec3_magnitude(PxVec3* self__pod);
		[LinkName("PxVec3_dot")] public static extern float Vec3_dot(PxVec3* self__pod, PxVec3* v_pod);
		[LinkName("PxVec3_cross")] public static extern PxVec3 Vec3_cross(PxVec3* self__pod, PxVec3* v_pod);
		[LinkName("PxVec3_getNormalized")] public static extern PxVec3 Vec3_getNormalized(PxVec3* self__pod);
		[LinkName("PxVec3_normalize_mut")] public static extern float Vec3_normalize_mut(PxVec3* self__pod);
		[LinkName("PxVec3_normalizeSafe_mut")] public static extern float Vec3_normalizeSafe_mut(PxVec3* self__pod);
		[LinkName("PxVec3_normalizeFast_mut")] public static extern float Vec3_normalizeFast_mut(PxVec3* self__pod);
		[LinkName("PxVec3_multiply")] public static extern PxVec3 Vec3_multiply(PxVec3* self__pod, PxVec3* a_pod);
		[LinkName("PxVec3_minimum")] public static extern PxVec3 Vec3_minimum(PxVec3* self__pod, PxVec3* v_pod);
		[LinkName("PxVec3_minElement")] public static extern float Vec3_minElement(PxVec3* self__pod);
		[LinkName("PxVec3_maximum")] public static extern PxVec3 Vec3_maximum(PxVec3* self__pod, PxVec3* v_pod);
		[LinkName("PxVec3_maxElement")] public static extern float Vec3_maxElement(PxVec3* self__pod);
		[LinkName("PxVec3_abs")] public static extern PxVec3 Vec3_abs(PxVec3* self__pod);
		[LinkName("PxQuat_new")] public static extern PxQuat Quat_new();
		[LinkName("PxQuat_new_1")] public static extern PxQuat Quat_new_1(uint32 r_pod);
		[LinkName("PxQuat_new_2")] public static extern PxQuat Quat_new_2(float r);
		[LinkName("PxQuat_new_3")] public static extern PxQuat Quat_new_3(float nx, float ny, float nz, float nw);
		[LinkName("PxQuat_new_4")] public static extern PxQuat Quat_new_4(float angleRadians, PxVec3* unitAxis_pod);
		[LinkName("PxQuat_new_5")] public static extern PxQuat Quat_new_5(PxMat33* m_pod);
		[LinkName("PxQuat_isIdentity")] public static extern bool Quat_isIdentity(PxQuat* self__pod);
		[LinkName("PxQuat_isFinite")] public static extern bool Quat_isFinite(PxQuat* self__pod);
		[LinkName("PxQuat_isUnit")] public static extern bool Quat_isUnit(PxQuat* self__pod);
		[LinkName("PxQuat_isSane")] public static extern bool Quat_isSane(PxQuat* self__pod);
		[LinkName("PxQuat_toRadiansAndUnitAxis")] public static extern void Quat_toRadiansAndUnitAxis(PxQuat* self__pod, float* angle_pod, PxVec3* axis_pod);
		[LinkName("PxQuat_getAngle")] public static extern float Quat_getAngle(PxQuat* self__pod);
		[LinkName("PxQuat_getAngle_1")] public static extern float Quat_getAngle_1(PxQuat* self__pod, PxQuat* q_pod);
		[LinkName("PxQuat_magnitudeSquared")] public static extern float Quat_magnitudeSquared(PxQuat* self__pod);
		[LinkName("PxQuat_dot")] public static extern float Quat_dot(PxQuat* self__pod, PxQuat* v_pod);
		[LinkName("PxQuat_getNormalized")] public static extern PxQuat Quat_getNormalized(PxQuat* self__pod);
		[LinkName("PxQuat_magnitude")] public static extern float Quat_magnitude(PxQuat* self__pod);
		[LinkName("PxQuat_normalize_mut")] public static extern float Quat_normalize_mut(PxQuat* self__pod);
		[LinkName("PxQuat_getConjugate")] public static extern PxQuat Quat_getConjugate(PxQuat* self__pod);
		[LinkName("PxQuat_getImaginaryPart")] public static extern PxVec3 Quat_getImaginaryPart(PxQuat* self__pod);
		[LinkName("PxQuat_getBasisVector0")] public static extern PxVec3 Quat_getBasisVector0(PxQuat* self__pod);
		[LinkName("PxQuat_getBasisVector1")] public static extern PxVec3 Quat_getBasisVector1(PxQuat* self__pod);
		[LinkName("PxQuat_getBasisVector2")] public static extern PxVec3 Quat_getBasisVector2(PxQuat* self__pod);
		[LinkName("PxQuat_rotate")] public static extern PxVec3 Quat_rotate(PxQuat* self__pod, PxVec3* v_pod);
		[LinkName("PxQuat_rotateInv")] public static extern PxVec3 Quat_rotateInv(PxQuat* self__pod, PxVec3* v_pod);
		[LinkName("PxPlane_new")] public static extern PxPlane Plane_new();
		[LinkName("PxPlane_new_1")] public static extern PxPlane Plane_new_1(float nx, float ny, float nz, float distance);
		[LinkName("PxPlane_new_2")] public static extern PxPlane Plane_new_2(PxVec3* normal_pod, float distance);
		[LinkName("PxPlane_new_3")] public static extern PxPlane Plane_new_3(PxVec3* point_pod, PxVec3* normal_pod);
		[LinkName("PxPlane_new_4")] public static extern PxPlane Plane_new_4(PxVec3* p0_pod, PxVec3* p1_pod, PxVec3* p2_pod);
		[LinkName("PxPlane_distance")] public static extern float Plane_distance(PxPlane* self__pod, PxVec3* p_pod);
		[LinkName("PxPlane_contains")] public static extern bool Plane_contains(PxPlane* self__pod, PxVec3* p_pod);
		[LinkName("PxPlane_project")] public static extern PxVec3 Plane_project(PxPlane* self__pod, PxVec3* p_pod);
		[LinkName("PxPlane_pointInPlane")] public static extern PxVec3 Plane_pointInPlane(PxPlane* self__pod);
		[LinkName("PxPlane_normalize_mut")] public static extern void Plane_normalize_mut(PxPlane* self__pod);
		[LinkName("PxTransform_new")] public static extern PxTransform Transform_new();
		[LinkName("PxTransform_new_1")] public static extern PxTransform Transform_new_1(PxVec3* position_pod);
		[LinkName("PxTransform_new_2")] public static extern PxTransform Transform_new_2(uint32 r_pod);
		[LinkName("PxTransform_new_3")] public static extern PxTransform Transform_new_3(PxQuat* orientation_pod);
		[LinkName("PxTransform_new_4")] public static extern PxTransform Transform_new_4(float x, float y, float z, PxQuat aQ_pod);
		[LinkName("PxTransform_new_5")] public static extern PxTransform Transform_new_5(PxVec3* p0_pod, PxQuat* q0_pod);
		[LinkName("PxTransform_new_6")] public static extern PxTransform Transform_new_6(PxMat44* m_pod);
		[LinkName("PxTransform_getInverse")] public static extern PxTransform Transform_getInverse(PxTransform* self__pod);
		[LinkName("PxTransform_transform")] public static extern PxVec3 Transform_transform(PxTransform* self__pod, PxVec3* input_pod);
		[LinkName("PxTransform_transformInv")] public static extern PxVec3 Transform_transformInv(PxTransform* self__pod, PxVec3* input_pod);
		[LinkName("PxTransform_rotate")] public static extern PxVec3 Transform_rotate(PxTransform* self__pod, PxVec3* input_pod);
		[LinkName("PxTransform_rotateInv")] public static extern PxVec3 Transform_rotateInv(PxTransform* self__pod, PxVec3* input_pod);
		[LinkName("PxTransform_transform_1")] public static extern PxTransform Transform_transform_1(PxTransform* self__pod, PxTransform* src_pod);
		[LinkName("PxTransform_isValid")] public static extern bool Transform_isValid(PxTransform* self__pod);
		[LinkName("PxTransform_isSane")] public static extern bool Transform_isSane(PxTransform* self__pod);
		[LinkName("PxTransform_isFinite")] public static extern bool Transform_isFinite(PxTransform* self__pod);
		[LinkName("PxTransform_transformInv_1")] public static extern PxTransform Transform_transformInv_1(PxTransform* self__pod, PxTransform* src_pod);
		[LinkName("PxTransform_transform_2")] public static extern PxPlane Transform_transform_2(PxTransform* self__pod, PxPlane* plane_pod);
		[LinkName("PxTransform_inverseTransform")] public static extern PxPlane Transform_inverseTransform(PxTransform* self__pod, PxPlane* plane_pod);
		[LinkName("PxTransform_getNormalized")] public static extern PxTransform Transform_getNormalized(PxTransform* self__pod);
		[LinkName("PxMat33_new")] public static extern PxMat33 Mat33_new();
		[LinkName("PxMat33_new_1")] public static extern PxMat33 Mat33_new_1(uint32 r_pod);
		[LinkName("PxMat33_new_2")] public static extern PxMat33 Mat33_new_2(uint32 r_pod);
		[LinkName("PxMat33_new_3")] public static extern PxMat33 Mat33_new_3(PxVec3* col0_pod, PxVec3* col1_pod, PxVec3* col2_pod);
		[LinkName("PxMat33_new_4")] public static extern PxMat33 Mat33_new_4(float r);
		[LinkName("PxMat33_new_5")] public static extern PxMat33 Mat33_new_5(float* values);
		[LinkName("PxMat33_new_6")] public static extern PxMat33 Mat33_new_6(PxQuat* q_pod);
		[LinkName("PxMat33_createDiagonal_mut")] public static extern PxMat33 Mat33_createDiagonal_mut(PxVec3* d_pod);
		[LinkName("PxMat33_getTranspose")] public static extern PxMat33 Mat33_getTranspose(PxMat33* self__pod);
		[LinkName("PxMat33_getInverse")] public static extern PxMat33 Mat33_getInverse(PxMat33* self__pod);
		[LinkName("PxMat33_getDeterminant")] public static extern float Mat33_getDeterminant(PxMat33* self__pod);
		[LinkName("PxMat33_transform")] public static extern PxVec3 Mat33_transform(PxMat33* self__pod, PxVec3* other_pod);
		[LinkName("PxMat33_transformTranspose")] public static extern PxVec3 Mat33_transformTranspose(PxMat33* self__pod, PxVec3* other_pod);
		[LinkName("PxMat33_front")] public static extern float* Mat33_front(PxMat33* self__pod);
		[LinkName("PxQuat_new_6")] public static extern PxQuat Quat_new_6(PxMat33* m_pod);
		[LinkName("PxBounds3_new")] public static extern PxBounds3 Bounds3_new();
		[LinkName("PxBounds3_new_1")] public static extern PxBounds3 Bounds3_new_1(PxVec3* minimum_pod, PxVec3* maximum_pod);
		[LinkName("PxBounds3_empty_mut")] public static extern PxBounds3 Bounds3_empty_mut();
		[LinkName("PxBounds3_boundsOfPoints_mut")] public static extern PxBounds3 Bounds3_boundsOfPoints_mut(PxVec3* v0_pod, PxVec3* v1_pod);
		[LinkName("PxBounds3_centerExtents_mut")] public static extern PxBounds3 Bounds3_centerExtents_mut(PxVec3* center_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_basisExtent_mut")] public static extern PxBounds3 Bounds3_basisExtent_mut(PxVec3* center_pod, PxMat33* basis_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_poseExtent_mut")] public static extern PxBounds3 Bounds3_poseExtent_mut(PxTransform* pose_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_transformSafe_mut")] public static extern PxBounds3 Bounds3_transformSafe_mut(PxMat33* matrix_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformFast_mut")] public static extern PxBounds3 Bounds3_transformFast_mut(PxMat33* matrix_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformSafe_mut_1")] public static extern PxBounds3 Bounds3_transformSafe_mut_1(PxTransform* transform_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformFast_mut_1")] public static extern PxBounds3 Bounds3_transformFast_mut_1(PxTransform* transform_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_setEmpty_mut")] public static extern void Bounds3_setEmpty_mut(PxBounds3* self__pod);
		[LinkName("PxBounds3_setMaximal_mut")] public static extern void Bounds3_setMaximal_mut(PxBounds3* self__pod);
		[LinkName("PxBounds3_include_mut")] public static extern void Bounds3_include_mut(PxBounds3* self__pod, PxVec3* v_pod);
		[LinkName("PxBounds3_include_mut_1")] public static extern void Bounds3_include_mut_1(PxBounds3* self__pod, PxBounds3* b_pod);
		[LinkName("PxBounds3_isEmpty")] public static extern bool Bounds3_isEmpty(PxBounds3* self__pod);
		[LinkName("PxBounds3_intersects")] public static extern bool Bounds3_intersects(PxBounds3* self__pod, PxBounds3* b_pod);
		[LinkName("PxBounds3_intersects1D")] public static extern bool Bounds3_intersects1D(PxBounds3* self__pod, PxBounds3* a_pod, uint32 axis);
		[LinkName("PxBounds3_contains")] public static extern bool Bounds3_contains(PxBounds3* self__pod, PxVec3* v_pod);
		[LinkName("PxBounds3_isInside")] public static extern bool Bounds3_isInside(PxBounds3* self__pod, PxBounds3* box_pod);
		[LinkName("PxBounds3_getCenter")] public static extern PxVec3 Bounds3_getCenter(PxBounds3* self__pod);
		[LinkName("PxBounds3_getCenter_1")] public static extern float Bounds3_getCenter_1(PxBounds3* self__pod, uint32 axis);
		[LinkName("PxBounds3_getExtents")] public static extern float Bounds3_getExtents(PxBounds3* self__pod, uint32 axis);
		[LinkName("PxBounds3_getDimensions")] public static extern PxVec3 Bounds3_getDimensions(PxBounds3* self__pod);
		[LinkName("PxBounds3_getExtents_1")] public static extern PxVec3 Bounds3_getExtents_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_scaleSafe_mut")] public static extern void Bounds3_scaleSafe_mut(PxBounds3* self__pod, float scale);
		[LinkName("PxBounds3_scaleFast_mut")] public static extern void Bounds3_scaleFast_mut(PxBounds3* self__pod, float scale);
		[LinkName("PxBounds3_fattenSafe_mut")] public static extern void Bounds3_fattenSafe_mut(PxBounds3* self__pod, float distance);
		[LinkName("PxBounds3_fattenFast_mut")] public static extern void Bounds3_fattenFast_mut(PxBounds3* self__pod, float distance);
		[LinkName("PxBounds3_isFinite")] public static extern bool Bounds3_isFinite(PxBounds3* self__pod);
		[LinkName("PxBounds3_isValid")] public static extern bool Bounds3_isValid(PxBounds3* self__pod);
		[LinkName("PxBounds3_new_2")] public static extern PxBounds3 Bounds3_new_2(PxVec3* minimum__pod, PxVec3* maximum__pod);
		[LinkName("PxBounds3_empty_mut_1")] public static extern PxBounds3 Bounds3_empty_mut_1();
		[LinkName("PxBounds3_isFinite_1")] public static extern bool Bounds3_isFinite_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_boundsOfPoints_mut_1")] public static extern PxBounds3 Bounds3_boundsOfPoints_mut_1(PxVec3* v0_pod, PxVec3* v1_pod);
		[LinkName("PxBounds3_centerExtents_mut_1")] public static extern PxBounds3 Bounds3_centerExtents_mut_1(PxVec3* center_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_basisExtent_mut_1")] public static extern PxBounds3 Bounds3_basisExtent_mut_1(PxVec3* center_pod, PxMat33* basis_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_poseExtent_mut_1")] public static extern PxBounds3 Bounds3_poseExtent_mut_1(PxTransform* pose_pod, PxVec3* extent_pod);
		[LinkName("PxBounds3_setEmpty_mut_1")] public static extern void Bounds3_setEmpty_mut_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_setMaximal_mut_1")] public static extern void Bounds3_setMaximal_mut_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_include_mut_2")] public static extern void Bounds3_include_mut_2(PxBounds3* self__pod, PxVec3* v_pod);
		[LinkName("PxBounds3_include_mut_3")] public static extern void Bounds3_include_mut_3(PxBounds3* self__pod, PxBounds3* b_pod);
		[LinkName("PxBounds3_isEmpty_1")] public static extern bool Bounds3_isEmpty_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_intersects_1")] public static extern bool Bounds3_intersects_1(PxBounds3* self__pod, PxBounds3* b_pod);
		[LinkName("PxBounds3_intersects1D_1")] public static extern bool Bounds3_intersects1D_1(PxBounds3* self__pod, PxBounds3* a_pod, uint32 axis);
		[LinkName("PxBounds3_contains_1")] public static extern bool Bounds3_contains_1(PxBounds3* self__pod, PxVec3* v_pod);
		[LinkName("PxBounds3_isInside_1")] public static extern bool Bounds3_isInside_1(PxBounds3* self__pod, PxBounds3* box_pod);
		[LinkName("PxBounds3_getCenter_2")] public static extern PxVec3 Bounds3_getCenter_2(PxBounds3* self__pod);
		[LinkName("PxBounds3_getCenter_3")] public static extern float Bounds3_getCenter_3(PxBounds3* self__pod, uint32 axis);
		[LinkName("PxBounds3_getExtents_2")] public static extern float Bounds3_getExtents_2(PxBounds3* self__pod, uint32 axis);
		[LinkName("PxBounds3_getDimensions_1")] public static extern PxVec3 Bounds3_getDimensions_1(PxBounds3* self__pod);
		[LinkName("PxBounds3_getExtents_3")] public static extern PxVec3 Bounds3_getExtents_3(PxBounds3* self__pod);
		[LinkName("PxBounds3_scaleSafe_mut_1")] public static extern void Bounds3_scaleSafe_mut_1(PxBounds3* self__pod, float scale);
		[LinkName("PxBounds3_scaleFast_mut_1")] public static extern void Bounds3_scaleFast_mut_1(PxBounds3* self__pod, float scale);
		[LinkName("PxBounds3_fattenSafe_mut_1")] public static extern void Bounds3_fattenSafe_mut_1(PxBounds3* self__pod, float distance);
		[LinkName("PxBounds3_fattenFast_mut_1")] public static extern void Bounds3_fattenFast_mut_1(PxBounds3* self__pod, float distance);
		[LinkName("PxBounds3_transformSafe_mut_2")] public static extern PxBounds3 Bounds3_transformSafe_mut_2(PxMat33* matrix_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformFast_mut_2")] public static extern PxBounds3 Bounds3_transformFast_mut_2(PxMat33* matrix_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformSafe_mut_3")] public static extern PxBounds3 Bounds3_transformSafe_mut_3(PxTransform* transform_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_transformFast_mut_3")] public static extern PxBounds3 Bounds3_transformFast_mut_3(PxTransform* transform_pod, PxBounds3* bounds_pod);
		[LinkName("PxBounds3_isValid_1")] public static extern bool Bounds3_isValid_1(PxBounds3* self__pod);
		[LinkName("PxErrorCallback_delete")] public static extern void ErrorCallback_delete(PxErrorCallback* self__pod);
		[LinkName("PxErrorCallback_reportError_mut")] public static extern void ErrorCallback_reportError_mut(PxErrorCallback* self__pod, int32 code_pod, char8* message, char8* file, int32 line);
		[LinkName("PxInputStream_read_mut")] public static extern uint32 InputStream_read_mut(PxInputStream* self__pod, void* dest, uint32 count);
		[LinkName("PxInputStream_delete")] public static extern void InputStream_delete(PxInputStream* self__pod);
		[LinkName("PxInputData_getLength")] public static extern uint32 InputData_getLength(PxInputData* self__pod);
		[LinkName("PxInputData_seek_mut")] public static extern void InputData_seek_mut(PxInputData* self__pod, uint32 offset);
		[LinkName("PxInputData_tell")] public static extern uint32 InputData_tell(PxInputData* self__pod);
		[LinkName("PxInputData_delete")] public static extern void InputData_delete(PxInputData* self__pod);
		[LinkName("PxOutputStream_write_mut")] public static extern uint32 OutputStream_write_mut(PxOutputStream* self__pod, void* src, uint32 count);
		[LinkName("PxOutputStream_delete")] public static extern void OutputStream_delete(PxOutputStream* self__pod);
		[LinkName("PxVec4_new")] public static extern PxVec4 Vec4_new();
		[LinkName("PxVec4_new_1")] public static extern PxVec4 Vec4_new_1(uint32 r_pod);
		[LinkName("PxVec4_new_2")] public static extern PxVec4 Vec4_new_2(float a);
		[LinkName("PxVec4_new_3")] public static extern PxVec4 Vec4_new_3(float nx, float ny, float nz, float nw);
		[LinkName("PxVec4_new_4")] public static extern PxVec4 Vec4_new_4(PxVec3* v_pod, float nw);
		[LinkName("PxVec4_new_5")] public static extern PxVec4 Vec4_new_5(float* v);
		[LinkName("PxVec4_isZero")] public static extern bool Vec4_isZero(PxVec4* self__pod);
		[LinkName("PxVec4_isFinite")] public static extern bool Vec4_isFinite(PxVec4* self__pod);
		[LinkName("PxVec4_isNormalized")] public static extern bool Vec4_isNormalized(PxVec4* self__pod);
		[LinkName("PxVec4_magnitudeSquared")] public static extern float Vec4_magnitudeSquared(PxVec4* self__pod);
		[LinkName("PxVec4_magnitude")] public static extern float Vec4_magnitude(PxVec4* self__pod);
		[LinkName("PxVec4_dot")] public static extern float Vec4_dot(PxVec4* self__pod, PxVec4* v_pod);
		[LinkName("PxVec4_getNormalized")] public static extern PxVec4 Vec4_getNormalized(PxVec4* self__pod);
		[LinkName("PxVec4_normalize_mut")] public static extern float Vec4_normalize_mut(PxVec4* self__pod);
		[LinkName("PxVec4_multiply")] public static extern PxVec4 Vec4_multiply(PxVec4* self__pod, PxVec4* a_pod);
		[LinkName("PxVec4_minimum")] public static extern PxVec4 Vec4_minimum(PxVec4* self__pod, PxVec4* v_pod);
		[LinkName("PxVec4_maximum")] public static extern PxVec4 Vec4_maximum(PxVec4* self__pod, PxVec4* v_pod);
		[LinkName("PxVec4_getXYZ")] public static extern PxVec3 Vec4_getXYZ(PxVec4* self__pod);
		[LinkName("PxVec4_setZero_mut")] public static extern void Vec4_setZero_mut(PxVec4* self__pod);
		[LinkName("PxMat44_new")] public static extern PxMat44 Mat44_new();
		[LinkName("PxMat44_new_1")] public static extern PxMat44 Mat44_new_1(uint32 r_pod);
		[LinkName("PxMat44_new_2")] public static extern PxMat44 Mat44_new_2(uint32 r_pod);
		[LinkName("PxMat44_new_3")] public static extern PxMat44 Mat44_new_3(PxVec4* col0_pod, PxVec4* col1_pod, PxVec4* col2_pod, PxVec4* col3_pod);
		[LinkName("PxMat44_new_4")] public static extern PxMat44 Mat44_new_4(float r);
		[LinkName("PxMat44_new_5")] public static extern PxMat44 Mat44_new_5(PxVec3* col0_pod, PxVec3* col1_pod, PxVec3* col2_pod, PxVec3* col3_pod);
		[LinkName("PxMat44_new_6")] public static extern PxMat44 Mat44_new_6(float* values);
		[LinkName("PxMat44_new_7")] public static extern PxMat44 Mat44_new_7(PxQuat* q_pod);
		[LinkName("PxMat44_new_8")] public static extern PxMat44 Mat44_new_8(PxVec4* diagonal_pod);
		[LinkName("PxMat44_new_9")] public static extern PxMat44 Mat44_new_9(PxMat33* axes_pod, PxVec3* position_pod);
		[LinkName("PxMat44_new_10")] public static extern PxMat44 Mat44_new_10(PxTransform* t_pod);
		[LinkName("PxMat44_getTranspose")] public static extern PxMat44 Mat44_getTranspose(PxMat44* self__pod);
		[LinkName("PxMat44_transform")] public static extern PxVec4 Mat44_transform(PxMat44* self__pod, PxVec4* other_pod);
		[LinkName("PxMat44_transform_1")] public static extern PxVec3 Mat44_transform_1(PxMat44* self__pod, PxVec3* other_pod);
		[LinkName("PxMat44_rotate")] public static extern PxVec4 Mat44_rotate(PxMat44* self__pod, PxVec4* other_pod);
		[LinkName("PxMat44_rotate_1")] public static extern PxVec3 Mat44_rotate_1(PxMat44* self__pod, PxVec3* other_pod);
		[LinkName("PxMat44_getBasis")] public static extern PxVec3 Mat44_getBasis(PxMat44* self__pod, int32 num);
		[LinkName("PxMat44_getPosition")] public static extern PxVec3 Mat44_getPosition(PxMat44* self__pod);
		[LinkName("PxMat44_setPosition_mut")] public static extern void Mat44_setPosition_mut(PxMat44* self__pod, PxVec3* position_pod);
		[LinkName("PxMat44_front")] public static extern float* Mat44_front(PxMat44* self__pod);
		[LinkName("PxMat44_scale_mut")] public static extern void Mat44_scale_mut(PxMat44* self__pod, PxVec4* p_pod);
		[LinkName("PxMat44_inverseRT")] public static extern PxMat44 Mat44_inverseRT(PxMat44* self__pod);
		[LinkName("PxMat44_isFinite")] public static extern bool Mat44_isFinite(PxMat44* self__pod);
		[LinkName("PxTransform_new_7")] public static extern PxTransform Transform_new_7(PxMat44* m_pod);
		[LinkName("phys_PxShortestRotation")] public static extern PxQuat ShortestRotation(PxVec3* from_pod, PxVec3* target_pod);
		[LinkName("phys_PxDiagonalize")] public static extern PxVec3 Diagonalize(PxMat33* m_pod, PxQuat* axes_pod);
		[LinkName("PxVec2_new")] public static extern PxVec2 Vec2_new();
		[LinkName("PxVec2_new_1")] public static extern PxVec2 Vec2_new_1(uint32 r_pod);
		[LinkName("PxVec2_new_2")] public static extern PxVec2 Vec2_new_2(float a);
		[LinkName("PxVec2_new_3")] public static extern PxVec2 Vec2_new_3(float nx, float ny);
		[LinkName("PxVec2_isZero")] public static extern bool Vec2_isZero(PxVec2* self__pod);
		[LinkName("PxVec2_isFinite")] public static extern bool Vec2_isFinite(PxVec2* self__pod);
		[LinkName("PxVec2_isNormalized")] public static extern bool Vec2_isNormalized(PxVec2* self__pod);
		[LinkName("PxVec2_magnitudeSquared")] public static extern float Vec2_magnitudeSquared(PxVec2* self__pod);
		[LinkName("PxVec2_magnitude")] public static extern float Vec2_magnitude(PxVec2* self__pod);
		[LinkName("PxVec2_dot")] public static extern float Vec2_dot(PxVec2* self__pod, PxVec2* v_pod);
		[LinkName("PxVec2_getNormalized")] public static extern PxVec2 Vec2_getNormalized(PxVec2* self__pod);
		[LinkName("PxVec2_normalize_mut")] public static extern float Vec2_normalize_mut(PxVec2* self__pod);
		[LinkName("PxVec2_multiply")] public static extern PxVec2 Vec2_multiply(PxVec2* self__pod, PxVec2* a_pod);
		[LinkName("PxVec2_minimum")] public static extern PxVec2 Vec2_minimum(PxVec2* self__pod, PxVec2* v_pod);
		[LinkName("PxVec2_minElement")] public static extern float Vec2_minElement(PxVec2* self__pod);
		[LinkName("PxVec2_maximum")] public static extern PxVec2 Vec2_maximum(PxVec2* self__pod, PxVec2* v_pod);
		[LinkName("PxVec2_maxElement")] public static extern float Vec2_maxElement(PxVec2* self__pod);
		[LinkName("phys_PxMemZero")] public static extern void* MemZero(void* dest, uint32 count);
		[LinkName("phys_PxMemSet")] public static extern void* MemSet(void* dest, int32 c, uint32 count);
		[LinkName("phys_PxMemCopy")] public static extern void* MemCopy(void* dest, void* src, uint32 count);
		[LinkName("phys_PxMemMove")] public static extern void* MemMove(void* dest, void* src, uint32 count);
		[LinkName("PxStridedData_new")] public static extern PxStridedData StridedData_new();
		[LinkName("PxBoundedData_new")] public static extern PxBoundedData BoundedData_new();
		[LinkName("PxDebugPoint_new")] public static extern PxDebugPoint DebugPoint_new(PxVec3* p_pod, uint32* c_pod);
		[LinkName("PxDebugLine_new")] public static extern PxDebugLine DebugLine_new(PxVec3* p0_pod, PxVec3* p1_pod, uint32* c_pod);
		[LinkName("PxDebugTriangle_new")] public static extern PxDebugTriangle DebugTriangle_new(PxVec3* p0_pod, PxVec3* p1_pod, PxVec3* p2_pod, uint32* c_pod);
		[LinkName("PxDebugText_new")] public static extern PxDebugText DebugText_new();
		[LinkName("PxDebugText_new_1")] public static extern PxDebugText DebugText_new_1(PxVec3* p_pod, float* s_pod, uint32* c_pod, char8* str);
		[LinkName("PxRenderBuffer_delete")] public static extern void RenderBuffer_delete(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getNbPoints")] public static extern uint32 RenderBuffer_getNbPoints(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getPoints")] public static extern PxDebugPoint* RenderBuffer_getPoints(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getNbLines")] public static extern uint32 RenderBuffer_getNbLines(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getLines")] public static extern PxDebugLine* RenderBuffer_getLines(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getNbTriangles")] public static extern uint32 RenderBuffer_getNbTriangles(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getTriangles")] public static extern PxDebugTriangle* RenderBuffer_getTriangles(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getNbTexts")] public static extern uint32 RenderBuffer_getNbTexts(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_getTexts")] public static extern PxDebugText* RenderBuffer_getTexts(PxRenderBuffer* self__pod);
		[LinkName("PxRenderBuffer_append_mut")] public static extern void RenderBuffer_append_mut(PxRenderBuffer* self__pod, PxRenderBuffer* other_pod);
		[LinkName("PxRenderBuffer_clear_mut")] public static extern void RenderBuffer_clear_mut(PxRenderBuffer* self__pod);
		[LinkName("PxProcessPxBaseCallback_delete")] public static extern void ProcessPxBaseCallback_delete(PxProcessPxBaseCallback* self__pod);
		[LinkName("PxProcessPxBaseCallback_process_mut")] public static extern void ProcessPxBaseCallback_process_mut(PxProcessPxBaseCallback* self__pod, PxBase* anonymous_arg0_pod);
		[LinkName("PxSerializationContext_registerReference_mut")] public static extern void SerializationContext_registerReference_mut(PxSerializationContext* self__pod, PxBase* base_pod, uint32 kind, uint64 reference);
		[LinkName("PxSerializationContext_getCollection")] public static extern PxCollection* SerializationContext_getCollection(PxSerializationContext* self__pod);
		[LinkName("PxSerializationContext_writeData_mut")] public static extern void SerializationContext_writeData_mut(PxSerializationContext* self__pod, void* data, uint32 size);
		[LinkName("PxSerializationContext_alignData_mut")] public static extern void SerializationContext_alignData_mut(PxSerializationContext* self__pod, uint32 alignment);
		[LinkName("PxSerializationContext_writeName_mut")] public static extern void SerializationContext_writeName_mut(PxSerializationContext* self__pod, char8* name);
		[LinkName("PxDeserializationContext_resolveReference")] public static extern PxBase* DeserializationContext_resolveReference(PxDeserializationContext* self__pod, uint32 kind, uint64 reference);
		[LinkName("PxDeserializationContext_readName_mut")] public static extern void DeserializationContext_readName_mut(PxDeserializationContext* self__pod, char8** name_pod);
		[LinkName("PxDeserializationContext_alignExtraData_mut")] public static extern void DeserializationContext_alignExtraData_mut(PxDeserializationContext* self__pod, uint32 alignment);
		[LinkName("PxSerializationRegistry_registerSerializer_mut")] public static extern void SerializationRegistry_registerSerializer_mut(PxSerializationRegistry* self__pod, uint16 type, PxSerializer* serializer_pod);
		[LinkName("PxSerializationRegistry_unregisterSerializer_mut")] public static extern PxSerializer* SerializationRegistry_unregisterSerializer_mut(PxSerializationRegistry* self__pod, uint16 type);
		[LinkName("PxSerializationRegistry_registerBinaryMetaDataCallback_mut")] public static extern void SerializationRegistry_registerBinaryMetaDataCallback_mut(PxSerializationRegistry* self__pod, void* callback_pod);
		[LinkName("PxSerializationRegistry_getSerializer")] public static extern PxSerializer* SerializationRegistry_getSerializer(PxSerializationRegistry* self__pod, uint16 type);
		[LinkName("PxSerializationRegistry_registerRepXSerializer_mut")] public static extern void SerializationRegistry_registerRepXSerializer_mut(PxSerializationRegistry* self__pod, uint16 type, PxRepXSerializer* serializer_pod);
		[LinkName("PxSerializationRegistry_unregisterRepXSerializer_mut")] public static extern PxRepXSerializer* SerializationRegistry_unregisterRepXSerializer_mut(PxSerializationRegistry* self__pod, uint16 type);
		[LinkName("PxSerializationRegistry_getRepXSerializer")] public static extern PxRepXSerializer* SerializationRegistry_getRepXSerializer(PxSerializationRegistry* self__pod, char8* typeName);
		[LinkName("PxSerializationRegistry_release_mut")] public static extern void SerializationRegistry_release_mut(PxSerializationRegistry* self__pod);
		[LinkName("PxCollection_add_mut")] public static extern void Collection_add_mut(PxCollection* self__pod, PxBase* object_pod, uint64 id);
		[LinkName("PxCollection_remove_mut")] public static extern void Collection_remove_mut(PxCollection* self__pod, PxBase* object_pod);
		[LinkName("PxCollection_contains")] public static extern bool Collection_contains(PxCollection* self__pod, PxBase* object_pod);
		[LinkName("PxCollection_addId_mut")] public static extern void Collection_addId_mut(PxCollection* self__pod, PxBase* object_pod, uint64 id);
		[LinkName("PxCollection_removeId_mut")] public static extern void Collection_removeId_mut(PxCollection* self__pod, uint64 id);
		[LinkName("PxCollection_add_mut_1")] public static extern void Collection_add_mut_1(PxCollection* self__pod, PxCollection* collection_pod);
		[LinkName("PxCollection_remove_mut_1")] public static extern void Collection_remove_mut_1(PxCollection* self__pod, PxCollection* collection_pod);
		[LinkName("PxCollection_getNbObjects")] public static extern uint32 Collection_getNbObjects(PxCollection* self__pod);
		[LinkName("PxCollection_getObject")] public static extern PxBase* Collection_getObject(PxCollection* self__pod, uint32 index);
		[LinkName("PxCollection_getObjects")] public static extern uint32 Collection_getObjects(PxCollection* self__pod, PxBase** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxCollection_find")] public static extern PxBase* Collection_find(PxCollection* self__pod, uint64 id);
		[LinkName("PxCollection_getNbIds")] public static extern uint32 Collection_getNbIds(PxCollection* self__pod);
		[LinkName("PxCollection_getIds")] public static extern uint32 Collection_getIds(PxCollection* self__pod, uint64* userBuffer, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxCollection_getId")] public static extern uint64 Collection_getId(PxCollection* self__pod, PxBase* object_pod);
		[LinkName("PxCollection_release_mut")] public static extern void Collection_release_mut(PxCollection* self__pod);
		[LinkName("phys_PxCreateCollection")] public static extern PxCollection* CreateCollection();
		[LinkName("PxBase_release_mut")] public static extern void Base_release_mut(PxBase* self__pod);
		[LinkName("PxBase_getConcreteTypeName")] public static extern char8* Base_getConcreteTypeName(PxBase* self__pod);
		[LinkName("PxBase_getConcreteType")] public static extern uint16 Base_getConcreteType(PxBase* self__pod);
		[LinkName("PxBase_setBaseFlag_mut")] public static extern void Base_setBaseFlag_mut(PxBase* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxBase_setBaseFlags_mut")] public static extern void Base_setBaseFlags_mut(PxBase* self__pod, PxBaseFlags inFlags_pod);
		[LinkName("PxBase_getBaseFlags")] public static extern PxBaseFlags Base_getBaseFlags(PxBase* self__pod);
		[LinkName("PxBase_isReleasable")] public static extern bool Base_isReleasable(PxBase* self__pod);
		[LinkName("PxTolerancesScale_new")] public static extern PxTolerancesScale TolerancesScale_new();
		[LinkName("PxTolerancesScale_isValid")] public static extern bool TolerancesScale_isValid(PxTolerancesScale* self__pod);
		[LinkName("PxTolerancesScale_new_1")] public static extern PxTolerancesScale TolerancesScale_new_1();
		[LinkName("PxTolerancesScale_isValid_1")] public static extern bool TolerancesScale_isValid_1(PxTolerancesScale* self__pod);
		[LinkName("PxStringTable_allocateStr_mut")] public static extern char8* StringTable_allocateStr_mut(PxStringTable* self__pod, char8* inSrc);
		[LinkName("PxStringTable_release_mut")] public static extern void StringTable_release_mut(PxStringTable* self__pod);
		[LinkName("PxFoundation_release_mut")] public static extern void Foundation_release_mut(PxFoundation* self__pod);
		[LinkName("PxFoundation_getErrorCallback_mut")] public static extern PxErrorCallback* Foundation_getErrorCallback_mut(PxFoundation* self__pod);
		[LinkName("PxFoundation_setErrorLevel_mut")] public static extern void Foundation_setErrorLevel_mut(PxFoundation* self__pod, int32 mask_pod);
		[LinkName("PxFoundation_getErrorLevel")] public static extern int32 Foundation_getErrorLevel(PxFoundation* self__pod);
		[LinkName("PxFoundation_getAllocatorCallback_mut")] public static extern PxAllocatorCallback* Foundation_getAllocatorCallback_mut(PxFoundation* self__pod);
		[LinkName("PxFoundation_getReportAllocationNames")] public static extern bool Foundation_getReportAllocationNames(PxFoundation* self__pod);
		[LinkName("PxFoundation_setReportAllocationNames_mut")] public static extern void Foundation_setReportAllocationNames_mut(PxFoundation* self__pod, bool value);
		[LinkName("phys_PxCreateFoundation")] public static extern PxFoundation* CreateFoundation(uint32 version, PxAllocatorCallback* allocator_pod, PxErrorCallback* errorCallback_pod);
		[LinkName("phys_PxGetFoundation")] public static extern PxFoundation* GetFoundation();
		[LinkName("phys_PxGetProfilerCallback")] public static extern PxProfilerCallback* GetProfilerCallback();
		[LinkName("phys_PxSetProfilerCallback")] public static extern void SetProfilerCallback(PxProfilerCallback* profiler_pod);
		[LinkName("PxSerializer_getConcreteTypeName")] public static extern char8* Serializer_getConcreteTypeName(PxSerializer* self__pod);
		[LinkName("PxSerializer_requiresObjects")] public static extern void Serializer_requiresObjects(PxSerializer* self__pod, PxBase* anonymous_arg0_pod, PxProcessPxBaseCallback* anonymous_arg1_pod);
		[LinkName("PxSerializer_isSubordinate")] public static extern bool Serializer_isSubordinate(PxSerializer* self__pod);
		[LinkName("PxSerializer_exportExtraData")] public static extern void Serializer_exportExtraData(PxSerializer* self__pod, PxBase* anonymous_arg0_pod, PxSerializationContext* anonymous_arg1_pod);
		[LinkName("PxSerializer_exportData")] public static extern void Serializer_exportData(PxSerializer* self__pod, PxBase* anonymous_arg0_pod, PxSerializationContext* anonymous_arg1_pod);
		[LinkName("PxSerializer_registerReferences")] public static extern void Serializer_registerReferences(PxSerializer* self__pod, PxBase* obj_pod, PxSerializationContext* s_pod);
		[LinkName("PxSerializer_getClassSize")] public static extern uint64 Serializer_getClassSize(PxSerializer* self__pod);
		[LinkName("PxSerializer_createObject")] public static extern PxBase* Serializer_createObject(PxSerializer* self__pod, uint8** address_pod, PxDeserializationContext* context_pod);
		[LinkName("PxSerializer_delete")] public static extern void Serializer_delete(PxSerializer* self__pod);
		[LinkName("PxPhysicsInsertionCallback_buildObjectFromData_mut")] public static extern PxBase* PhysicsInsertionCallback_buildObjectFromData_mut(PxPhysicsInsertionCallback* self__pod, uint32 type_pod, void* data);
		[LinkName("PxTaskManager_setCpuDispatcher_mut")] public static extern void TaskManager_setCpuDispatcher_mut(PxTaskManager* self__pod, PxCpuDispatcher* ref_pod);
		[LinkName("PxTaskManager_getCpuDispatcher")] public static extern PxCpuDispatcher* TaskManager_getCpuDispatcher(PxTaskManager* self__pod);
		[LinkName("PxTaskManager_resetDependencies_mut")] public static extern void TaskManager_resetDependencies_mut(PxTaskManager* self__pod);
		[LinkName("PxTaskManager_startSimulation_mut")] public static extern void TaskManager_startSimulation_mut(PxTaskManager* self__pod);
		[LinkName("PxTaskManager_stopSimulation_mut")] public static extern void TaskManager_stopSimulation_mut(PxTaskManager* self__pod);
		[LinkName("PxTaskManager_taskCompleted_mut")] public static extern void TaskManager_taskCompleted_mut(PxTaskManager* self__pod, PxTask* task_pod);
		[LinkName("PxTaskManager_getNamedTask_mut")] public static extern uint32 TaskManager_getNamedTask_mut(PxTaskManager* self__pod, char8* name);
		[LinkName("PxTaskManager_submitNamedTask_mut")] public static extern uint32 TaskManager_submitNamedTask_mut(PxTaskManager* self__pod, PxTask* task_pod, char8* name, uint32 type_pod);
		[LinkName("PxTaskManager_submitUnnamedTask_mut")] public static extern uint32 TaskManager_submitUnnamedTask_mut(PxTaskManager* self__pod, PxTask* task_pod, uint32 type_pod);
		[LinkName("PxTaskManager_getTaskFromID_mut")] public static extern PxTask* TaskManager_getTaskFromID_mut(PxTaskManager* self__pod, uint32 id);
		[LinkName("PxTaskManager_release_mut")] public static extern void TaskManager_release_mut(PxTaskManager* self__pod);
		[LinkName("PxTaskManager_createTaskManager_mut")] public static extern PxTaskManager* TaskManager_createTaskManager_mut(PxErrorCallback* errorCallback_pod, PxCpuDispatcher* anonymous_arg1_pod);
		[LinkName("PxCpuDispatcher_submitTask_mut")] public static extern void CpuDispatcher_submitTask_mut(PxCpuDispatcher* self__pod, PxBaseTask* task_pod);
		[LinkName("PxCpuDispatcher_getWorkerCount")] public static extern uint32 CpuDispatcher_getWorkerCount(PxCpuDispatcher* self__pod);
		[LinkName("PxCpuDispatcher_delete")] public static extern void CpuDispatcher_delete(PxCpuDispatcher* self__pod);
		[LinkName("PxBaseTask_run_mut")] public static extern void BaseTask_run_mut(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_getName")] public static extern char8* BaseTask_getName(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_addReference_mut")] public static extern void BaseTask_addReference_mut(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_removeReference_mut")] public static extern void BaseTask_removeReference_mut(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_getReference")] public static extern int32 BaseTask_getReference(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_release_mut")] public static extern void BaseTask_release_mut(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_getTaskManager")] public static extern PxTaskManager* BaseTask_getTaskManager(PxBaseTask* self__pod);
		[LinkName("PxBaseTask_setContextId_mut")] public static extern void BaseTask_setContextId_mut(PxBaseTask* self__pod, uint64 id);
		[LinkName("PxBaseTask_getContextId")] public static extern uint64 BaseTask_getContextId(PxBaseTask* self__pod);
		[LinkName("PxTask_release_mut")] public static extern void Task_release_mut(PxTask* self__pod);
		[LinkName("PxTask_finishBefore_mut")] public static extern void Task_finishBefore_mut(PxTask* self__pod, uint32 taskID);
		[LinkName("PxTask_startAfter_mut")] public static extern void Task_startAfter_mut(PxTask* self__pod, uint32 taskID);
		[LinkName("PxTask_addReference_mut")] public static extern void Task_addReference_mut(PxTask* self__pod);
		[LinkName("PxTask_removeReference_mut")] public static extern void Task_removeReference_mut(PxTask* self__pod);
		[LinkName("PxTask_getReference")] public static extern int32 Task_getReference(PxTask* self__pod);
		[LinkName("PxTask_getTaskID")] public static extern uint32 Task_getTaskID(PxTask* self__pod);
		[LinkName("PxTask_submitted_mut")] public static extern void Task_submitted_mut(PxTask* self__pod);
		[LinkName("PxLightCpuTask_setContinuation_mut")] public static extern void LightCpuTask_setContinuation_mut(PxLightCpuTask* self__pod, PxTaskManager* tm_pod, PxBaseTask* c_pod);
		[LinkName("PxLightCpuTask_setContinuation_mut_1")] public static extern void LightCpuTask_setContinuation_mut_1(PxLightCpuTask* self__pod, PxBaseTask* c_pod);
		[LinkName("PxLightCpuTask_getContinuation")] public static extern PxBaseTask* LightCpuTask_getContinuation(PxLightCpuTask* self__pod);
		[LinkName("PxLightCpuTask_removeReference_mut")] public static extern void LightCpuTask_removeReference_mut(PxLightCpuTask* self__pod);
		[LinkName("PxLightCpuTask_getReference")] public static extern int32 LightCpuTask_getReference(PxLightCpuTask* self__pod);
		[LinkName("PxLightCpuTask_addReference_mut")] public static extern void LightCpuTask_addReference_mut(PxLightCpuTask* self__pod);
		[LinkName("PxLightCpuTask_release_mut")] public static extern void LightCpuTask_release_mut(PxLightCpuTask* self__pod);
		[LinkName("PxGeometry_getType")] public static extern int32 Geometry_getType(PxGeometry* self__pod);
		[LinkName("PxBoxGeometry_new")] public static extern PxBoxGeometry BoxGeometry_new();
		[LinkName("PxBoxGeometry_new_1")] public static extern PxBoxGeometry BoxGeometry_new_1(float hx, float hy, float hz);
		[LinkName("PxBoxGeometry_new_2")] public static extern PxBoxGeometry BoxGeometry_new_2(PxVec3 halfExtents__pod);
		[LinkName("PxBoxGeometry_isValid")] public static extern bool BoxGeometry_isValid(PxBoxGeometry* self__pod);
		[LinkName("PxBoxGeometry_isValid_1")] public static extern bool BoxGeometry_isValid_1(PxBoxGeometry* self__pod);
		[LinkName("PxBVHStructure_raycast")] public static extern uint32 BVHStructure_raycast(PxBVHStructure* self__pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float maxDist, uint32 maxHits, uint32* rayHits);
		[LinkName("PxBVHStructure_sweep")] public static extern uint32 BVHStructure_sweep(PxBVHStructure* self__pod, PxBounds3* aabb_pod, PxVec3* unitDir_pod, float maxDist, uint32 maxHits, uint32* sweepHits);
		[LinkName("PxBVHStructure_overlap")] public static extern uint32 BVHStructure_overlap(PxBVHStructure* self__pod, PxBounds3* aabb_pod, uint32 maxHits, uint32* overlapHits);
		[LinkName("PxBVHStructure_getBounds")] public static extern PxBounds3* BVHStructure_getBounds(PxBVHStructure* self__pod);
		[LinkName("PxBVHStructure_getNbBounds")] public static extern uint32 BVHStructure_getNbBounds(PxBVHStructure* self__pod);
		[LinkName("PxBVHStructure_getConcreteTypeName")] public static extern char8* BVHStructure_getConcreteTypeName(PxBVHStructure* self__pod);
		[LinkName("PxCapsuleGeometry_new")] public static extern PxCapsuleGeometry CapsuleGeometry_new();
		[LinkName("PxCapsuleGeometry_new_1")] public static extern PxCapsuleGeometry CapsuleGeometry_new_1(float radius_, float halfHeight_);
		[LinkName("PxCapsuleGeometry_isValid")] public static extern bool CapsuleGeometry_isValid(PxCapsuleGeometry* self__pod);
		[LinkName("PxCapsuleGeometry_isValid_1")] public static extern bool CapsuleGeometry_isValid_1(PxCapsuleGeometry* self__pod);
		[LinkName("phys_PxTransformFromSegment")] public static extern PxTransform TransformFromSegment(PxVec3* p0_pod, PxVec3* p1_pod, float* halfHeight);
		[LinkName("PxConvexMesh_getNbVertices")] public static extern uint32 ConvexMesh_getNbVertices(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getVertices")] public static extern PxVec3* ConvexMesh_getVertices(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getIndexBuffer")] public static extern uint8* ConvexMesh_getIndexBuffer(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getNbPolygons")] public static extern uint32 ConvexMesh_getNbPolygons(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getPolygonData")] public static extern bool ConvexMesh_getPolygonData(PxConvexMesh* self__pod, uint32 index, PxHullPolygon* data_pod);
		[LinkName("PxConvexMesh_release_mut")] public static extern void ConvexMesh_release_mut(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getReferenceCount")] public static extern uint32 ConvexMesh_getReferenceCount(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_acquireReference_mut")] public static extern void ConvexMesh_acquireReference_mut(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getMassInformation")] public static extern void ConvexMesh_getMassInformation(PxConvexMesh* self__pod, float* mass_pod, PxMat33* localInertia_pod, PxVec3* localCenterOfMass_pod);
		[LinkName("PxConvexMesh_getLocalBounds")] public static extern PxBounds3 ConvexMesh_getLocalBounds(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_getConcreteTypeName")] public static extern char8* ConvexMesh_getConcreteTypeName(PxConvexMesh* self__pod);
		[LinkName("PxConvexMesh_isGpuCompatible")] public static extern bool ConvexMesh_isGpuCompatible(PxConvexMesh* self__pod);
		[LinkName("PxMeshScale_new")] public static extern PxMeshScale MeshScale_new();
		[LinkName("PxMeshScale_new_1")] public static extern PxMeshScale MeshScale_new_1(float r);
		[LinkName("PxMeshScale_new_2")] public static extern PxMeshScale MeshScale_new_2(PxVec3* s_pod);
		[LinkName("PxMeshScale_new_3")] public static extern PxMeshScale MeshScale_new_3(PxVec3* s_pod, PxQuat* r_pod);
		[LinkName("PxMeshScale_isIdentity")] public static extern bool MeshScale_isIdentity(PxMeshScale* self__pod);
		[LinkName("PxMeshScale_getInverse")] public static extern PxMeshScale MeshScale_getInverse(PxMeshScale* self__pod);
		[LinkName("PxMeshScale_toMat33")] public static extern PxMat33 MeshScale_toMat33(PxMeshScale* self__pod);
		[LinkName("PxMeshScale_hasNegativeDeterminant")] public static extern bool MeshScale_hasNegativeDeterminant(PxMeshScale* self__pod);
		[LinkName("PxMeshScale_transform")] public static extern PxVec3 MeshScale_transform(PxMeshScale* self__pod, PxVec3* v_pod);
		[LinkName("PxMeshScale_isValidForTriangleMesh")] public static extern bool MeshScale_isValidForTriangleMesh(PxMeshScale* self__pod);
		[LinkName("PxMeshScale_isValidForConvexMesh")] public static extern bool MeshScale_isValidForConvexMesh(PxMeshScale* self__pod);
		[LinkName("PxConvexMeshGeometry_new")] public static extern PxConvexMeshGeometry ConvexMeshGeometry_new();
		[LinkName("PxConvexMeshGeometry_new_1")] public static extern PxConvexMeshGeometry ConvexMeshGeometry_new_1(PxConvexMesh* mesh_pod, PxMeshScale* scaling_pod, PxConvexMeshGeometryFlags flags_pod);
		[LinkName("PxConvexMeshGeometry_isValid")] public static extern bool ConvexMeshGeometry_isValid(PxConvexMeshGeometry* self__pod);
		[LinkName("PxConvexMeshGeometry_isValid_1")] public static extern bool ConvexMeshGeometry_isValid_1(PxConvexMeshGeometry* self__pod);
		[LinkName("PxSphereGeometry_new")] public static extern PxSphereGeometry SphereGeometry_new();
		[LinkName("PxSphereGeometry_new_1")] public static extern PxSphereGeometry SphereGeometry_new_1(float ir);
		[LinkName("PxSphereGeometry_isValid")] public static extern bool SphereGeometry_isValid(PxSphereGeometry* self__pod);
		[LinkName("PxSphereGeometry_isValid_1")] public static extern bool SphereGeometry_isValid_1(PxSphereGeometry* self__pod);
		[LinkName("PxPlaneGeometry_new")] public static extern PxPlaneGeometry PlaneGeometry_new();
		[LinkName("PxPlaneGeometry_isValid")] public static extern bool PlaneGeometry_isValid(PxPlaneGeometry* self__pod);
		[LinkName("PxPlaneGeometry_isValid_1")] public static extern bool PlaneGeometry_isValid_1(PxPlaneGeometry* self__pod);
		[LinkName("phys_PxTransformFromPlaneEquation")] public static extern PxTransform TransformFromPlaneEquation(PxPlane* plane_pod);
		[LinkName("phys_PxPlaneEquationFromTransform")] public static extern PxPlane PlaneEquationFromTransform(PxTransform* transform_pod);
		[LinkName("PxTriangleMeshGeometry_new")] public static extern PxTriangleMeshGeometry TriangleMeshGeometry_new();
		[LinkName("PxTriangleMeshGeometry_new_1")] public static extern PxTriangleMeshGeometry TriangleMeshGeometry_new_1(PxTriangleMesh* mesh_pod, PxMeshScale* scaling_pod, PxMeshGeometryFlags flags_pod);
		[LinkName("PxTriangleMeshGeometry_isValid")] public static extern bool TriangleMeshGeometry_isValid(PxTriangleMeshGeometry* self__pod);
		[LinkName("PxTriangleMeshGeometry_isValid_1")] public static extern bool TriangleMeshGeometry_isValid_1(PxTriangleMeshGeometry* self__pod);
		[LinkName("PxHeightFieldGeometry_new")] public static extern PxHeightFieldGeometry HeightFieldGeometry_new();
		[LinkName("PxHeightFieldGeometry_new_1")] public static extern PxHeightFieldGeometry HeightFieldGeometry_new_1(PxHeightField* hf_pod, PxMeshGeometryFlags flags_pod, float heightScale_, float rowScale_, float columnScale_);
		[LinkName("PxHeightFieldGeometry_isValid")] public static extern bool HeightFieldGeometry_isValid(PxHeightFieldGeometry* self__pod);
		[LinkName("PxHeightFieldGeometry_isValid_1")] public static extern bool HeightFieldGeometry_isValid_1(PxHeightFieldGeometry* self__pod);
		[LinkName("PxGeometryHolder_getType")] public static extern int32 GeometryHolder_getType(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_any_mut")] public static extern PxGeometry* GeometryHolder_any_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_any")] public static extern PxGeometry* GeometryHolder_any(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_sphere_mut")] public static extern PxSphereGeometry* GeometryHolder_sphere_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_sphere")] public static extern PxSphereGeometry* GeometryHolder_sphere(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_plane_mut")] public static extern PxPlaneGeometry* GeometryHolder_plane_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_plane")] public static extern PxPlaneGeometry* GeometryHolder_plane(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_capsule_mut")] public static extern PxCapsuleGeometry* GeometryHolder_capsule_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_capsule")] public static extern PxCapsuleGeometry* GeometryHolder_capsule(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_box_mut")] public static extern PxBoxGeometry* GeometryHolder_box_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_box")] public static extern PxBoxGeometry* GeometryHolder_box(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_convexMesh_mut")] public static extern PxConvexMeshGeometry* GeometryHolder_convexMesh_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_convexMesh")] public static extern PxConvexMeshGeometry* GeometryHolder_convexMesh(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_triangleMesh_mut")] public static extern PxTriangleMeshGeometry* GeometryHolder_triangleMesh_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_triangleMesh")] public static extern PxTriangleMeshGeometry* GeometryHolder_triangleMesh(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_heightField_mut")] public static extern PxHeightFieldGeometry* GeometryHolder_heightField_mut(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_heightField")] public static extern PxHeightFieldGeometry* GeometryHolder_heightField(PxGeometryHolder* self__pod);
		[LinkName("PxGeometryHolder_storeAny_mut")] public static extern void GeometryHolder_storeAny_mut(PxGeometryHolder* self__pod, PxGeometry* geometry_pod);
		[LinkName("PxGeometryHolder_new")] public static extern PxGeometryHolder GeometryHolder_new();
		[LinkName("PxGeometryHolder_new_1")] public static extern PxGeometryHolder GeometryHolder_new_1(PxGeometry* geometry_pod);
		[LinkName("PxActorShape_new")] public static extern PxActorShape ActorShape_new();
		[LinkName("PxActorShape_new_1")] public static extern PxActorShape ActorShape_new_1(PxRigidActor* a_pod, PxShape* s_pod);
		[LinkName("PxQueryHit_new")] public static extern PxQueryHit QueryHit_new();
		[LinkName("PxLocationHit_new")] public static extern PxLocationHit LocationHit_new();
		[LinkName("PxLocationHit_hadInitialOverlap")] public static extern bool LocationHit_hadInitialOverlap(PxLocationHit* self__pod);
		[LinkName("PxRaycastHit_new")] public static extern PxRaycastHit RaycastHit_new();
		[LinkName("PxSweepHit_new")] public static extern PxSweepHit SweepHit_new();
		[LinkName("PxGeometryQuery_sweep_mut")] public static extern bool GeometryQuery_sweep_mut(PxVec3* unitDir_pod, float maxDist, PxGeometry* geom0_pod, PxTransform* pose0_pod, PxGeometry* geom1_pod, PxTransform* pose1_pod, PxSweepHit* sweepHit_pod, PxHitFlags hitFlags_pod, float inflation);
		[LinkName("PxGeometryQuery_overlap_mut")] public static extern bool GeometryQuery_overlap_mut(PxGeometry* geom0_pod, PxTransform* pose0_pod, PxGeometry* geom1_pod, PxTransform* pose1_pod);
		[LinkName("PxGeometryQuery_raycast_mut")] public static extern uint32 GeometryQuery_raycast_mut(PxVec3* origin_pod, PxVec3* unitDir_pod, PxGeometry* geom_pod, PxTransform* pose_pod, float maxDist, PxHitFlags hitFlags_pod, uint32 maxHits, PxRaycastHit* rayHits_pod);
		[LinkName("PxGeometryQuery_computePenetration_mut")] public static extern bool GeometryQuery_computePenetration_mut(PxVec3* direction_pod, float* depth_pod, PxGeometry* geom0_pod, PxTransform* pose0_pod, PxGeometry* geom1_pod, PxTransform* pose1_pod);
		[LinkName("PxGeometryQuery_pointDistance_mut")] public static extern float GeometryQuery_pointDistance_mut(PxVec3* point_pod, PxGeometry* geom_pod, PxTransform* pose_pod, PxVec3* closestPoint_pod);
		[LinkName("PxGeometryQuery_getWorldBounds_mut")] public static extern PxBounds3 GeometryQuery_getWorldBounds_mut(PxGeometry* geom_pod, PxTransform* pose_pod, float inflation);
		[LinkName("PxGeometryQuery_isValid_mut")] public static extern bool GeometryQuery_isValid_mut(PxGeometry* geom_pod);
		[LinkName("PxHeightFieldSample_tessFlag")] public static extern uint8 HeightFieldSample_tessFlag(PxHeightFieldSample* self__pod);
		[LinkName("PxHeightFieldSample_setTessFlag_mut")] public static extern void HeightFieldSample_setTessFlag_mut(PxHeightFieldSample* self__pod);
		[LinkName("PxHeightFieldSample_clearTessFlag_mut")] public static extern void HeightFieldSample_clearTessFlag_mut(PxHeightFieldSample* self__pod);
		[LinkName("PxHeightField_release_mut")] public static extern void HeightField_release_mut(PxHeightField* self__pod);
		[LinkName("PxHeightField_saveCells")] public static extern uint32 HeightField_saveCells(PxHeightField* self__pod, void* destBuffer, uint32 destBufferSize);
		[LinkName("PxHeightField_modifySamples_mut")] public static extern bool HeightField_modifySamples_mut(PxHeightField* self__pod, int32 startCol, int32 startRow, PxHeightFieldDesc* subfieldDesc_pod, bool shrinkBounds);
		[LinkName("PxHeightField_getNbRows")] public static extern uint32 HeightField_getNbRows(PxHeightField* self__pod);
		[LinkName("PxHeightField_getNbColumns")] public static extern uint32 HeightField_getNbColumns(PxHeightField* self__pod);
		[LinkName("PxHeightField_getFormat")] public static extern uint32 HeightField_getFormat(PxHeightField* self__pod);
		[LinkName("PxHeightField_getSampleStride")] public static extern uint32 HeightField_getSampleStride(PxHeightField* self__pod);
		[LinkName("PxHeightField_getConvexEdgeThreshold")] public static extern float HeightField_getConvexEdgeThreshold(PxHeightField* self__pod);
		[LinkName("PxHeightField_getFlags")] public static extern PxHeightFieldFlags HeightField_getFlags(PxHeightField* self__pod);
		[LinkName("PxHeightField_getHeight")] public static extern float HeightField_getHeight(PxHeightField* self__pod, float x, float z);
		[LinkName("PxHeightField_getReferenceCount")] public static extern uint32 HeightField_getReferenceCount(PxHeightField* self__pod);
		[LinkName("PxHeightField_acquireReference_mut")] public static extern void HeightField_acquireReference_mut(PxHeightField* self__pod);
		[LinkName("PxHeightField_getTriangleMaterialIndex")] public static extern uint16 HeightField_getTriangleMaterialIndex(PxHeightField* self__pod, uint32 triangleIndex);
		[LinkName("PxHeightField_getTriangleNormal")] public static extern PxVec3 HeightField_getTriangleNormal(PxHeightField* self__pod, uint32 triangleIndex);
		[LinkName("PxHeightField_getSample")] public static extern PxHeightFieldSample* HeightField_getSample(PxHeightField* self__pod, uint32 row, uint32 column);
		[LinkName("PxHeightField_getTimestamp")] public static extern uint32 HeightField_getTimestamp(PxHeightField* self__pod);
		[LinkName("PxHeightField_getConcreteTypeName")] public static extern char8* HeightField_getConcreteTypeName(PxHeightField* self__pod);
		[LinkName("PxHeightFieldDesc_new")] public static extern PxHeightFieldDesc HeightFieldDesc_new();
		[LinkName("PxHeightFieldDesc_setToDefault_mut")] public static extern void HeightFieldDesc_setToDefault_mut(PxHeightFieldDesc* self__pod);
		[LinkName("PxHeightFieldDesc_isValid")] public static extern bool HeightFieldDesc_isValid(PxHeightFieldDesc* self__pod);
		[LinkName("PxHeightFieldDesc_new_1")] public static extern PxHeightFieldDesc HeightFieldDesc_new_1();
		[LinkName("PxHeightFieldDesc_setToDefault_mut_1")] public static extern void HeightFieldDesc_setToDefault_mut_1(PxHeightFieldDesc* self__pod);
		[LinkName("PxHeightFieldDesc_isValid_1")] public static extern bool HeightFieldDesc_isValid_1(PxHeightFieldDesc* self__pod);
		[LinkName("PxMeshQuery_getTriangle_mut")] public static extern void MeshQuery_getTriangle_mut(PxTriangleMeshGeometry* triGeom_pod, PxTransform* transform_pod, uint32 triangleIndex, PxTriangle* triangle_pod, uint32* vertexIndices, uint32* adjacencyIndices);
		[LinkName("PxMeshQuery_getTriangle_mut_1")] public static extern void MeshQuery_getTriangle_mut_1(PxHeightFieldGeometry* hfGeom_pod, PxTransform* transform_pod, uint32 triangleIndex, PxTriangle* triangle_pod, uint32* vertexIndices, uint32* adjacencyIndices);
		[LinkName("PxMeshQuery_findOverlapTriangleMesh_mut")] public static extern uint32 MeshQuery_findOverlapTriangleMesh_mut(PxGeometry* geom_pod, PxTransform* geomPose_pod, PxTriangleMeshGeometry* meshGeom_pod, PxTransform* meshPose_pod, uint32* results, uint32 maxResults, uint32 startIndex, bool* overflow_pod);
		[LinkName("PxMeshQuery_findOverlapHeightField_mut")] public static extern uint32 MeshQuery_findOverlapHeightField_mut(PxGeometry* geom_pod, PxTransform* geomPose_pod, PxHeightFieldGeometry* hfGeom_pod, PxTransform* hfPose_pod, uint32* results, uint32 maxResults, uint32 startIndex, bool* overflow_pod);
		[LinkName("PxMeshQuery_sweep_mut")] public static extern bool MeshQuery_sweep_mut(PxVec3* unitDir_pod, float distance, PxGeometry* geom_pod, PxTransform* pose_pod, uint32 triangleCount, PxTriangle* triangles_pod, PxSweepHit* sweepHit_pod, PxHitFlags hitFlags_pod, uint32* cachedIndex, float inflation, bool doubleSided);
		[LinkName("PxSimpleTriangleMesh_new")] public static extern PxSimpleTriangleMesh SimpleTriangleMesh_new();
		[LinkName("PxSimpleTriangleMesh_setToDefault_mut")] public static extern void SimpleTriangleMesh_setToDefault_mut(PxSimpleTriangleMesh* self__pod);
		[LinkName("PxSimpleTriangleMesh_isValid")] public static extern bool SimpleTriangleMesh_isValid(PxSimpleTriangleMesh* self__pod);
		[LinkName("PxSimpleTriangleMesh_new_1")] public static extern PxSimpleTriangleMesh SimpleTriangleMesh_new_1();
		[LinkName("PxSimpleTriangleMesh_setToDefault_mut_1")] public static extern void SimpleTriangleMesh_setToDefault_mut_1(PxSimpleTriangleMesh* self__pod);
		[LinkName("PxSimpleTriangleMesh_isValid_1")] public static extern bool SimpleTriangleMesh_isValid_1(PxSimpleTriangleMesh* self__pod);
		[LinkName("PxTriangle_new_alloc")] public static extern PxTriangle* Triangle_new_alloc();
		[LinkName("PxTriangle_new_alloc_1")] public static extern PxTriangle* Triangle_new_alloc_1(PxVec3* p0_pod, PxVec3* p1_pod, PxVec3* p2_pod);
		[LinkName("PxTriangle_delete")] public static extern void Triangle_delete(PxTriangle* self__pod);
		[LinkName("PxTriangle_normal")] public static extern void Triangle_normal(PxTriangle* self__pod, PxVec3* _normal_pod);
		[LinkName("PxTriangle_denormalizedNormal")] public static extern void Triangle_denormalizedNormal(PxTriangle* self__pod, PxVec3* _normal_pod);
		[LinkName("PxTriangle_area")] public static extern float Triangle_area(PxTriangle* self__pod);
		[LinkName("PxTriangle_pointFromUV")] public static extern PxVec3 Triangle_pointFromUV(PxTriangle* self__pod, float u, float v);
		[LinkName("PxTriangleMesh_getNbVertices")] public static extern uint32 TriangleMesh_getNbVertices(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getVertices")] public static extern PxVec3* TriangleMesh_getVertices(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getVerticesForModification_mut")] public static extern PxVec3* TriangleMesh_getVerticesForModification_mut(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_refitBVH_mut")] public static extern PxBounds3 TriangleMesh_refitBVH_mut(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getNbTriangles")] public static extern uint32 TriangleMesh_getNbTriangles(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getTriangles")] public static extern void* TriangleMesh_getTriangles(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getTriangleMeshFlags")] public static extern PxTriangleMeshFlags TriangleMesh_getTriangleMeshFlags(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getTrianglesRemap")] public static extern uint32* TriangleMesh_getTrianglesRemap(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_release_mut")] public static extern void TriangleMesh_release_mut(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getTriangleMaterialIndex")] public static extern uint16 TriangleMesh_getTriangleMaterialIndex(PxTriangleMesh* self__pod, uint32 triangleIndex);
		[LinkName("PxTriangleMesh_getLocalBounds")] public static extern PxBounds3 TriangleMesh_getLocalBounds(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_getReferenceCount")] public static extern uint32 TriangleMesh_getReferenceCount(PxTriangleMesh* self__pod);
		[LinkName("PxTriangleMesh_acquireReference_mut")] public static extern void TriangleMesh_acquireReference_mut(PxTriangleMesh* self__pod);
		[LinkName("PxActor_release_mut")] public static extern void Actor_release_mut(PxActor* self__pod);
		[LinkName("PxActor_getType")] public static extern uint32 Actor_getType(PxActor* self__pod);
		[LinkName("PxActor_getScene")] public static extern PxScene* Actor_getScene(PxActor* self__pod);
		[LinkName("PxActor_setName_mut")] public static extern void Actor_setName_mut(PxActor* self__pod, char8* name);
		[LinkName("PxActor_getName")] public static extern char8* Actor_getName(PxActor* self__pod);
		[LinkName("PxActor_getWorldBounds")] public static extern PxBounds3 Actor_getWorldBounds(PxActor* self__pod, float inflation);
		[LinkName("PxActor_setActorFlag_mut")] public static extern void Actor_setActorFlag_mut(PxActor* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxActor_setActorFlags_mut")] public static extern void Actor_setActorFlags_mut(PxActor* self__pod, PxActorFlags inFlags_pod);
		[LinkName("PxActor_getActorFlags")] public static extern PxActorFlags Actor_getActorFlags(PxActor* self__pod);
		[LinkName("PxActor_setDominanceGroup_mut")] public static extern void Actor_setDominanceGroup_mut(PxActor* self__pod, uint8 dominanceGroup);
		[LinkName("PxActor_getDominanceGroup")] public static extern uint8 Actor_getDominanceGroup(PxActor* self__pod);
		[LinkName("PxActor_setOwnerClient_mut")] public static extern void Actor_setOwnerClient_mut(PxActor* self__pod, uint8 inClient);
		[LinkName("PxActor_getOwnerClient")] public static extern uint8 Actor_getOwnerClient(PxActor* self__pod);
		[LinkName("PxActor_getAggregate")] public static extern PxAggregate* Actor_getAggregate(PxActor* self__pod);
		[LinkName("PxAggregate_release_mut")] public static extern void Aggregate_release_mut(PxAggregate* self__pod);
		[LinkName("PxAggregate_addActor_mut")] public static extern bool Aggregate_addActor_mut(PxAggregate* self__pod, PxActor* actor_pod, PxBVHStructure* bvhStructure_pod);
		[LinkName("PxAggregate_removeActor_mut")] public static extern bool Aggregate_removeActor_mut(PxAggregate* self__pod, PxActor* actor_pod);
		[LinkName("PxAggregate_addArticulation_mut")] public static extern bool Aggregate_addArticulation_mut(PxAggregate* self__pod, PxArticulationBase* articulation_pod);
		[LinkName("PxAggregate_removeArticulation_mut")] public static extern bool Aggregate_removeArticulation_mut(PxAggregate* self__pod, PxArticulationBase* articulation_pod);
		[LinkName("PxAggregate_getNbActors")] public static extern uint32 Aggregate_getNbActors(PxAggregate* self__pod);
		[LinkName("PxAggregate_getMaxNbActors")] public static extern uint32 Aggregate_getMaxNbActors(PxAggregate* self__pod);
		[LinkName("PxAggregate_getActors")] public static extern uint32 Aggregate_getActors(PxAggregate* self__pod, PxActor** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxAggregate_getScene_mut")] public static extern PxScene* Aggregate_getScene_mut(PxAggregate* self__pod);
		[LinkName("PxAggregate_getSelfCollision")] public static extern bool Aggregate_getSelfCollision(PxAggregate* self__pod);
		[LinkName("PxAggregate_getConcreteTypeName")] public static extern char8* Aggregate_getConcreteTypeName(PxAggregate* self__pod);
		[LinkName("PxArticulationBase_getScene")] public static extern PxScene* ArticulationBase_getScene(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_setSolverIterationCounts_mut")] public static extern void ArticulationBase_setSolverIterationCounts_mut(PxArticulationBase* self__pod, uint32 minPositionIters, uint32 minVelocityIters);
		[LinkName("PxArticulationBase_getSolverIterationCounts")] public static extern void ArticulationBase_getSolverIterationCounts(PxArticulationBase* self__pod, uint32* minPositionIters_pod, uint32* minVelocityIters_pod);
		[LinkName("PxArticulationBase_isSleeping")] public static extern bool ArticulationBase_isSleeping(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_setSleepThreshold_mut")] public static extern void ArticulationBase_setSleepThreshold_mut(PxArticulationBase* self__pod, float threshold);
		[LinkName("PxArticulationBase_getSleepThreshold")] public static extern float ArticulationBase_getSleepThreshold(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_setStabilizationThreshold_mut")] public static extern void ArticulationBase_setStabilizationThreshold_mut(PxArticulationBase* self__pod, float threshold);
		[LinkName("PxArticulationBase_getStabilizationThreshold")] public static extern float ArticulationBase_getStabilizationThreshold(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_setWakeCounter_mut")] public static extern void ArticulationBase_setWakeCounter_mut(PxArticulationBase* self__pod, float wakeCounterValue);
		[LinkName("PxArticulationBase_getWakeCounter")] public static extern float ArticulationBase_getWakeCounter(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_wakeUp_mut")] public static extern void ArticulationBase_wakeUp_mut(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_putToSleep_mut")] public static extern void ArticulationBase_putToSleep_mut(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_createLink_mut")] public static extern PxArticulationLink* ArticulationBase_createLink_mut(PxArticulationBase* self__pod, PxArticulationLink* parent_pod, PxTransform* pose_pod);
		[LinkName("PxArticulationBase_getNbLinks")] public static extern uint32 ArticulationBase_getNbLinks(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_getLinks")] public static extern uint32 ArticulationBase_getLinks(PxArticulationBase* self__pod, PxArticulationLink** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxArticulationBase_setName_mut")] public static extern void ArticulationBase_setName_mut(PxArticulationBase* self__pod, char8* name);
		[LinkName("PxArticulationBase_getName")] public static extern char8* ArticulationBase_getName(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_getWorldBounds")] public static extern PxBounds3 ArticulationBase_getWorldBounds(PxArticulationBase* self__pod, float inflation);
		[LinkName("PxArticulationBase_getAggregate")] public static extern PxAggregate* ArticulationBase_getAggregate(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_getImpl_mut")] public static extern PxArticulationImpl* ArticulationBase_getImpl_mut(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_getImpl")] public static extern PxArticulationImpl* ArticulationBase_getImpl(PxArticulationBase* self__pod);
		[LinkName("PxArticulationBase_createArticulationJoint_mut")] public static extern PxArticulationJointBase* ArticulationBase_createArticulationJoint_mut(PxArticulationBase* self__pod, PxArticulationLink* parent_pod, PxTransform* parentFrame_pod, PxArticulationLink* child_pod, PxTransform* childFrame_pod);
		[LinkName("PxArticulationBase_releaseArticulationJoint_mut")] public static extern void ArticulationBase_releaseArticulationJoint_mut(PxArticulationBase* self__pod, PxArticulationJointBase* joint_pod);
		[LinkName("PxArticulation_release_mut")] public static extern void Articulation_release_mut(PxArticulation* self__pod);
		[LinkName("PxArticulation_setMaxProjectionIterations_mut")] public static extern void Articulation_setMaxProjectionIterations_mut(PxArticulation* self__pod, uint32 iterations);
		[LinkName("PxArticulation_getMaxProjectionIterations")] public static extern uint32 Articulation_getMaxProjectionIterations(PxArticulation* self__pod);
		[LinkName("PxArticulation_setSeparationTolerance_mut")] public static extern void Articulation_setSeparationTolerance_mut(PxArticulation* self__pod, float tolerance);
		[LinkName("PxArticulation_getSeparationTolerance")] public static extern float Articulation_getSeparationTolerance(PxArticulation* self__pod);
		[LinkName("PxArticulation_setInternalDriveIterations_mut")] public static extern void Articulation_setInternalDriveIterations_mut(PxArticulation* self__pod, uint32 iterations);
		[LinkName("PxArticulation_getInternalDriveIterations")] public static extern uint32 Articulation_getInternalDriveIterations(PxArticulation* self__pod);
		[LinkName("PxArticulation_setExternalDriveIterations_mut")] public static extern void Articulation_setExternalDriveIterations_mut(PxArticulation* self__pod, uint32 iterations);
		[LinkName("PxArticulation_getExternalDriveIterations")] public static extern uint32 Articulation_getExternalDriveIterations(PxArticulation* self__pod);
		[LinkName("PxArticulation_createDriveCache")] public static extern PxArticulationDriveCache* Articulation_createDriveCache(PxArticulation* self__pod, float compliance, uint32 driveIterations);
		[LinkName("PxArticulation_updateDriveCache")] public static extern void Articulation_updateDriveCache(PxArticulation* self__pod, PxArticulationDriveCache* driveCache_pod, float compliance, uint32 driveIterations);
		[LinkName("PxArticulation_releaseDriveCache")] public static extern void Articulation_releaseDriveCache(PxArticulation* self__pod, PxArticulationDriveCache* driveCache_pod);
		[LinkName("PxArticulation_applyImpulse_mut")] public static extern void Articulation_applyImpulse_mut(PxArticulation* self__pod, PxArticulationLink* link_pod, PxArticulationDriveCache* driveCache_pod, PxVec3* linearImpulse_pod, PxVec3* angularImpulse_pod);
		[LinkName("PxArticulation_computeImpulseResponse")] public static extern void Articulation_computeImpulseResponse(PxArticulation* self__pod, PxArticulationLink* link_pod, PxVec3* linearResponse_pod, PxVec3* angularResponse_pod, PxArticulationDriveCache* driveCache_pod, PxVec3* linearImpulse_pod, PxVec3* angularImpulse_pod);
		[LinkName("PxConstraintInvMassScale_new")] public static extern PxConstraintInvMassScale ConstraintInvMassScale_new();
		[LinkName("PxConstraintInvMassScale_new_1")] public static extern PxConstraintInvMassScale ConstraintInvMassScale_new_1(float lin0, float ang0, float lin1, float ang1);
		[LinkName("PxConstraintVisualizer_visualizeJointFrames_mut")] public static extern void ConstraintVisualizer_visualizeJointFrames_mut(PxConstraintVisualizer* self__pod, PxTransform* parent_pod, PxTransform* child_pod);
		[LinkName("PxConstraintVisualizer_visualizeLinearLimit_mut")] public static extern void ConstraintVisualizer_visualizeLinearLimit_mut(PxConstraintVisualizer* self__pod, PxTransform* t0_pod, PxTransform* t1_pod, float value, bool active);
		[LinkName("PxConstraintVisualizer_visualizeAngularLimit_mut")] public static extern void ConstraintVisualizer_visualizeAngularLimit_mut(PxConstraintVisualizer* self__pod, PxTransform* t0_pod, float lower, float upper, bool active);
		[LinkName("PxConstraintVisualizer_visualizeLimitCone_mut")] public static extern void ConstraintVisualizer_visualizeLimitCone_mut(PxConstraintVisualizer* self__pod, PxTransform* t_pod, float tanQSwingY, float tanQSwingZ, bool active);
		[LinkName("PxConstraintVisualizer_visualizeDoubleCone_mut")] public static extern void ConstraintVisualizer_visualizeDoubleCone_mut(PxConstraintVisualizer* self__pod, PxTransform* t_pod, float angle, bool active);
		[LinkName("PxConstraintVisualizer_visualizeLine_mut")] public static extern void ConstraintVisualizer_visualizeLine_mut(PxConstraintVisualizer* self__pod, PxVec3* p0_pod, PxVec3* p1_pod, uint32 color);
		[LinkName("PxConstraintConnector_prepareData_mut")] public static extern void* ConstraintConnector_prepareData_mut(PxConstraintConnector* self__pod);
		[LinkName("PxConstraintConnector_updatePvdProperties")] public static extern bool ConstraintConnector_updatePvdProperties(PxConstraintConnector* self__pod, pvdsdk_PvdDataStream* pvdConnection_pod, PxConstraint* c_pod, uint32 updateType_pod);
		[LinkName("PxConstraintConnector_onConstraintRelease_mut")] public static extern void ConstraintConnector_onConstraintRelease_mut(PxConstraintConnector* self__pod);
		[LinkName("PxConstraintConnector_onComShift_mut")] public static extern void ConstraintConnector_onComShift_mut(PxConstraintConnector* self__pod, uint32 actor);
		[LinkName("PxConstraintConnector_onOriginShift_mut")] public static extern void ConstraintConnector_onOriginShift_mut(PxConstraintConnector* self__pod, PxVec3* shift_pod);
		[LinkName("PxConstraintConnector_getExternalReference_mut")] public static extern void* ConstraintConnector_getExternalReference_mut(PxConstraintConnector* self__pod, uint32* typeID_pod);
		[LinkName("PxConstraintConnector_getSerializable_mut")] public static extern PxBase* ConstraintConnector_getSerializable_mut(PxConstraintConnector* self__pod);
		[LinkName("PxConstraintConnector_getPrep")] public static extern void* ConstraintConnector_getPrep(PxConstraintConnector* self__pod);
		[LinkName("PxConstraintConnector_getConstantBlock")] public static extern void* ConstraintConnector_getConstantBlock(PxConstraintConnector* self__pod);
		[LinkName("PxConstraintConnector_delete")] public static extern void ConstraintConnector_delete(PxConstraintConnector* self__pod);
		[LinkName("PxSolverBody_new")] public static extern PxSolverBody SolverBody_new();
		[LinkName("PxSolverBodyData_projectVelocity")] public static extern float SolverBodyData_projectVelocity(PxSolverBodyData* self__pod, PxVec3* lin_pod, PxVec3* ang_pod);
		[LinkName("PxConstraintAllocator_reserveConstraintData_mut")] public static extern uint8* ConstraintAllocator_reserveConstraintData_mut(PxConstraintAllocator* self__pod, uint32 byteSize);
		[LinkName("PxConstraintAllocator_reserveFrictionData_mut")] public static extern uint8* ConstraintAllocator_reserveFrictionData_mut(PxConstraintAllocator* self__pod, uint32 byteSize);
		[LinkName("PxConstraintAllocator_delete")] public static extern void ConstraintAllocator_delete(PxConstraintAllocator* self__pod);
		[LinkName("PxTGSSolverBodyVel_projectVelocity")] public static extern float TGSSolverBodyVel_projectVelocity(PxTGSSolverBodyVel* self__pod, PxVec3* lin_pod, PxVec3* ang_pod);
		[LinkName("PxTGSSolverBodyData_projectVelocity")] public static extern float TGSSolverBodyData_projectVelocity(PxTGSSolverBodyData* self__pod, PxVec3* linear_pod, PxVec3* angular_pod);
		[LinkName("PxArticulationCache_new")] public static extern PxArticulationCache ArticulationCache_new();
		[LinkName("PxArticulationReducedCoordinate_release_mut")] public static extern void ArticulationReducedCoordinate_release_mut(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_setArticulationFlags_mut")] public static extern void ArticulationReducedCoordinate_setArticulationFlags_mut(PxArticulationReducedCoordinate* self__pod, PxArticulationFlags flags_pod);
		[LinkName("PxArticulationReducedCoordinate_setArticulationFlag_mut")] public static extern void ArticulationReducedCoordinate_setArticulationFlag_mut(PxArticulationReducedCoordinate* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxArticulationReducedCoordinate_getArticulationFlags")] public static extern PxArticulationFlags ArticulationReducedCoordinate_getArticulationFlags(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_getDofs")] public static extern uint32 ArticulationReducedCoordinate_getDofs(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_createCache")] public static extern PxArticulationCache* ArticulationReducedCoordinate_createCache(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_getCacheDataSize")] public static extern uint32 ArticulationReducedCoordinate_getCacheDataSize(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_zeroCache_mut")] public static extern void ArticulationReducedCoordinate_zeroCache_mut(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_applyCache_mut")] public static extern void ArticulationReducedCoordinate_applyCache_mut(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod, PxArticulationCacheFlags flag_pod, bool autowake);
		[LinkName("PxArticulationReducedCoordinate_copyInternalStateToCache")] public static extern void ArticulationReducedCoordinate_copyInternalStateToCache(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod, PxArticulationCacheFlags flag_pod);
		[LinkName("PxArticulationReducedCoordinate_releaseCache")] public static extern void ArticulationReducedCoordinate_releaseCache(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_packJointData")] public static extern void ArticulationReducedCoordinate_packJointData(PxArticulationReducedCoordinate* self__pod, float* maximum, float* reduced);
		[LinkName("PxArticulationReducedCoordinate_unpackJointData")] public static extern void ArticulationReducedCoordinate_unpackJointData(PxArticulationReducedCoordinate* self__pod, float* reduced, float* maximum);
		[LinkName("PxArticulationReducedCoordinate_commonInit")] public static extern void ArticulationReducedCoordinate_commonInit(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_computeGeneralizedGravityForce")] public static extern void ArticulationReducedCoordinate_computeGeneralizedGravityForce(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce")] public static extern void ArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeGeneralizedExternalForce")] public static extern void ArticulationReducedCoordinate_computeGeneralizedExternalForce(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeJointAcceleration")] public static extern void ArticulationReducedCoordinate_computeJointAcceleration(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeJointForce")] public static extern void ArticulationReducedCoordinate_computeJointForce(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeDenseJacobian")] public static extern void ArticulationReducedCoordinate_computeDenseJacobian(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod, uint32* nRows_pod, uint32* nCols_pod);
		[LinkName("PxArticulationReducedCoordinate_computeCoefficientMatrix")] public static extern void ArticulationReducedCoordinate_computeCoefficientMatrix(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_computeLambda")] public static extern bool ArticulationReducedCoordinate_computeLambda(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod, PxArticulationCache* initialState_pod, float* jointTorque, uint32 maxIter);
		[LinkName("PxArticulationReducedCoordinate_computeGeneralizedMassMatrix")] public static extern void ArticulationReducedCoordinate_computeGeneralizedMassMatrix(PxArticulationReducedCoordinate* self__pod, PxArticulationCache* cache_pod);
		[LinkName("PxArticulationReducedCoordinate_addLoopJoint_mut")] public static extern void ArticulationReducedCoordinate_addLoopJoint_mut(PxArticulationReducedCoordinate* self__pod, PxJoint* joint_pod);
		[LinkName("PxArticulationReducedCoordinate_removeLoopJoint_mut")] public static extern void ArticulationReducedCoordinate_removeLoopJoint_mut(PxArticulationReducedCoordinate* self__pod, PxJoint* joint_pod);
		[LinkName("PxArticulationReducedCoordinate_getNbLoopJoints")] public static extern uint32 ArticulationReducedCoordinate_getNbLoopJoints(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_getLoopJoints")] public static extern uint32 ArticulationReducedCoordinate_getLoopJoints(PxArticulationReducedCoordinate* self__pod, PxJoint** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxArticulationReducedCoordinate_getCoefficientMatrixSize")] public static extern uint32 ArticulationReducedCoordinate_getCoefficientMatrixSize(PxArticulationReducedCoordinate* self__pod);
		[LinkName("PxArticulationReducedCoordinate_teleportRootLink_mut")] public static extern void ArticulationReducedCoordinate_teleportRootLink_mut(PxArticulationReducedCoordinate* self__pod, PxTransform* pose_pod, bool autowake);
		[LinkName("PxArticulationJointBase_getParentArticulationLink")] public static extern PxArticulationLink* ArticulationJointBase_getParentArticulationLink(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJointBase_setParentPose_mut")] public static extern void ArticulationJointBase_setParentPose_mut(PxArticulationJointBase* self__pod, PxTransform* pose_pod);
		[LinkName("PxArticulationJointBase_getParentPose")] public static extern PxTransform ArticulationJointBase_getParentPose(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJointBase_getChildArticulationLink")] public static extern PxArticulationLink* ArticulationJointBase_getChildArticulationLink(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJointBase_setChildPose_mut")] public static extern void ArticulationJointBase_setChildPose_mut(PxArticulationJointBase* self__pod, PxTransform* pose_pod);
		[LinkName("PxArticulationJointBase_getChildPose")] public static extern PxTransform ArticulationJointBase_getChildPose(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJointBase_getImpl_mut")] public static extern PxArticulationJointImpl* ArticulationJointBase_getImpl_mut(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJointBase_getImpl")] public static extern PxArticulationJointImpl* ArticulationJointBase_getImpl(PxArticulationJointBase* self__pod);
		[LinkName("PxArticulationJoint_setTargetOrientation_mut")] public static extern void ArticulationJoint_setTargetOrientation_mut(PxArticulationJoint* self__pod, PxQuat* orientation_pod);
		[LinkName("PxArticulationJoint_getTargetOrientation")] public static extern PxQuat ArticulationJoint_getTargetOrientation(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setTargetVelocity_mut")] public static extern void ArticulationJoint_setTargetVelocity_mut(PxArticulationJoint* self__pod, PxVec3* velocity_pod);
		[LinkName("PxArticulationJoint_getTargetVelocity")] public static extern PxVec3 ArticulationJoint_getTargetVelocity(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setDriveType_mut")] public static extern void ArticulationJoint_setDriveType_mut(PxArticulationJoint* self__pod, uint32 driveType_pod);
		[LinkName("PxArticulationJoint_getDriveType")] public static extern uint32 ArticulationJoint_getDriveType(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setStiffness_mut")] public static extern void ArticulationJoint_setStiffness_mut(PxArticulationJoint* self__pod, float spring);
		[LinkName("PxArticulationJoint_getStiffness")] public static extern float ArticulationJoint_getStiffness(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setDamping_mut")] public static extern void ArticulationJoint_setDamping_mut(PxArticulationJoint* self__pod, float damping);
		[LinkName("PxArticulationJoint_getDamping")] public static extern float ArticulationJoint_getDamping(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setInternalCompliance_mut")] public static extern void ArticulationJoint_setInternalCompliance_mut(PxArticulationJoint* self__pod, float compliance);
		[LinkName("PxArticulationJoint_getInternalCompliance")] public static extern float ArticulationJoint_getInternalCompliance(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setExternalCompliance_mut")] public static extern void ArticulationJoint_setExternalCompliance_mut(PxArticulationJoint* self__pod, float compliance);
		[LinkName("PxArticulationJoint_getExternalCompliance")] public static extern float ArticulationJoint_getExternalCompliance(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setSwingLimit_mut")] public static extern void ArticulationJoint_setSwingLimit_mut(PxArticulationJoint* self__pod, float zLimit, float yLimit);
		[LinkName("PxArticulationJoint_getSwingLimit")] public static extern void ArticulationJoint_getSwingLimit(PxArticulationJoint* self__pod, float* zLimit_pod, float* yLimit_pod);
		[LinkName("PxArticulationJoint_setTangentialStiffness_mut")] public static extern void ArticulationJoint_setTangentialStiffness_mut(PxArticulationJoint* self__pod, float spring);
		[LinkName("PxArticulationJoint_getTangentialStiffness")] public static extern float ArticulationJoint_getTangentialStiffness(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setTangentialDamping_mut")] public static extern void ArticulationJoint_setTangentialDamping_mut(PxArticulationJoint* self__pod, float damping);
		[LinkName("PxArticulationJoint_getTangentialDamping")] public static extern float ArticulationJoint_getTangentialDamping(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setSwingLimitContactDistance_mut")] public static extern void ArticulationJoint_setSwingLimitContactDistance_mut(PxArticulationJoint* self__pod, float contactDistance);
		[LinkName("PxArticulationJoint_getSwingLimitContactDistance")] public static extern float ArticulationJoint_getSwingLimitContactDistance(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setSwingLimitEnabled_mut")] public static extern void ArticulationJoint_setSwingLimitEnabled_mut(PxArticulationJoint* self__pod, bool enabled);
		[LinkName("PxArticulationJoint_getSwingLimitEnabled")] public static extern bool ArticulationJoint_getSwingLimitEnabled(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setTwistLimit_mut")] public static extern void ArticulationJoint_setTwistLimit_mut(PxArticulationJoint* self__pod, float lower, float upper);
		[LinkName("PxArticulationJoint_getTwistLimit")] public static extern void ArticulationJoint_getTwistLimit(PxArticulationJoint* self__pod, float* lower_pod, float* upper_pod);
		[LinkName("PxArticulationJoint_setTwistLimitEnabled_mut")] public static extern void ArticulationJoint_setTwistLimitEnabled_mut(PxArticulationJoint* self__pod, bool enabled);
		[LinkName("PxArticulationJoint_getTwistLimitEnabled")] public static extern bool ArticulationJoint_getTwistLimitEnabled(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_setTwistLimitContactDistance_mut")] public static extern void ArticulationJoint_setTwistLimitContactDistance_mut(PxArticulationJoint* self__pod, float contactDistance);
		[LinkName("PxArticulationJoint_getTwistLimitContactDistance")] public static extern float ArticulationJoint_getTwistLimitContactDistance(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJoint_getConcreteTypeName")] public static extern char8* ArticulationJoint_getConcreteTypeName(PxArticulationJoint* self__pod);
		[LinkName("PxArticulationJointReducedCoordinate_setJointType_mut")] public static extern void ArticulationJointReducedCoordinate_setJointType_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 jointType_pod);
		[LinkName("PxArticulationJointReducedCoordinate_getJointType")] public static extern uint32 ArticulationJointReducedCoordinate_getJointType(PxArticulationJointReducedCoordinate* self__pod);
		[LinkName("PxArticulationJointReducedCoordinate_setMotion_mut")] public static extern void ArticulationJointReducedCoordinate_setMotion_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, uint32 motion_pod);
		[LinkName("PxArticulationJointReducedCoordinate_getMotion")] public static extern uint32 ArticulationJointReducedCoordinate_getMotion(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod);
		[LinkName("PxArticulationJointReducedCoordinate_setLimit_mut")] public static extern void ArticulationJointReducedCoordinate_setLimit_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float lowLimit, float highLimit);
		[LinkName("PxArticulationJointReducedCoordinate_getLimit_mut")] public static extern void ArticulationJointReducedCoordinate_getLimit_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float* lowLimit_pod, float* highLimit_pod);
		[LinkName("PxArticulationJointReducedCoordinate_setDrive_mut")] public static extern void ArticulationJointReducedCoordinate_setDrive_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float stiffness, float damping, float maxForce, uint32 driveType_pod);
		[LinkName("PxArticulationJointReducedCoordinate_getDrive_mut")] public static extern void ArticulationJointReducedCoordinate_getDrive_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float* stiffness_pod, float* damping_pod, float* maxForce_pod, uint32* driveType_pod);
		[LinkName("PxArticulationJointReducedCoordinate_setDriveTarget_mut")] public static extern void ArticulationJointReducedCoordinate_setDriveTarget_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float target);
		[LinkName("PxArticulationJointReducedCoordinate_setDriveVelocity_mut")] public static extern void ArticulationJointReducedCoordinate_setDriveVelocity_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod, float targetVel);
		[LinkName("PxArticulationJointReducedCoordinate_getDriveTarget_mut")] public static extern float ArticulationJointReducedCoordinate_getDriveTarget_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod);
		[LinkName("PxArticulationJointReducedCoordinate_getDriveVelocity_mut")] public static extern float ArticulationJointReducedCoordinate_getDriveVelocity_mut(PxArticulationJointReducedCoordinate* self__pod, uint32 axis_pod);
		[LinkName("PxArticulationJointReducedCoordinate_setFrictionCoefficient_mut")] public static extern void ArticulationJointReducedCoordinate_setFrictionCoefficient_mut(PxArticulationJointReducedCoordinate* self__pod, float coefficient);
		[LinkName("PxArticulationJointReducedCoordinate_getFrictionCoefficient")] public static extern float ArticulationJointReducedCoordinate_getFrictionCoefficient(PxArticulationJointReducedCoordinate* self__pod);
		[LinkName("PxArticulationJointReducedCoordinate_getConcreteTypeName")] public static extern char8* ArticulationJointReducedCoordinate_getConcreteTypeName(PxArticulationJointReducedCoordinate* self__pod);
		[LinkName("PxArticulationJointReducedCoordinate_setMaxJointVelocity_mut")] public static extern void ArticulationJointReducedCoordinate_setMaxJointVelocity_mut(PxArticulationJointReducedCoordinate* self__pod, float maxJointV);
		[LinkName("PxArticulationJointReducedCoordinate_getMaxJointVelocity")] public static extern float ArticulationJointReducedCoordinate_getMaxJointVelocity(PxArticulationJointReducedCoordinate* self__pod);
		[LinkName("PxShape_release_mut")] public static extern void Shape_release_mut(PxShape* self__pod);
		[LinkName("PxShape_getReferenceCount")] public static extern uint32 Shape_getReferenceCount(PxShape* self__pod);
		[LinkName("PxShape_acquireReference_mut")] public static extern void Shape_acquireReference_mut(PxShape* self__pod);
		[LinkName("PxShape_getGeometryType")] public static extern int32 Shape_getGeometryType(PxShape* self__pod);
		[LinkName("PxShape_setGeometry_mut")] public static extern void Shape_setGeometry_mut(PxShape* self__pod, PxGeometry* geometry_pod);
		[LinkName("PxShape_getGeometry")] public static extern PxGeometryHolder Shape_getGeometry(PxShape* self__pod);
		[LinkName("PxShape_getBoxGeometry")] public static extern bool Shape_getBoxGeometry(PxShape* self__pod, PxBoxGeometry* geometry_pod);
		[LinkName("PxShape_getSphereGeometry")] public static extern bool Shape_getSphereGeometry(PxShape* self__pod, PxSphereGeometry* geometry_pod);
		[LinkName("PxShape_getCapsuleGeometry")] public static extern bool Shape_getCapsuleGeometry(PxShape* self__pod, PxCapsuleGeometry* geometry_pod);
		[LinkName("PxShape_getPlaneGeometry")] public static extern bool Shape_getPlaneGeometry(PxShape* self__pod, PxPlaneGeometry* geometry_pod);
		[LinkName("PxShape_getConvexMeshGeometry")] public static extern bool Shape_getConvexMeshGeometry(PxShape* self__pod, PxConvexMeshGeometry* geometry_pod);
		[LinkName("PxShape_getTriangleMeshGeometry")] public static extern bool Shape_getTriangleMeshGeometry(PxShape* self__pod, PxTriangleMeshGeometry* geometry_pod);
		[LinkName("PxShape_getHeightFieldGeometry")] public static extern bool Shape_getHeightFieldGeometry(PxShape* self__pod, PxHeightFieldGeometry* geometry_pod);
		[LinkName("PxShape_getActor")] public static extern PxRigidActor* Shape_getActor(PxShape* self__pod);
		[LinkName("PxShape_setLocalPose_mut")] public static extern void Shape_setLocalPose_mut(PxShape* self__pod, PxTransform* pose_pod);
		[LinkName("PxShape_getLocalPose")] public static extern PxTransform Shape_getLocalPose(PxShape* self__pod);
		[LinkName("PxShape_setSimulationFilterData_mut")] public static extern void Shape_setSimulationFilterData_mut(PxShape* self__pod, PxFilterData* data_pod);
		[LinkName("PxShape_getSimulationFilterData")] public static extern PxFilterData Shape_getSimulationFilterData(PxShape* self__pod);
		[LinkName("PxShape_setQueryFilterData_mut")] public static extern void Shape_setQueryFilterData_mut(PxShape* self__pod, PxFilterData* data_pod);
		[LinkName("PxShape_getQueryFilterData")] public static extern PxFilterData Shape_getQueryFilterData(PxShape* self__pod);
		[LinkName("PxShape_setMaterials_mut")] public static extern void Shape_setMaterials_mut(PxShape* self__pod, PxMaterial** materials_pod, uint16 materialCount);
		[LinkName("PxShape_getNbMaterials")] public static extern uint16 Shape_getNbMaterials(PxShape* self__pod);
		[LinkName("PxShape_getMaterials")] public static extern uint32 Shape_getMaterials(PxShape* self__pod, PxMaterial** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxShape_getMaterialFromInternalFaceIndex")] public static extern PxMaterial* Shape_getMaterialFromInternalFaceIndex(PxShape* self__pod, uint32 faceIndex);
		[LinkName("PxShape_setContactOffset_mut")] public static extern void Shape_setContactOffset_mut(PxShape* self__pod, float contactOffset);
		[LinkName("PxShape_getContactOffset")] public static extern float Shape_getContactOffset(PxShape* self__pod);
		[LinkName("PxShape_setRestOffset_mut")] public static extern void Shape_setRestOffset_mut(PxShape* self__pod, float restOffset);
		[LinkName("PxShape_getRestOffset")] public static extern float Shape_getRestOffset(PxShape* self__pod);
		[LinkName("PxShape_setTorsionalPatchRadius_mut")] public static extern void Shape_setTorsionalPatchRadius_mut(PxShape* self__pod, float radius);
		[LinkName("PxShape_getTorsionalPatchRadius")] public static extern float Shape_getTorsionalPatchRadius(PxShape* self__pod);
		[LinkName("PxShape_setMinTorsionalPatchRadius_mut")] public static extern void Shape_setMinTorsionalPatchRadius_mut(PxShape* self__pod, float radius);
		[LinkName("PxShape_getMinTorsionalPatchRadius")] public static extern float Shape_getMinTorsionalPatchRadius(PxShape* self__pod);
		[LinkName("PxShape_setFlag_mut")] public static extern void Shape_setFlag_mut(PxShape* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxShape_setFlags_mut")] public static extern void Shape_setFlags_mut(PxShape* self__pod, PxShapeFlags inFlags_pod);
		[LinkName("PxShape_getFlags")] public static extern PxShapeFlags Shape_getFlags(PxShape* self__pod);
		[LinkName("PxShape_isExclusive")] public static extern bool Shape_isExclusive(PxShape* self__pod);
		[LinkName("PxShape_setName_mut")] public static extern void Shape_setName_mut(PxShape* self__pod, char8* name);
		[LinkName("PxShape_getName")] public static extern char8* Shape_getName(PxShape* self__pod);
		[LinkName("PxShape_getConcreteTypeName")] public static extern char8* Shape_getConcreteTypeName(PxShape* self__pod);
		[LinkName("PxRigidActor_release_mut")] public static extern void RigidActor_release_mut(PxRigidActor* self__pod);
		[LinkName("PxRigidActor_getGlobalPose")] public static extern PxTransform RigidActor_getGlobalPose(PxRigidActor* self__pod);
		[LinkName("PxRigidActor_setGlobalPose_mut")] public static extern void RigidActor_setGlobalPose_mut(PxRigidActor* self__pod, PxTransform* pose_pod, bool autowake);
		[LinkName("PxRigidActor_attachShape_mut")] public static extern bool RigidActor_attachShape_mut(PxRigidActor* self__pod, PxShape* shape_pod);
		[LinkName("PxRigidActor_detachShape_mut")] public static extern void RigidActor_detachShape_mut(PxRigidActor* self__pod, PxShape* shape_pod, bool wakeOnLostTouch);
		[LinkName("PxRigidActor_getNbShapes")] public static extern uint32 RigidActor_getNbShapes(PxRigidActor* self__pod);
		[LinkName("PxRigidActor_getShapes")] public static extern uint32 RigidActor_getShapes(PxRigidActor* self__pod, PxShape** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxRigidActor_getNbConstraints")] public static extern uint32 RigidActor_getNbConstraints(PxRigidActor* self__pod);
		[LinkName("PxRigidActor_getConstraints")] public static extern uint32 RigidActor_getConstraints(PxRigidActor* self__pod, PxConstraint** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxRigidBody_setCMassLocalPose_mut")] public static extern void RigidBody_setCMassLocalPose_mut(PxRigidBody* self__pod, PxTransform* pose_pod);
		[LinkName("PxRigidBody_getCMassLocalPose")] public static extern PxTransform RigidBody_getCMassLocalPose(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMass_mut")] public static extern void RigidBody_setMass_mut(PxRigidBody* self__pod, float mass);
		[LinkName("PxRigidBody_getMass")] public static extern float RigidBody_getMass(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_getInvMass")] public static extern float RigidBody_getInvMass(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMassSpaceInertiaTensor_mut")] public static extern void RigidBody_setMassSpaceInertiaTensor_mut(PxRigidBody* self__pod, PxVec3* m_pod);
		[LinkName("PxRigidBody_getMassSpaceInertiaTensor")] public static extern PxVec3 RigidBody_getMassSpaceInertiaTensor(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_getMassSpaceInvInertiaTensor")] public static extern PxVec3 RigidBody_getMassSpaceInvInertiaTensor(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setLinearDamping_mut")] public static extern void RigidBody_setLinearDamping_mut(PxRigidBody* self__pod, float linDamp);
		[LinkName("PxRigidBody_getLinearDamping")] public static extern float RigidBody_getLinearDamping(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setAngularDamping_mut")] public static extern void RigidBody_setAngularDamping_mut(PxRigidBody* self__pod, float angDamp);
		[LinkName("PxRigidBody_getAngularDamping")] public static extern float RigidBody_getAngularDamping(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_getLinearVelocity")] public static extern PxVec3 RigidBody_getLinearVelocity(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setLinearVelocity_mut")] public static extern void RigidBody_setLinearVelocity_mut(PxRigidBody* self__pod, PxVec3* linVel_pod, bool autowake);
		[LinkName("PxRigidBody_getAngularVelocity")] public static extern PxVec3 RigidBody_getAngularVelocity(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setAngularVelocity_mut")] public static extern void RigidBody_setAngularVelocity_mut(PxRigidBody* self__pod, PxVec3* angVel_pod, bool autowake);
		[LinkName("PxRigidBody_setMaxAngularVelocity_mut")] public static extern void RigidBody_setMaxAngularVelocity_mut(PxRigidBody* self__pod, float maxAngVel);
		[LinkName("PxRigidBody_getMaxAngularVelocity")] public static extern float RigidBody_getMaxAngularVelocity(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMaxLinearVelocity_mut")] public static extern void RigidBody_setMaxLinearVelocity_mut(PxRigidBody* self__pod, float maxLinVel);
		[LinkName("PxRigidBody_getMaxLinearVelocity")] public static extern float RigidBody_getMaxLinearVelocity(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_addForce_mut")] public static extern void RigidBody_addForce_mut(PxRigidBody* self__pod, PxVec3* force_pod, uint32 mode_pod, bool autowake);
		[LinkName("PxRigidBody_addTorque_mut")] public static extern void RigidBody_addTorque_mut(PxRigidBody* self__pod, PxVec3* torque_pod, uint32 mode_pod, bool autowake);
		[LinkName("PxRigidBody_clearForce_mut")] public static extern void RigidBody_clearForce_mut(PxRigidBody* self__pod, uint32 mode_pod);
		[LinkName("PxRigidBody_clearTorque_mut")] public static extern void RigidBody_clearTorque_mut(PxRigidBody* self__pod, uint32 mode_pod);
		[LinkName("PxRigidBody_setForceAndTorque_mut")] public static extern void RigidBody_setForceAndTorque_mut(PxRigidBody* self__pod, PxVec3* force_pod, PxVec3* torque_pod, uint32 mode_pod);
		[LinkName("PxRigidBody_setRigidBodyFlag_mut")] public static extern void RigidBody_setRigidBodyFlag_mut(PxRigidBody* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxRigidBody_setRigidBodyFlags_mut")] public static extern void RigidBody_setRigidBodyFlags_mut(PxRigidBody* self__pod, PxRigidBodyFlags inFlags_pod);
		[LinkName("PxRigidBody_getRigidBodyFlags")] public static extern PxRigidBodyFlags RigidBody_getRigidBodyFlags(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMinCCDAdvanceCoefficient_mut")] public static extern void RigidBody_setMinCCDAdvanceCoefficient_mut(PxRigidBody* self__pod, float advanceCoefficient);
		[LinkName("PxRigidBody_getMinCCDAdvanceCoefficient")] public static extern float RigidBody_getMinCCDAdvanceCoefficient(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMaxDepenetrationVelocity_mut")] public static extern void RigidBody_setMaxDepenetrationVelocity_mut(PxRigidBody* self__pod, float biasClamp);
		[LinkName("PxRigidBody_getMaxDepenetrationVelocity")] public static extern float RigidBody_getMaxDepenetrationVelocity(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_setMaxContactImpulse_mut")] public static extern void RigidBody_setMaxContactImpulse_mut(PxRigidBody* self__pod, float maxImpulse);
		[LinkName("PxRigidBody_getMaxContactImpulse")] public static extern float RigidBody_getMaxContactImpulse(PxRigidBody* self__pod);
		[LinkName("PxRigidBody_getInternalIslandNodeIndex")] public static extern uint32 RigidBody_getInternalIslandNodeIndex(PxRigidBody* self__pod);
		[LinkName("PxArticulationLink_release_mut")] public static extern void ArticulationLink_release_mut(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getArticulation")] public static extern PxArticulationBase* ArticulationLink_getArticulation(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getInboundJoint")] public static extern PxArticulationJointBase* ArticulationLink_getInboundJoint(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getInboundJointDof")] public static extern uint32 ArticulationLink_getInboundJointDof(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getNbChildren")] public static extern uint32 ArticulationLink_getNbChildren(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getLinkIndex")] public static extern uint32 ArticulationLink_getLinkIndex(PxArticulationLink* self__pod);
		[LinkName("PxArticulationLink_getChildren")] public static extern uint32 ArticulationLink_getChildren(PxArticulationLink* self__pod, PxArticulationLink** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxArticulationLink_getConcreteTypeName")] public static extern char8* ArticulationLink_getConcreteTypeName(PxArticulationLink* self__pod);
		[LinkName("PxFilterData_new")] public static extern PxFilterData FilterData_new(uint32 anonymous_arg0_pod);
		[LinkName("PxFilterData_new_1")] public static extern PxFilterData FilterData_new_1();
		[LinkName("PxFilterData_new_2")] public static extern PxFilterData FilterData_new_2(uint32 w0, uint32 w1, uint32 w2, uint32 w3);
		[LinkName("PxFilterData_setToDefault_mut")] public static extern void FilterData_setToDefault_mut(PxFilterData* self__pod);
		[LinkName("phys_PxGetFilterObjectType")] public static extern uint32 GetFilterObjectType(uint32 attr);
		[LinkName("phys_PxFilterObjectIsKinematic")] public static extern bool FilterObjectIsKinematic(uint32 attr);
		[LinkName("phys_PxFilterObjectIsTrigger")] public static extern bool FilterObjectIsTrigger(uint32 attr);
		[LinkName("PxSimulationFilterCallback_pairFound_mut")] public static extern PxFilterFlags SimulationFilterCallback_pairFound_mut(PxSimulationFilterCallback* self__pod, uint32 pairID, uint32 attributes0, PxFilterData filterData0_pod, PxActor* a0_pod, PxShape* s0_pod, uint32 attributes1, PxFilterData filterData1_pod, PxActor* a1_pod, PxShape* s1_pod, PxPairFlags* pairFlags_pod);
		[LinkName("PxSimulationFilterCallback_pairLost_mut")] public static extern void SimulationFilterCallback_pairLost_mut(PxSimulationFilterCallback* self__pod, uint32 pairID, uint32 attributes0, PxFilterData filterData0_pod, uint32 attributes1, PxFilterData filterData1_pod, bool objectRemoved);
		[LinkName("PxSimulationFilterCallback_statusChange_mut")] public static extern bool SimulationFilterCallback_statusChange_mut(PxSimulationFilterCallback* self__pod, uint32* pairID_pod, PxPairFlags* pairFlags_pod, PxFilterFlags* filterFlags_pod);
		[LinkName("PxQueryFilterData_new")] public static extern PxQueryFilterData QueryFilterData_new();
		[LinkName("PxQueryFilterData_new_1")] public static extern PxQueryFilterData QueryFilterData_new_1(PxFilterData* fd_pod, PxQueryFlags f_pod);
		[LinkName("PxQueryFilterData_new_2")] public static extern PxQueryFilterData QueryFilterData_new_2(PxQueryFlags f_pod);
		[LinkName("PxQueryFilterCallback_preFilter_mut")] public static extern uint32 QueryFilterCallback_preFilter_mut(PxQueryFilterCallback* self__pod, PxFilterData* filterData_pod, PxShape* shape_pod, PxRigidActor* actor_pod, PxHitFlags* queryFlags_pod);
		[LinkName("PxQueryFilterCallback_postFilter_mut")] public static extern uint32 QueryFilterCallback_postFilter_mut(PxQueryFilterCallback* self__pod, PxFilterData* filterData_pod, PxQueryHit* hit_pod);
		[LinkName("PxQueryFilterCallback_delete")] public static extern void QueryFilterCallback_delete(PxQueryFilterCallback* self__pod);
		[LinkName("PxBatchQueryMemory_getMaxRaycastsPerExecute")] public static extern uint32 BatchQueryMemory_getMaxRaycastsPerExecute(PxBatchQueryMemory* self__pod);
		[LinkName("PxBatchQueryMemory_getMaxSweepsPerExecute")] public static extern uint32 BatchQueryMemory_getMaxSweepsPerExecute(PxBatchQueryMemory* self__pod);
		[LinkName("PxBatchQueryMemory_getMaxOverlapsPerExecute")] public static extern uint32 BatchQueryMemory_getMaxOverlapsPerExecute(PxBatchQueryMemory* self__pod);
		[LinkName("PxBatchQueryMemory_new")] public static extern PxBatchQueryMemory BatchQueryMemory_new(uint32 raycastResultBufferSize_, uint32 sweepResultBufferSize_, uint32 overlapResultBufferSize_);
		[LinkName("PxBatchQueryDesc_new")] public static extern PxBatchQueryDesc BatchQueryDesc_new(uint32 maxRaycastsPerExecute, uint32 maxSweepsPerExecute, uint32 maxOverlapsPerExecute);
		[LinkName("PxBatchQueryDesc_isValid")] public static extern bool BatchQueryDesc_isValid(PxBatchQueryDesc* self__pod);
		[LinkName("PxBatchQueryDesc_new_1")] public static extern PxBatchQueryDesc BatchQueryDesc_new_1(uint32 maxRaycastsPerExecute, uint32 maxSweepsPerExecute, uint32 maxOverlapsPerExecute);
		[LinkName("PxBatchQueryDesc_isValid_1")] public static extern bool BatchQueryDesc_isValid_1(PxBatchQueryDesc* self__pod);
		[LinkName("PxBatchQuery_execute_mut")] public static extern void BatchQuery_execute_mut(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_getPreFilterShader")] public static extern void* BatchQuery_getPreFilterShader(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_getPostFilterShader")] public static extern void* BatchQuery_getPostFilterShader(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_getFilterShaderData")] public static extern void* BatchQuery_getFilterShaderData(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_getFilterShaderDataSize")] public static extern uint32 BatchQuery_getFilterShaderDataSize(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_setUserMemory_mut")] public static extern void BatchQuery_setUserMemory_mut(PxBatchQuery* self__pod, PxBatchQueryMemory* anonymous_arg0_pod);
		[LinkName("PxBatchQuery_getUserMemory_mut")] public static extern PxBatchQueryMemory* BatchQuery_getUserMemory_mut(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_release_mut")] public static extern void BatchQuery_release_mut(PxBatchQuery* self__pod);
		[LinkName("PxBatchQuery_raycast_mut")] public static extern void BatchQuery_raycast_mut(PxBatchQuery* self__pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float distance, uint16 maxTouchHits, PxHitFlags hitFlags_pod, PxQueryFilterData* filterData_pod, void* userData, PxQueryCache* cache_pod);
		[LinkName("PxBatchQuery_overlap_mut")] public static extern void BatchQuery_overlap_mut(PxBatchQuery* self__pod, PxGeometry* geometry_pod, PxTransform* pose_pod, uint16 maxTouchHits, PxQueryFilterData* filterData_pod, void* userData, PxQueryCache* cache_pod);
		[LinkName("PxBatchQuery_sweep_mut")] public static extern void BatchQuery_sweep_mut(PxBatchQuery* self__pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxVec3* unitDir_pod, float distance, uint16 maxTouchHits, PxHitFlags hitFlags_pod, PxQueryFilterData* filterData_pod, void* userData, PxQueryCache* cache_pod, float inflation);
		[LinkName("PxConstraint_release_mut")] public static extern void Constraint_release_mut(PxConstraint* self__pod);
		[LinkName("PxConstraint_getScene")] public static extern PxScene* Constraint_getScene(PxConstraint* self__pod);
		[LinkName("PxConstraint_getActors")] public static extern void Constraint_getActors(PxConstraint* self__pod, PxRigidActor** actor0_pod, PxRigidActor** actor1_pod);
		[LinkName("PxConstraint_setActors_mut")] public static extern void Constraint_setActors_mut(PxConstraint* self__pod, PxRigidActor* actor0_pod, PxRigidActor* actor1_pod);
		[LinkName("PxConstraint_markDirty_mut")] public static extern void Constraint_markDirty_mut(PxConstraint* self__pod);
		[LinkName("PxConstraint_setFlags_mut")] public static extern void Constraint_setFlags_mut(PxConstraint* self__pod, PxConstraintFlags flags_pod);
		[LinkName("PxConstraint_getFlags")] public static extern PxConstraintFlags Constraint_getFlags(PxConstraint* self__pod);
		[LinkName("PxConstraint_setFlag_mut")] public static extern void Constraint_setFlag_mut(PxConstraint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxConstraint_getForce")] public static extern void Constraint_getForce(PxConstraint* self__pod, PxVec3* linear_pod, PxVec3* angular_pod);
		[LinkName("PxConstraint_isValid")] public static extern bool Constraint_isValid(PxConstraint* self__pod);
		[LinkName("PxConstraint_setBreakForce_mut")] public static extern void Constraint_setBreakForce_mut(PxConstraint* self__pod, float linear, float angular);
		[LinkName("PxConstraint_getBreakForce")] public static extern void Constraint_getBreakForce(PxConstraint* self__pod, float* linear_pod, float* angular_pod);
		[LinkName("PxConstraint_setMinResponseThreshold_mut")] public static extern void Constraint_setMinResponseThreshold_mut(PxConstraint* self__pod, float threshold);
		[LinkName("PxConstraint_getMinResponseThreshold")] public static extern float Constraint_getMinResponseThreshold(PxConstraint* self__pod);
		[LinkName("PxConstraint_getExternalReference_mut")] public static extern void* Constraint_getExternalReference_mut(PxConstraint* self__pod, uint32* typeID_pod);
		[LinkName("PxConstraint_setConstraintFunctions_mut")] public static extern void Constraint_setConstraintFunctions_mut(PxConstraint* self__pod, PxConstraintConnector* connector_pod, PxConstraintShaderTable* shaders_pod);
		[LinkName("PxConstraint_getConcreteTypeName")] public static extern char8* Constraint_getConcreteTypeName(PxConstraint* self__pod);
		[LinkName("PxContactStreamIterator_new")] public static extern PxContactStreamIterator ContactStreamIterator_new(uint8* contactPatches, uint8* contactPoints, uint32* contactFaceIndices, uint32 nbPatches, uint32 nbContacts);
		[LinkName("PxContactStreamIterator_hasNextPatch")] public static extern bool ContactStreamIterator_hasNextPatch(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getTotalContactCount")] public static extern uint32 ContactStreamIterator_getTotalContactCount(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getTotalPatchCount")] public static extern uint32 ContactStreamIterator_getTotalPatchCount(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_nextPatch_mut")] public static extern void ContactStreamIterator_nextPatch_mut(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_hasNextContact")] public static extern bool ContactStreamIterator_hasNextContact(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_nextContact_mut")] public static extern void ContactStreamIterator_nextContact_mut(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getContactNormal")] public static extern PxVec3* ContactStreamIterator_getContactNormal(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getInvMassScale0")] public static extern float ContactStreamIterator_getInvMassScale0(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getInvMassScale1")] public static extern float ContactStreamIterator_getInvMassScale1(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getInvInertiaScale0")] public static extern float ContactStreamIterator_getInvInertiaScale0(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getInvInertiaScale1")] public static extern float ContactStreamIterator_getInvInertiaScale1(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getMaxImpulse")] public static extern float ContactStreamIterator_getMaxImpulse(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getTargetVel")] public static extern PxVec3* ContactStreamIterator_getTargetVel(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getContactPoint")] public static extern PxVec3* ContactStreamIterator_getContactPoint(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getSeparation")] public static extern float ContactStreamIterator_getSeparation(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getFaceIndex0")] public static extern uint32 ContactStreamIterator_getFaceIndex0(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getFaceIndex1")] public static extern uint32 ContactStreamIterator_getFaceIndex1(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getStaticFriction")] public static extern float ContactStreamIterator_getStaticFriction(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getDynamicFriction")] public static extern float ContactStreamIterator_getDynamicFriction(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getRestitution")] public static extern float ContactStreamIterator_getRestitution(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getMaterialFlags")] public static extern uint32 ContactStreamIterator_getMaterialFlags(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getMaterialIndex0")] public static extern uint16 ContactStreamIterator_getMaterialIndex0(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_getMaterialIndex1")] public static extern uint16 ContactStreamIterator_getMaterialIndex1(PxContactStreamIterator* self__pod);
		[LinkName("PxContactStreamIterator_advanceToIndex_mut")] public static extern bool ContactStreamIterator_advanceToIndex_mut(PxContactStreamIterator* self__pod, uint32 initialIndex);
		[LinkName("PxContactSet_getPoint")] public static extern PxVec3* ContactSet_getPoint(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setPoint_mut")] public static extern void ContactSet_setPoint_mut(PxContactSet* self__pod, uint32 i, PxVec3* p_pod);
		[LinkName("PxContactSet_getNormal")] public static extern PxVec3* ContactSet_getNormal(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setNormal_mut")] public static extern void ContactSet_setNormal_mut(PxContactSet* self__pod, uint32 i, PxVec3* n_pod);
		[LinkName("PxContactSet_getSeparation")] public static extern float ContactSet_getSeparation(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setSeparation_mut")] public static extern void ContactSet_setSeparation_mut(PxContactSet* self__pod, uint32 i, float s);
		[LinkName("PxContactSet_getTargetVelocity")] public static extern PxVec3* ContactSet_getTargetVelocity(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setTargetVelocity_mut")] public static extern void ContactSet_setTargetVelocity_mut(PxContactSet* self__pod, uint32 i, PxVec3* v_pod);
		[LinkName("PxContactSet_getInternalFaceIndex0_mut")] public static extern uint32 ContactSet_getInternalFaceIndex0_mut(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_getInternalFaceIndex1_mut")] public static extern uint32 ContactSet_getInternalFaceIndex1_mut(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_getMaxImpulse")] public static extern float ContactSet_getMaxImpulse(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setMaxImpulse_mut")] public static extern void ContactSet_setMaxImpulse_mut(PxContactSet* self__pod, uint32 i, float s);
		[LinkName("PxContactSet_getRestitution")] public static extern float ContactSet_getRestitution(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setRestitution_mut")] public static extern void ContactSet_setRestitution_mut(PxContactSet* self__pod, uint32 i, float r);
		[LinkName("PxContactSet_getStaticFriction")] public static extern float ContactSet_getStaticFriction(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setStaticFriction_mut")] public static extern void ContactSet_setStaticFriction_mut(PxContactSet* self__pod, uint32 i, float f);
		[LinkName("PxContactSet_getDynamicFriction")] public static extern float ContactSet_getDynamicFriction(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_setDynamicFriction_mut")] public static extern void ContactSet_setDynamicFriction_mut(PxContactSet* self__pod, uint32 i, float f);
		[LinkName("PxContactSet_ignore_mut")] public static extern void ContactSet_ignore_mut(PxContactSet* self__pod, uint32 i);
		[LinkName("PxContactSet_size")] public static extern uint32 ContactSet_size(PxContactSet* self__pod);
		[LinkName("PxContactSet_getInvMassScale0")] public static extern float ContactSet_getInvMassScale0(PxContactSet* self__pod);
		[LinkName("PxContactSet_getInvMassScale1")] public static extern float ContactSet_getInvMassScale1(PxContactSet* self__pod);
		[LinkName("PxContactSet_getInvInertiaScale0")] public static extern float ContactSet_getInvInertiaScale0(PxContactSet* self__pod);
		[LinkName("PxContactSet_getInvInertiaScale1")] public static extern float ContactSet_getInvInertiaScale1(PxContactSet* self__pod);
		[LinkName("PxContactSet_setInvMassScale0_mut")] public static extern void ContactSet_setInvMassScale0_mut(PxContactSet* self__pod, float scale);
		[LinkName("PxContactSet_setInvMassScale1_mut")] public static extern void ContactSet_setInvMassScale1_mut(PxContactSet* self__pod, float scale);
		[LinkName("PxContactSet_setInvInertiaScale0_mut")] public static extern void ContactSet_setInvInertiaScale0_mut(PxContactSet* self__pod, float scale);
		[LinkName("PxContactSet_setInvInertiaScale1_mut")] public static extern void ContactSet_setInvInertiaScale1_mut(PxContactSet* self__pod, float scale);
		[LinkName("PxContactModifyCallback_onContactModify_mut")] public static extern void ContactModifyCallback_onContactModify_mut(PxContactModifyCallback* self__pod, PxContactModifyPair* pairs_pod, uint32 count);
		[LinkName("PxCCDContactModifyCallback_onCCDContactModify_mut")] public static extern void CCDContactModifyCallback_onCCDContactModify_mut(PxCCDContactModifyCallback* self__pod, PxContactModifyPair* pairs_pod, uint32 count);
		[LinkName("PxDeletionListener_onRelease_mut")] public static extern void DeletionListener_onRelease_mut(PxDeletionListener* self__pod, PxBase* observed_pod, void* userData, uint32 deletionEvent_pod);
		[LinkName("PxLockedData_getDataAccessFlags_mut")] public static extern PxDataAccessFlags LockedData_getDataAccessFlags_mut(PxLockedData* self__pod);
		[LinkName("PxLockedData_unlock_mut")] public static extern void LockedData_unlock_mut(PxLockedData* self__pod);
		[LinkName("PxLockedData_delete")] public static extern void LockedData_delete(PxLockedData* self__pod);
		[LinkName("PxMaterial_release_mut")] public static extern void Material_release_mut(PxMaterial* self__pod);
		[LinkName("PxMaterial_getReferenceCount")] public static extern uint32 Material_getReferenceCount(PxMaterial* self__pod);
		[LinkName("PxMaterial_acquireReference_mut")] public static extern void Material_acquireReference_mut(PxMaterial* self__pod);
		[LinkName("PxMaterial_setDynamicFriction_mut")] public static extern void Material_setDynamicFriction_mut(PxMaterial* self__pod, float coef);
		[LinkName("PxMaterial_getDynamicFriction")] public static extern float Material_getDynamicFriction(PxMaterial* self__pod);
		[LinkName("PxMaterial_setStaticFriction_mut")] public static extern void Material_setStaticFriction_mut(PxMaterial* self__pod, float coef);
		[LinkName("PxMaterial_getStaticFriction")] public static extern float Material_getStaticFriction(PxMaterial* self__pod);
		[LinkName("PxMaterial_setRestitution_mut")] public static extern void Material_setRestitution_mut(PxMaterial* self__pod, float rest);
		[LinkName("PxMaterial_getRestitution")] public static extern float Material_getRestitution(PxMaterial* self__pod);
		[LinkName("PxMaterial_setFlag_mut")] public static extern void Material_setFlag_mut(PxMaterial* self__pod, uint32 flag_pod, bool anonymous_arg1);
		[LinkName("PxMaterial_setFlags_mut")] public static extern void Material_setFlags_mut(PxMaterial* self__pod, PxMaterialFlags inFlags_pod);
		[LinkName("PxMaterial_getFlags")] public static extern PxMaterialFlags Material_getFlags(PxMaterial* self__pod);
		[LinkName("PxMaterial_setFrictionCombineMode_mut")] public static extern void Material_setFrictionCombineMode_mut(PxMaterial* self__pod, uint32 combMode_pod);
		[LinkName("PxMaterial_getFrictionCombineMode")] public static extern uint32 Material_getFrictionCombineMode(PxMaterial* self__pod);
		[LinkName("PxMaterial_setRestitutionCombineMode_mut")] public static extern void Material_setRestitutionCombineMode_mut(PxMaterial* self__pod, uint32 combMode_pod);
		[LinkName("PxMaterial_getRestitutionCombineMode")] public static extern uint32 Material_getRestitutionCombineMode(PxMaterial* self__pod);
		[LinkName("PxMaterial_getConcreteTypeName")] public static extern char8* Material_getConcreteTypeName(PxMaterial* self__pod);
		[LinkName("PxPhysics_release_mut")] public static extern void Physics_release_mut(PxPhysics* self__pod);
		[LinkName("PxPhysics_getFoundation_mut")] public static extern PxFoundation* Physics_getFoundation_mut(PxPhysics* self__pod);
		[LinkName("PxPhysics_createAggregate_mut")] public static extern PxAggregate* Physics_createAggregate_mut(PxPhysics* self__pod, uint32 maxSize, bool enableSelfCollision);
		[LinkName("PxPhysics_getTolerancesScale")] public static extern PxTolerancesScale* Physics_getTolerancesScale(PxPhysics* self__pod);
		[LinkName("PxPhysics_createTriangleMesh_mut")] public static extern PxTriangleMesh* Physics_createTriangleMesh_mut(PxPhysics* self__pod, PxInputStream* stream_pod);
		[LinkName("PxPhysics_getNbTriangleMeshes")] public static extern uint32 Physics_getNbTriangleMeshes(PxPhysics* self__pod);
		[LinkName("PxPhysics_getTriangleMeshes")] public static extern uint32 Physics_getTriangleMeshes(PxPhysics* self__pod, PxTriangleMesh** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createHeightField_mut")] public static extern PxHeightField* Physics_createHeightField_mut(PxPhysics* self__pod, PxInputStream* stream_pod);
		[LinkName("PxPhysics_getNbHeightFields")] public static extern uint32 Physics_getNbHeightFields(PxPhysics* self__pod);
		[LinkName("PxPhysics_getHeightFields")] public static extern uint32 Physics_getHeightFields(PxPhysics* self__pod, PxHeightField** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createConvexMesh_mut")] public static extern PxConvexMesh* Physics_createConvexMesh_mut(PxPhysics* self__pod, PxInputStream* stream_pod);
		[LinkName("PxPhysics_getNbConvexMeshes")] public static extern uint32 Physics_getNbConvexMeshes(PxPhysics* self__pod);
		[LinkName("PxPhysics_getConvexMeshes")] public static extern uint32 Physics_getConvexMeshes(PxPhysics* self__pod, PxConvexMesh** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createBVHStructure_mut")] public static extern PxBVHStructure* Physics_createBVHStructure_mut(PxPhysics* self__pod, PxInputStream* stream_pod);
		[LinkName("PxPhysics_getNbBVHStructures")] public static extern uint32 Physics_getNbBVHStructures(PxPhysics* self__pod);
		[LinkName("PxPhysics_getBVHStructures")] public static extern uint32 Physics_getBVHStructures(PxPhysics* self__pod, PxBVHStructure** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createScene_mut")] public static extern PxScene* Physics_createScene_mut(PxPhysics* self__pod, PxSceneDesc* sceneDesc_pod);
		[LinkName("PxPhysics_getNbScenes")] public static extern uint32 Physics_getNbScenes(PxPhysics* self__pod);
		[LinkName("PxPhysics_getScenes")] public static extern uint32 Physics_getScenes(PxPhysics* self__pod, PxScene** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createRigidStatic_mut")] public static extern PxRigidStatic* Physics_createRigidStatic_mut(PxPhysics* self__pod, PxTransform* pose_pod);
		[LinkName("PxPhysics_createRigidDynamic_mut")] public static extern PxRigidDynamic* Physics_createRigidDynamic_mut(PxPhysics* self__pod, PxTransform* pose_pod);
		[LinkName("PxPhysics_createPruningStructure_mut")] public static extern PxPruningStructure* Physics_createPruningStructure_mut(PxPhysics* self__pod, PxRigidActor** actors_pod, uint32 nbActors);
		[LinkName("PxPhysics_createShape_mut")] public static extern PxShape* Physics_createShape_mut(PxPhysics* self__pod, PxGeometry* geometry_pod, PxMaterial* material_pod, bool isExclusive = false, PxShapeFlags shapeFlags = .eVISUALIZATION | .eSCENE_QUERY_SHAPE | .eSIMULATION_SHAPE);
		[LinkName("PxPhysics_createShape_mut_1")] public static extern PxShape* Physics_createShape_mut_1(PxPhysics* self__pod, PxGeometry* geometry_pod, PxMaterial** materials_pod, uint16 materialCount, bool isExclusive = false, PxShapeFlags shapeFlags = .eVISUALIZATION | .eSCENE_QUERY_SHAPE | .eSIMULATION_SHAPE);
		[LinkName("PxPhysics_getNbShapes")] public static extern uint32 Physics_getNbShapes(PxPhysics* self__pod);
		[LinkName("PxPhysics_getShapes")] public static extern uint32 Physics_getShapes(PxPhysics* self__pod, PxShape** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_createConstraint_mut")] public static extern PxConstraint* Physics_createConstraint_mut(PxPhysics* self__pod, PxRigidActor* actor0_pod, PxRigidActor* actor1_pod, PxConstraintConnector* connector_pod, PxConstraintShaderTable* shaders_pod, uint32 dataSize);
		[LinkName("PxPhysics_createArticulation_mut")] public static extern PxArticulation* Physics_createArticulation_mut(PxPhysics* self__pod);
		[LinkName("PxPhysics_createArticulationReducedCoordinate_mut")] public static extern PxArticulationReducedCoordinate* Physics_createArticulationReducedCoordinate_mut(PxPhysics* self__pod);
		[LinkName("PxPhysics_createMaterial_mut")] public static extern PxMaterial* Physics_createMaterial_mut(PxPhysics* self__pod, float staticFriction, float dynamicFriction, float restitution);
		[LinkName("PxPhysics_getNbMaterials")] public static extern uint32 Physics_getNbMaterials(PxPhysics* self__pod);
		[LinkName("PxPhysics_getMaterials")] public static extern uint32 Physics_getMaterials(PxPhysics* self__pod, PxMaterial** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPhysics_registerDeletionListener_mut")] public static extern void Physics_registerDeletionListener_mut(PxPhysics* self__pod, PxDeletionListener* observer_pod, PxDeletionEventFlags* deletionEvents_pod, bool restrictedObjectSet);
		[LinkName("PxPhysics_unregisterDeletionListener_mut")] public static extern void Physics_unregisterDeletionListener_mut(PxPhysics* self__pod, PxDeletionListener* observer_pod);
		[LinkName("PxPhysics_registerDeletionListenerObjects_mut")] public static extern void Physics_registerDeletionListenerObjects_mut(PxPhysics* self__pod, PxDeletionListener* observer_pod, PxBase** observables_pod, uint32 observableCount);
		[LinkName("PxPhysics_unregisterDeletionListenerObjects_mut")] public static extern void Physics_unregisterDeletionListenerObjects_mut(PxPhysics* self__pod, PxDeletionListener* observer_pod, PxBase** observables_pod, uint32 observableCount);
		[LinkName("PxPhysics_getPhysicsInsertionCallback_mut")] public static extern PxPhysicsInsertionCallback* Physics_getPhysicsInsertionCallback_mut(PxPhysics* self__pod);
		[LinkName("phys_PxRegisterArticulations")] public static extern void RegisterArticulations(PxPhysics* physics_pod);
		[LinkName("phys_PxRegisterArticulationsReducedCoordinate")] public static extern void RegisterArticulationsReducedCoordinate(PxPhysics* physics_pod);
		[LinkName("phys_PxRegisterHeightFields")] public static extern void RegisterHeightFields(PxPhysics* physics_pod);
		[LinkName("phys_PxCreateBasePhysics")] public static extern PxPhysics* CreateBasePhysics(uint32 version, PxFoundation* foundation_pod, PxTolerancesScale* scale_pod, bool trackOutstandingAllocations, PxPvd* pvd_pod);
		[LinkName("phys_PxCreatePhysics")] public static extern PxPhysics* CreatePhysics(uint32 version, PxFoundation* foundation_pod, PxTolerancesScale* scale_pod, bool trackOutstandingAllocations, PxPvd* pvd_pod);
		[LinkName("phys_PxGetPhysics")] public static extern PxPhysics* GetPhysics();
		[LinkName("PxRigidDynamic_setKinematicTarget_mut")] public static extern void RigidDynamic_setKinematicTarget_mut(PxRigidDynamic* self__pod, PxTransform* destination_pod);
		[LinkName("PxRigidDynamic_getKinematicTarget")] public static extern bool RigidDynamic_getKinematicTarget(PxRigidDynamic* self__pod, PxTransform* target_pod);
		[LinkName("PxRigidDynamic_isSleeping")] public static extern bool RigidDynamic_isSleeping(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_setSleepThreshold_mut")] public static extern void RigidDynamic_setSleepThreshold_mut(PxRigidDynamic* self__pod, float threshold);
		[LinkName("PxRigidDynamic_getSleepThreshold")] public static extern float RigidDynamic_getSleepThreshold(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_setStabilizationThreshold_mut")] public static extern void RigidDynamic_setStabilizationThreshold_mut(PxRigidDynamic* self__pod, float threshold);
		[LinkName("PxRigidDynamic_getStabilizationThreshold")] public static extern float RigidDynamic_getStabilizationThreshold(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_getRigidDynamicLockFlags")] public static extern PxRigidDynamicLockFlags RigidDynamic_getRigidDynamicLockFlags(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_setRigidDynamicLockFlag_mut")] public static extern void RigidDynamic_setRigidDynamicLockFlag_mut(PxRigidDynamic* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxRigidDynamic_setRigidDynamicLockFlags_mut")] public static extern void RigidDynamic_setRigidDynamicLockFlags_mut(PxRigidDynamic* self__pod, PxRigidDynamicLockFlags flags_pod);
		[LinkName("PxRigidDynamic_setWakeCounter_mut")] public static extern void RigidDynamic_setWakeCounter_mut(PxRigidDynamic* self__pod, float wakeCounterValue);
		[LinkName("PxRigidDynamic_getWakeCounter")] public static extern float RigidDynamic_getWakeCounter(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_wakeUp_mut")] public static extern void RigidDynamic_wakeUp_mut(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_putToSleep_mut")] public static extern void RigidDynamic_putToSleep_mut(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_setSolverIterationCounts_mut")] public static extern void RigidDynamic_setSolverIterationCounts_mut(PxRigidDynamic* self__pod, uint32 minPositionIters, uint32 minVelocityIters);
		[LinkName("PxRigidDynamic_getSolverIterationCounts")] public static extern void RigidDynamic_getSolverIterationCounts(PxRigidDynamic* self__pod, uint32* minPositionIters_pod, uint32* minVelocityIters_pod);
		[LinkName("PxRigidDynamic_getContactReportThreshold")] public static extern float RigidDynamic_getContactReportThreshold(PxRigidDynamic* self__pod);
		[LinkName("PxRigidDynamic_setContactReportThreshold_mut")] public static extern void RigidDynamic_setContactReportThreshold_mut(PxRigidDynamic* self__pod, float threshold);
		[LinkName("PxRigidDynamic_getConcreteTypeName")] public static extern char8* RigidDynamic_getConcreteTypeName(PxRigidDynamic* self__pod);
		[LinkName("PxRigidStatic_getConcreteTypeName")] public static extern char8* RigidStatic_getConcreteTypeName(PxRigidStatic* self__pod);
		[LinkName("PxBroadPhaseCallback_delete")] public static extern void BroadPhaseCallback_delete(PxBroadPhaseCallback* self__pod);
		[LinkName("PxBroadPhaseCallback_onObjectOutOfBounds_mut")] public static extern void BroadPhaseCallback_onObjectOutOfBounds_mut(PxBroadPhaseCallback* self__pod, PxShape* shape_pod, PxActor* actor_pod);
		[LinkName("PxBroadPhaseCallback_onObjectOutOfBounds_mut_1")] public static extern void BroadPhaseCallback_onObjectOutOfBounds_mut_1(PxBroadPhaseCallback* self__pod, PxAggregate* aggregate_pod);
		[LinkName("PxSceneLimits_new")] public static extern PxSceneLimits SceneLimits_new();
		[LinkName("PxSceneLimits_setToDefault_mut")] public static extern void SceneLimits_setToDefault_mut(PxSceneLimits* self__pod);
		[LinkName("PxSceneLimits_isValid")] public static extern bool SceneLimits_isValid(PxSceneLimits* self__pod);
		[LinkName("PxSceneLimits_new_1")] public static extern PxSceneLimits SceneLimits_new_1();
		[LinkName("PxSceneLimits_setToDefault_mut_1")] public static extern void SceneLimits_setToDefault_mut_1(PxSceneLimits* self__pod);
		[LinkName("PxSceneLimits_isValid_1")] public static extern bool SceneLimits_isValid_1(PxSceneLimits* self__pod);
		[LinkName("PxgDynamicsMemoryConfig_new")] public static extern PxgDynamicsMemoryConfig gDynamicsMemoryConfig_new();
		[LinkName("PxSceneDesc_new")] public static extern PxSceneDesc SceneDesc_new(PxTolerancesScale* scale_pod);
		[LinkName("PxSceneDesc_setToDefault_mut")] public static extern void SceneDesc_setToDefault_mut(PxSceneDesc* self__pod, PxTolerancesScale* scale_pod);
		[LinkName("PxSceneDesc_isValid")] public static extern bool SceneDesc_isValid(PxSceneDesc* self__pod);
		[LinkName("PxSceneDesc_getTolerancesScale")] public static extern PxTolerancesScale* SceneDesc_getTolerancesScale(PxSceneDesc* self__pod);
		[LinkName("PxSceneDesc_new_1")] public static extern PxSceneDesc SceneDesc_new_1(PxTolerancesScale* scale_pod);
		[LinkName("PxSceneDesc_setToDefault_mut_1")] public static extern void SceneDesc_setToDefault_mut_1(PxSceneDesc* self__pod, PxTolerancesScale* scale_pod);
		[LinkName("PxSceneDesc_isValid_1")] public static extern bool SceneDesc_isValid_1(PxSceneDesc* self__pod);
		[LinkName("PxSimulationStatistics_getNbBroadPhaseAdds")] public static extern uint32 SimulationStatistics_getNbBroadPhaseAdds(PxSimulationStatistics* self__pod);
		[LinkName("PxSimulationStatistics_getNbBroadPhaseRemoves")] public static extern uint32 SimulationStatistics_getNbBroadPhaseRemoves(PxSimulationStatistics* self__pod);
		[LinkName("PxSimulationStatistics_getRbPairStats")] public static extern uint32 SimulationStatistics_getRbPairStats(PxSimulationStatistics* self__pod, uint32 pairType_pod, int32 g0_pod, int32 g1_pod);
		[LinkName("PxSimulationStatistics_new")] public static extern PxSimulationStatistics SimulationStatistics_new();
		[LinkName("PxPvdSceneClient_setScenePvdFlag_mut")] public static extern void PvdSceneClient_setScenePvdFlag_mut(PxPvdSceneClient* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxPvdSceneClient_setScenePvdFlags_mut")] public static extern void PvdSceneClient_setScenePvdFlags_mut(PxPvdSceneClient* self__pod, PxPvdSceneFlags flags_pod);
		[LinkName("PxPvdSceneClient_getScenePvdFlags")] public static extern PxPvdSceneFlags PvdSceneClient_getScenePvdFlags(PxPvdSceneClient* self__pod);
		[LinkName("PxPvdSceneClient_updateCamera_mut")] public static extern void PvdSceneClient_updateCamera_mut(PxPvdSceneClient* self__pod, char8* name, PxVec3* origin_pod, PxVec3* up_pod, PxVec3* target_pod);
		[LinkName("PxPvdSceneClient_drawPoints_mut")] public static extern void PvdSceneClient_drawPoints_mut(PxPvdSceneClient* self__pod, pvdsdk_PvdDebugPoint* points_pod, uint32 count);
		[LinkName("PxPvdSceneClient_drawLines_mut")] public static extern void PvdSceneClient_drawLines_mut(PxPvdSceneClient* self__pod, pvdsdk_PvdDebugLine* lines_pod, uint32 count);
		[LinkName("PxPvdSceneClient_drawTriangles_mut")] public static extern void PvdSceneClient_drawTriangles_mut(PxPvdSceneClient* self__pod, pvdsdk_PvdDebugTriangle* triangles_pod, uint32 count);
		[LinkName("PxPvdSceneClient_drawText_mut")] public static extern void PvdSceneClient_drawText_mut(PxPvdSceneClient* self__pod, pvdsdk_PvdDebugText* text_pod);
		[LinkName("PxPvdSceneClient_getClientInternal_mut")] public static extern pvdsdk_PvdClient* PvdSceneClient_getClientInternal_mut(PxPvdSceneClient* self__pod);
		[LinkName("PxDominanceGroupPair_new")] public static extern PxDominanceGroupPair DominanceGroupPair_new(uint8 a, uint8 b);
		[LinkName("PxQueryCache_new")] public static extern PxQueryCache QueryCache_new();
		[LinkName("PxQueryCache_new_1")] public static extern PxQueryCache QueryCache_new_1(PxShape* s_pod, uint32 findex);
		[LinkName("PxScene_release_mut")] public static extern void Scene_release_mut(PxScene* self__pod);
		[LinkName("PxScene_setFlag_mut")] public static extern void Scene_setFlag_mut(PxScene* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxScene_getFlags")] public static extern PxSceneFlags Scene_getFlags(PxScene* self__pod);
		[LinkName("PxScene_setLimits_mut")] public static extern void Scene_setLimits_mut(PxScene* self__pod, PxSceneLimits* limits_pod);
		[LinkName("PxScene_getLimits")] public static extern PxSceneLimits Scene_getLimits(PxScene* self__pod);
		[LinkName("PxScene_getPhysics_mut")] public static extern PxPhysics* Scene_getPhysics_mut(PxScene* self__pod);
		[LinkName("PxScene_getTimestamp")] public static extern uint32 Scene_getTimestamp(PxScene* self__pod);
		[LinkName("PxScene_addArticulation_mut")] public static extern void Scene_addArticulation_mut(PxScene* self__pod, PxArticulationBase* articulation_pod);
		[LinkName("PxScene_removeArticulation_mut")] public static extern void Scene_removeArticulation_mut(PxScene* self__pod, PxArticulationBase* articulation_pod, bool wakeOnLostTouch);
		[LinkName("PxScene_addActor_mut")] public static extern void Scene_addActor_mut(PxScene* self__pod, PxActor* actor_pod, PxBVHStructure* bvhStructure_pod);
		[LinkName("PxScene_addActors_mut")] public static extern void Scene_addActors_mut(PxScene* self__pod, PxActor** actors_pod, uint32 nbActors);
		[LinkName("PxScene_addActors_mut_1")] public static extern void Scene_addActors_mut_1(PxScene* self__pod, PxPruningStructure* pruningStructure_pod);
		[LinkName("PxScene_removeActor_mut")] public static extern void Scene_removeActor_mut(PxScene* self__pod, PxActor* actor_pod, bool wakeOnLostTouch);
		[LinkName("PxScene_removeActors_mut")] public static extern void Scene_removeActors_mut(PxScene* self__pod, PxActor** actors_pod, uint32 nbActors, bool wakeOnLostTouch);
		[LinkName("PxScene_addAggregate_mut")] public static extern void Scene_addAggregate_mut(PxScene* self__pod, PxAggregate* aggregate_pod);
		[LinkName("PxScene_removeAggregate_mut")] public static extern void Scene_removeAggregate_mut(PxScene* self__pod, PxAggregate* aggregate_pod, bool wakeOnLostTouch);
		[LinkName("PxScene_addCollection_mut")] public static extern void Scene_addCollection_mut(PxScene* self__pod, PxCollection* collection_pod);
		[LinkName("PxScene_getNbActors")] public static extern uint32 Scene_getNbActors(PxScene* self__pod, PxActorTypeFlags types_pod);
		[LinkName("PxScene_getActors")] public static extern uint32 Scene_getActors(PxScene* self__pod, PxActorTypeFlags types_pod, PxActor** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxScene_getActiveActors_mut")] public static extern PxActor** Scene_getActiveActors_mut(PxScene* self__pod, uint32* nbActorsOut_pod);
		[LinkName("PxScene_getNbArticulations")] public static extern uint32 Scene_getNbArticulations(PxScene* self__pod);
		[LinkName("PxScene_getArticulations")] public static extern uint32 Scene_getArticulations(PxScene* self__pod, PxArticulationBase** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxScene_getNbConstraints")] public static extern uint32 Scene_getNbConstraints(PxScene* self__pod);
		[LinkName("PxScene_getConstraints")] public static extern uint32 Scene_getConstraints(PxScene* self__pod, PxConstraint** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxScene_getNbAggregates")] public static extern uint32 Scene_getNbAggregates(PxScene* self__pod);
		[LinkName("PxScene_getAggregates")] public static extern uint32 Scene_getAggregates(PxScene* self__pod, PxAggregate** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxScene_setDominanceGroupPair_mut")] public static extern void Scene_setDominanceGroupPair_mut(PxScene* self__pod, uint8 group1, uint8 group2, PxDominanceGroupPair* dominance_pod);
		[LinkName("PxScene_getDominanceGroupPair")] public static extern PxDominanceGroupPair Scene_getDominanceGroupPair(PxScene* self__pod, uint8 group1, uint8 group2);
		[LinkName("PxScene_getCpuDispatcher")] public static extern PxCpuDispatcher* Scene_getCpuDispatcher(PxScene* self__pod);
		[LinkName("PxScene_getCudaContextManager")] public static extern PxCudaContextManager* Scene_getCudaContextManager(PxScene* self__pod);
		[LinkName("PxScene_createClient_mut")] public static extern uint8 Scene_createClient_mut(PxScene* self__pod);
		[LinkName("PxScene_setSimulationEventCallback_mut")] public static extern void Scene_setSimulationEventCallback_mut(PxScene* self__pod, PxSimulationEventCallback* callback_pod);
		[LinkName("PxScene_getSimulationEventCallback")] public static extern PxSimulationEventCallback* Scene_getSimulationEventCallback(PxScene* self__pod);
		[LinkName("PxScene_setContactModifyCallback_mut")] public static extern void Scene_setContactModifyCallback_mut(PxScene* self__pod, PxContactModifyCallback* callback_pod);
		[LinkName("PxScene_setCCDContactModifyCallback_mut")] public static extern void Scene_setCCDContactModifyCallback_mut(PxScene* self__pod, PxCCDContactModifyCallback* callback_pod);
		[LinkName("PxScene_getContactModifyCallback")] public static extern PxContactModifyCallback* Scene_getContactModifyCallback(PxScene* self__pod);
		[LinkName("PxScene_getCCDContactModifyCallback")] public static extern PxCCDContactModifyCallback* Scene_getCCDContactModifyCallback(PxScene* self__pod);
		[LinkName("PxScene_setBroadPhaseCallback_mut")] public static extern void Scene_setBroadPhaseCallback_mut(PxScene* self__pod, PxBroadPhaseCallback* callback_pod);
		[LinkName("PxScene_getBroadPhaseCallback")] public static extern PxBroadPhaseCallback* Scene_getBroadPhaseCallback(PxScene* self__pod);
		[LinkName("PxScene_setFilterShaderData_mut")] public static extern void Scene_setFilterShaderData_mut(PxScene* self__pod, void* data, uint32 dataSize);
		[LinkName("PxScene_getFilterShaderData")] public static extern void* Scene_getFilterShaderData(PxScene* self__pod);
		[LinkName("PxScene_getFilterShaderDataSize")] public static extern uint32 Scene_getFilterShaderDataSize(PxScene* self__pod);
		[LinkName("PxScene_getFilterShader")] public static extern void* Scene_getFilterShader(PxScene* self__pod);
		[LinkName("PxScene_getFilterCallback")] public static extern PxSimulationFilterCallback* Scene_getFilterCallback(PxScene* self__pod);
		[LinkName("PxScene_resetFiltering_mut")] public static extern void Scene_resetFiltering_mut(PxScene* self__pod, PxActor* actor_pod);
		[LinkName("PxScene_resetFiltering_mut_1")] public static extern void Scene_resetFiltering_mut_1(PxScene* self__pod, PxRigidActor* actor_pod, PxShape** shapes_pod, uint32 shapeCount);
		[LinkName("PxScene_getKinematicKinematicFilteringMode")] public static extern uint32 Scene_getKinematicKinematicFilteringMode(PxScene* self__pod);
		[LinkName("PxScene_getStaticKinematicFilteringMode")] public static extern uint32 Scene_getStaticKinematicFilteringMode(PxScene* self__pod);
		[LinkName("PxScene_simulate_mut")] public static extern void Scene_simulate_mut(PxScene* self__pod, float elapsedTime, PxBaseTask* completionTask_pod, void* scratchMemBlock, uint32 scratchMemBlockSize, bool controlSimulation);
		[LinkName("PxScene_advance_mut")] public static extern void Scene_advance_mut(PxScene* self__pod, PxBaseTask* completionTask_pod);
		[LinkName("PxScene_collide_mut")] public static extern void Scene_collide_mut(PxScene* self__pod, float elapsedTime, PxBaseTask* completionTask_pod, void* scratchMemBlock, uint32 scratchMemBlockSize, bool controlSimulation);
		[LinkName("PxScene_checkResults_mut")] public static extern bool Scene_checkResults_mut(PxScene* self__pod, bool block);
		[LinkName("PxScene_fetchCollision_mut")] public static extern bool Scene_fetchCollision_mut(PxScene* self__pod, bool block);
		[LinkName("PxScene_fetchResults_mut")] public static extern bool Scene_fetchResults_mut(PxScene* self__pod, bool block, uint32* errorState);
		[LinkName("PxScene_fetchResultsStart_mut")] public static extern bool Scene_fetchResultsStart_mut(PxScene* self__pod, PxContactPairHeader** contactPairs_pod, uint32* nbContactPairs_pod, bool block);
		[LinkName("PxScene_processCallbacks_mut")] public static extern void Scene_processCallbacks_mut(PxScene* self__pod, PxBaseTask* continuation_pod);
		[LinkName("PxScene_fetchResultsFinish_mut")] public static extern void Scene_fetchResultsFinish_mut(PxScene* self__pod, uint32* errorState);
		[LinkName("PxScene_flushSimulation_mut")] public static extern void Scene_flushSimulation_mut(PxScene* self__pod, bool sendPendingReports);
		[LinkName("PxScene_setGravity_mut")] public static extern void Scene_setGravity_mut(PxScene* self__pod, PxVec3* vec_pod);
		[LinkName("PxScene_getGravity")] public static extern PxVec3 Scene_getGravity(PxScene* self__pod);
		[LinkName("PxScene_setBounceThresholdVelocity_mut")] public static extern void Scene_setBounceThresholdVelocity_mut(PxScene* self__pod, float t);
		[LinkName("PxScene_getBounceThresholdVelocity")] public static extern float Scene_getBounceThresholdVelocity(PxScene* self__pod);
		[LinkName("PxScene_setCCDMaxPasses_mut")] public static extern void Scene_setCCDMaxPasses_mut(PxScene* self__pod, uint32 ccdMaxPasses);
		[LinkName("PxScene_getCCDMaxPasses")] public static extern uint32 Scene_getCCDMaxPasses(PxScene* self__pod);
		[LinkName("PxScene_getFrictionOffsetThreshold")] public static extern float Scene_getFrictionOffsetThreshold(PxScene* self__pod);
		[LinkName("PxScene_setFrictionType_mut")] public static extern void Scene_setFrictionType_mut(PxScene* self__pod, uint32 frictionType_pod);
		[LinkName("PxScene_getFrictionType")] public static extern uint32 Scene_getFrictionType(PxScene* self__pod);
		[LinkName("PxScene_setVisualizationParameter_mut")] public static extern bool Scene_setVisualizationParameter_mut(PxScene* self__pod, uint32 param_pod, float value);
		[LinkName("PxScene_getVisualizationParameter")] public static extern float Scene_getVisualizationParameter(PxScene* self__pod, uint32 paramEnum_pod);
		[LinkName("PxScene_setVisualizationCullingBox_mut")] public static extern void Scene_setVisualizationCullingBox_mut(PxScene* self__pod, PxBounds3* box_pod);
		[LinkName("PxScene_getVisualizationCullingBox")] public static extern PxBounds3 Scene_getVisualizationCullingBox(PxScene* self__pod);
		[LinkName("PxScene_getRenderBuffer_mut")] public static extern PxRenderBuffer* Scene_getRenderBuffer_mut(PxScene* self__pod);
		[LinkName("PxScene_getSimulationStatistics")] public static extern void Scene_getSimulationStatistics(PxScene* self__pod, PxSimulationStatistics* stats_pod);
		[LinkName("PxScene_getStaticStructure")] public static extern uint32 Scene_getStaticStructure(PxScene* self__pod);
		[LinkName("PxScene_getDynamicStructure")] public static extern uint32 Scene_getDynamicStructure(PxScene* self__pod);
		[LinkName("PxScene_flushQueryUpdates_mut")] public static extern void Scene_flushQueryUpdates_mut(PxScene* self__pod);
		[LinkName("PxScene_createBatchQuery_mut")] public static extern PxBatchQuery* Scene_createBatchQuery_mut(PxScene* self__pod, PxBatchQueryDesc* desc_pod);
		[LinkName("PxScene_setDynamicTreeRebuildRateHint_mut")] public static extern void Scene_setDynamicTreeRebuildRateHint_mut(PxScene* self__pod, uint32 dynamicTreeRebuildRateHint);
		[LinkName("PxScene_getDynamicTreeRebuildRateHint")] public static extern uint32 Scene_getDynamicTreeRebuildRateHint(PxScene* self__pod);
		[LinkName("PxScene_forceDynamicTreeRebuild_mut")] public static extern void Scene_forceDynamicTreeRebuild_mut(PxScene* self__pod, bool rebuildStaticStructure, bool rebuildDynamicStructure);
		[LinkName("PxScene_setSceneQueryUpdateMode_mut")] public static extern void Scene_setSceneQueryUpdateMode_mut(PxScene* self__pod, uint32 updateMode_pod);
		[LinkName("PxScene_getSceneQueryUpdateMode")] public static extern uint32 Scene_getSceneQueryUpdateMode(PxScene* self__pod);
		[LinkName("PxScene_sceneQueriesUpdate_mut")] public static extern void Scene_sceneQueriesUpdate_mut(PxScene* self__pod, PxBaseTask* completionTask_pod, bool controlSimulation);
		[LinkName("PxScene_checkQueries_mut")] public static extern bool Scene_checkQueries_mut(PxScene* self__pod, bool block);
		[LinkName("PxScene_fetchQueries_mut")] public static extern bool Scene_fetchQueries_mut(PxScene* self__pod, bool block);
		[LinkName("PxScene_raycast")] public static extern bool Scene_raycast(PxScene* self__pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float distance, PxRaycastCallback* hitCall_pod, PxHitFlags hitFlags_pod, PxQueryFilterData* filterData_pod, PxQueryFilterCallback* filterCall_pod, PxQueryCache* cache_pod);
		[LinkName("PxScene_sweep")] public static extern bool Scene_sweep(PxScene* self__pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxVec3* unitDir_pod, float distance, PxSweepCallback* hitCall_pod, PxHitFlags hitFlags_pod, PxQueryFilterData* filterData_pod, PxQueryFilterCallback* filterCall_pod, PxQueryCache* cache_pod, float inflation);
		[LinkName("PxScene_overlap")] public static extern bool Scene_overlap(PxScene* self__pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxOverlapCallback* hitCall_pod, PxQueryFilterData* filterData_pod, PxQueryFilterCallback* filterCall_pod);
		[LinkName("PxScene_getSceneQueryStaticTimestamp")] public static extern uint32 Scene_getSceneQueryStaticTimestamp(PxScene* self__pod);
		[LinkName("PxScene_getBroadPhaseType")] public static extern uint32 Scene_getBroadPhaseType(PxScene* self__pod);
		[LinkName("PxScene_getBroadPhaseCaps")] public static extern bool Scene_getBroadPhaseCaps(PxScene* self__pod, PxBroadPhaseCaps* caps_pod);
		[LinkName("PxScene_getNbBroadPhaseRegions")] public static extern uint32 Scene_getNbBroadPhaseRegions(PxScene* self__pod);
		[LinkName("PxScene_getBroadPhaseRegions")] public static extern uint32 Scene_getBroadPhaseRegions(PxScene* self__pod, PxBroadPhaseRegionInfo* userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxScene_addBroadPhaseRegion_mut")] public static extern uint32 Scene_addBroadPhaseRegion_mut(PxScene* self__pod, PxBroadPhaseRegion* region_pod, bool populateRegion);
		[LinkName("PxScene_removeBroadPhaseRegion_mut")] public static extern bool Scene_removeBroadPhaseRegion_mut(PxScene* self__pod, uint32 handle);
		[LinkName("PxScene_getTaskManager")] public static extern PxTaskManager* Scene_getTaskManager(PxScene* self__pod);
		[LinkName("PxScene_lockRead_mut")] public static extern void Scene_lockRead_mut(PxScene* self__pod, char8* file, uint32 line);
		[LinkName("PxScene_unlockRead_mut")] public static extern void Scene_unlockRead_mut(PxScene* self__pod);
		[LinkName("PxScene_lockWrite_mut")] public static extern void Scene_lockWrite_mut(PxScene* self__pod, char8* file, uint32 line);
		[LinkName("PxScene_unlockWrite_mut")] public static extern void Scene_unlockWrite_mut(PxScene* self__pod);
		[LinkName("PxScene_setNbContactDataBlocks_mut")] public static extern void Scene_setNbContactDataBlocks_mut(PxScene* self__pod, uint32 numBlocks);
		[LinkName("PxScene_getNbContactDataBlocksUsed")] public static extern uint32 Scene_getNbContactDataBlocksUsed(PxScene* self__pod);
		[LinkName("PxScene_getMaxNbContactDataBlocksUsed")] public static extern uint32 Scene_getMaxNbContactDataBlocksUsed(PxScene* self__pod);
		[LinkName("PxScene_getContactReportStreamBufferSize")] public static extern uint32 Scene_getContactReportStreamBufferSize(PxScene* self__pod);
		[LinkName("PxScene_setSolverBatchSize_mut")] public static extern void Scene_setSolverBatchSize_mut(PxScene* self__pod, uint32 solverBatchSize);
		[LinkName("PxScene_getSolverBatchSize")] public static extern uint32 Scene_getSolverBatchSize(PxScene* self__pod);
		[LinkName("PxScene_setSolverArticulationBatchSize_mut")] public static extern void Scene_setSolverArticulationBatchSize_mut(PxScene* self__pod, uint32 solverBatchSize);
		[LinkName("PxScene_getSolverArticulationBatchSize")] public static extern uint32 Scene_getSolverArticulationBatchSize(PxScene* self__pod);
		[LinkName("PxScene_getWakeCounterResetValue")] public static extern float Scene_getWakeCounterResetValue(PxScene* self__pod);
		[LinkName("PxScene_shiftOrigin_mut")] public static extern void Scene_shiftOrigin_mut(PxScene* self__pod, PxVec3* shift_pod);
		[LinkName("PxScene_getScenePvdClient_mut")] public static extern PxPvdSceneClient* Scene_getScenePvdClient_mut(PxScene* self__pod);
		[LinkName("PxSceneReadLock_new_alloc")] public static extern PxSceneReadLock* SceneReadLock_new_alloc(PxScene* scene_pod, char8* file, uint32 line);
		[LinkName("PxSceneReadLock_delete")] public static extern void SceneReadLock_delete(PxSceneReadLock* self__pod);
		[LinkName("PxSceneWriteLock_new_alloc")] public static extern PxSceneWriteLock* SceneWriteLock_new_alloc(PxScene* scene_pod, char8* file, uint32 line);
		[LinkName("PxSceneWriteLock_delete")] public static extern void SceneWriteLock_delete(PxSceneWriteLock* self__pod);
		[LinkName("PxContactPairExtraDataItem_new")] public static extern PxContactPairExtraDataItem ContactPairExtraDataItem_new();
		[LinkName("PxContactPairVelocity_new")] public static extern PxContactPairVelocity ContactPairVelocity_new();
		[LinkName("PxContactPairPose_new")] public static extern PxContactPairPose ContactPairPose_new();
		[LinkName("PxContactPairIndex_new")] public static extern PxContactPairIndex ContactPairIndex_new();
		[LinkName("PxContactPairExtraDataIterator_new")] public static extern PxContactPairExtraDataIterator ContactPairExtraDataIterator_new(uint8* stream, uint32 size);
		[LinkName("PxContactPairExtraDataIterator_nextItemSet_mut")] public static extern bool ContactPairExtraDataIterator_nextItemSet_mut(PxContactPairExtraDataIterator* self__pod);
		[LinkName("PxContactPairHeader_new")] public static extern PxContactPairHeader ContactPairHeader_new();
		[LinkName("PxContactPair_new")] public static extern PxContactPair ContactPair_new();
		[LinkName("PxContactPair_extractContacts")] public static extern uint32 ContactPair_extractContacts(PxContactPair* self__pod, PxContactPairPoint* userBuffer_pod, uint32 bufferSize);
		[LinkName("PxContactPair_bufferContacts")] public static extern void ContactPair_bufferContacts(PxContactPair* self__pod, PxContactPair* newPair_pod, uint8* bufferMemory);
		[LinkName("PxContactPair_getInternalFaceIndices")] public static extern uint32* ContactPair_getInternalFaceIndices(PxContactPair* self__pod);
		[LinkName("PxContactPair_extractContacts_1")] public static extern uint32 ContactPair_extractContacts_1(PxContactPair* self__pod, PxContactPairPoint* userBuffer_pod, uint32 bufferSize);
		[LinkName("PxContactPair_bufferContacts_1")] public static extern void ContactPair_bufferContacts_1(PxContactPair* self__pod, PxContactPair* newPair_pod, uint8* bufferMemory);
		[LinkName("PxContactPair_getInternalFaceIndices_1")] public static extern uint32* ContactPair_getInternalFaceIndices_1(PxContactPair* self__pod);
		[LinkName("PxTriggerPair_new")] public static extern PxTriggerPair TriggerPair_new();
		[LinkName("PxConstraintInfo_new")] public static extern PxConstraintInfo ConstraintInfo_new();
		[LinkName("PxConstraintInfo_new_1")] public static extern PxConstraintInfo ConstraintInfo_new_1(PxConstraint* c_pod, void* extRef, uint32 t);
		[LinkName("PxSimulationEventCallback_onConstraintBreak_mut")] public static extern void SimulationEventCallback_onConstraintBreak_mut(PxSimulationEventCallback* self__pod, PxConstraintInfo* constraints_pod, uint32 count);
		[LinkName("PxSimulationEventCallback_onWake_mut")] public static extern void SimulationEventCallback_onWake_mut(PxSimulationEventCallback* self__pod, PxActor** actors_pod, uint32 count);
		[LinkName("PxSimulationEventCallback_onSleep_mut")] public static extern void SimulationEventCallback_onSleep_mut(PxSimulationEventCallback* self__pod, PxActor** actors_pod, uint32 count);
		[LinkName("PxSimulationEventCallback_onContact_mut")] public static extern void SimulationEventCallback_onContact_mut(PxSimulationEventCallback* self__pod, PxContactPairHeader* pairHeader_pod, PxContactPair* pairs_pod, uint32 nbPairs);
		[LinkName("PxSimulationEventCallback_onTrigger_mut")] public static extern void SimulationEventCallback_onTrigger_mut(PxSimulationEventCallback* self__pod, PxTriggerPair* pairs_pod, uint32 count);
		[LinkName("PxSimulationEventCallback_onAdvance_mut")] public static extern void SimulationEventCallback_onAdvance_mut(PxSimulationEventCallback* self__pod, PxRigidBody** bodyBuffer_pod, PxTransform* poseBuffer_pod, uint32 count);
		[LinkName("PxSimulationEventCallback_delete")] public static extern void SimulationEventCallback_delete(PxSimulationEventCallback* self__pod);
		[LinkName("PxPruningStructure_release_mut")] public static extern void PruningStructure_release_mut(PxPruningStructure* self__pod);
		[LinkName("PxPruningStructure_getRigidActors")] public static extern uint32 PruningStructure_getRigidActors(PxPruningStructure* self__pod, PxRigidActor** userBuffer_pod, uint32 bufferSize, uint32 startIndex);
		[LinkName("PxPruningStructure_getNbRigidActors")] public static extern uint32 PruningStructure_getNbRigidActors(PxPruningStructure* self__pod);
		[LinkName("PxPruningStructure_getConcreteTypeName")] public static extern char8* PruningStructure_getConcreteTypeName(PxPruningStructure* self__pod);
		[LinkName("PxExtendedVec3_new")] public static extern PxExtendedVec3 ExtendedVec3_new();
		[LinkName("PxExtendedVec3_new_1")] public static extern PxExtendedVec3 ExtendedVec3_new_1(double _x, double _y, double _z);
		[LinkName("PxExtendedVec3_isZero")] public static extern bool ExtendedVec3_isZero(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_dot")] public static extern double ExtendedVec3_dot(PxExtendedVec3* self__pod, PxVec3* v_pod);
		[LinkName("PxExtendedVec3_distanceSquared")] public static extern double ExtendedVec3_distanceSquared(PxExtendedVec3* self__pod, PxExtendedVec3* v_pod);
		[LinkName("PxExtendedVec3_magnitudeSquared")] public static extern double ExtendedVec3_magnitudeSquared(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_magnitude")] public static extern double ExtendedVec3_magnitude(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_normalize_mut")] public static extern double ExtendedVec3_normalize_mut(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_isFinite")] public static extern bool ExtendedVec3_isFinite(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_maximum_mut")] public static extern void ExtendedVec3_maximum_mut(PxExtendedVec3* self__pod, PxExtendedVec3* v_pod);
		[LinkName("PxExtendedVec3_minimum_mut")] public static extern void ExtendedVec3_minimum_mut(PxExtendedVec3* self__pod, PxExtendedVec3* v_pod);
		[LinkName("PxExtendedVec3_set_mut")] public static extern void ExtendedVec3_set_mut(PxExtendedVec3* self__pod, double x_, double y_, double z_);
		[LinkName("PxExtendedVec3_setPlusInfinity_mut")] public static extern void ExtendedVec3_setPlusInfinity_mut(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_setMinusInfinity_mut")] public static extern void ExtendedVec3_setMinusInfinity_mut(PxExtendedVec3* self__pod);
		[LinkName("PxExtendedVec3_cross_mut")] public static extern void ExtendedVec3_cross_mut(PxExtendedVec3* self__pod, PxExtendedVec3* left_pod, PxVec3* right_pod);
		[LinkName("PxExtendedVec3_cross_mut_1")] public static extern void ExtendedVec3_cross_mut_1(PxExtendedVec3* self__pod, PxExtendedVec3* left_pod, PxExtendedVec3* right_pod);
		[LinkName("PxExtendedVec3_cross")] public static extern PxExtendedVec3 ExtendedVec3_cross(PxExtendedVec3* self__pod, PxExtendedVec3* v_pod);
		[LinkName("PxExtendedVec3_cross_mut_2")] public static extern void ExtendedVec3_cross_mut_2(PxExtendedVec3* self__pod, PxVec3* left_pod, PxExtendedVec3* right_pod);
		[LinkName("PxObstacle_getType")] public static extern int32 Obstacle_getType(PxObstacle* self__pod);
		[LinkName("PxBoxObstacle_new")] public static extern PxBoxObstacle BoxObstacle_new();
		[LinkName("PxCapsuleObstacle_new")] public static extern PxCapsuleObstacle CapsuleObstacle_new();
		[LinkName("PxObstacleContext_release_mut")] public static extern void ObstacleContext_release_mut(PxObstacleContext* self__pod);
		[LinkName("PxObstacleContext_getControllerManager")] public static extern PxControllerManager* ObstacleContext_getControllerManager(PxObstacleContext* self__pod);
		[LinkName("PxObstacleContext_addObstacle_mut")] public static extern uint32 ObstacleContext_addObstacle_mut(PxObstacleContext* self__pod, PxObstacle* obstacle_pod);
		[LinkName("PxObstacleContext_removeObstacle_mut")] public static extern bool ObstacleContext_removeObstacle_mut(PxObstacleContext* self__pod, uint32 handle);
		[LinkName("PxObstacleContext_updateObstacle_mut")] public static extern bool ObstacleContext_updateObstacle_mut(PxObstacleContext* self__pod, uint32 handle, PxObstacle* obstacle_pod);
		[LinkName("PxObstacleContext_getNbObstacles")] public static extern uint32 ObstacleContext_getNbObstacles(PxObstacleContext* self__pod);
		[LinkName("PxObstacleContext_getObstacle")] public static extern PxObstacle* ObstacleContext_getObstacle(PxObstacleContext* self__pod, uint32 i);
		[LinkName("PxObstacleContext_getObstacleByHandle")] public static extern PxObstacle* ObstacleContext_getObstacleByHandle(PxObstacleContext* self__pod, uint32 handle);
		[LinkName("PxUserControllerHitReport_onShapeHit_mut")] public static extern void UserControllerHitReport_onShapeHit_mut(PxUserControllerHitReport* self__pod, PxControllerShapeHit* hit_pod);
		[LinkName("PxUserControllerHitReport_onControllerHit_mut")] public static extern void UserControllerHitReport_onControllerHit_mut(PxUserControllerHitReport* self__pod, PxControllersHit* hit_pod);
		[LinkName("PxUserControllerHitReport_onObstacleHit_mut")] public static extern void UserControllerHitReport_onObstacleHit_mut(PxUserControllerHitReport* self__pod, PxControllerObstacleHit* hit_pod);
		[LinkName("PxControllerFilterCallback_delete")] public static extern void ControllerFilterCallback_delete(PxControllerFilterCallback* self__pod);
		[LinkName("PxControllerFilterCallback_filter_mut")] public static extern bool ControllerFilterCallback_filter_mut(PxControllerFilterCallback* self__pod, PxController* a_pod, PxController* b_pod);
		[LinkName("PxControllerFilters_new")] public static extern PxControllerFilters ControllerFilters_new(PxFilterData* filterData_pod, PxQueryFilterCallback* cb_pod, PxControllerFilterCallback* cctFilterCb_pod);
		[LinkName("PxControllerDesc_isValid")] public static extern bool ControllerDesc_isValid(PxControllerDesc* self__pod);
		[LinkName("PxControllerDesc_getType")] public static extern uint32 ControllerDesc_getType(PxControllerDesc* self__pod);
		[LinkName("PxControllerDesc_isValid_1")] public static extern bool ControllerDesc_isValid_1(PxControllerDesc* self__pod);
		[LinkName("PxController_getType")] public static extern uint32 Controller_getType(PxController* self__pod);
		[LinkName("PxController_release_mut")] public static extern void Controller_release_mut(PxController* self__pod);
		[LinkName("PxController_move_mut")] public static extern PxControllerCollisionFlags Controller_move_mut(PxController* self__pod, PxVec3* disp_pod, float minDist, float elapsedTime, PxControllerFilters* filters_pod, PxObstacleContext* obstacles_pod);
		[LinkName("PxController_setPosition_mut")] public static extern bool Controller_setPosition_mut(PxController* self__pod, PxExtendedVec3* position_pod);
		[LinkName("PxController_getPosition")] public static extern PxExtendedVec3* Controller_getPosition(PxController* self__pod);
		[LinkName("PxController_setFootPosition_mut")] public static extern bool Controller_setFootPosition_mut(PxController* self__pod, PxExtendedVec3* position_pod);
		[LinkName("PxController_getFootPosition")] public static extern PxExtendedVec3 Controller_getFootPosition(PxController* self__pod);
		[LinkName("PxController_getActor")] public static extern PxRigidDynamic* Controller_getActor(PxController* self__pod);
		[LinkName("PxController_setStepOffset_mut")] public static extern void Controller_setStepOffset_mut(PxController* self__pod, float offset);
		[LinkName("PxController_getStepOffset")] public static extern float Controller_getStepOffset(PxController* self__pod);
		[LinkName("PxController_setNonWalkableMode_mut")] public static extern void Controller_setNonWalkableMode_mut(PxController* self__pod, uint32 flag_pod);
		[LinkName("PxController_getNonWalkableMode")] public static extern uint32 Controller_getNonWalkableMode(PxController* self__pod);
		[LinkName("PxController_getContactOffset")] public static extern float Controller_getContactOffset(PxController* self__pod);
		[LinkName("PxController_setContactOffset_mut")] public static extern void Controller_setContactOffset_mut(PxController* self__pod, float offset);
		[LinkName("PxController_getUpDirection")] public static extern PxVec3 Controller_getUpDirection(PxController* self__pod);
		[LinkName("PxController_setUpDirection_mut")] public static extern void Controller_setUpDirection_mut(PxController* self__pod, PxVec3* up_pod);
		[LinkName("PxController_getSlopeLimit")] public static extern float Controller_getSlopeLimit(PxController* self__pod);
		[LinkName("PxController_setSlopeLimit_mut")] public static extern void Controller_setSlopeLimit_mut(PxController* self__pod, float slopeLimit);
		[LinkName("PxController_invalidateCache_mut")] public static extern void Controller_invalidateCache_mut(PxController* self__pod);
		[LinkName("PxController_getScene_mut")] public static extern PxScene* Controller_getScene_mut(PxController* self__pod);
		[LinkName("PxController_getUserData")] public static extern void* Controller_getUserData(PxController* self__pod);
		[LinkName("PxController_setUserData_mut")] public static extern void Controller_setUserData_mut(PxController* self__pod, void* userData);
		[LinkName("PxController_getState")] public static extern void Controller_getState(PxController* self__pod, PxControllerState* state_pod);
		[LinkName("PxController_getStats")] public static extern void Controller_getStats(PxController* self__pod, PxControllerStats* stats_pod);
		[LinkName("PxController_resize_mut")] public static extern void Controller_resize_mut(PxController* self__pod, float height);
		[LinkName("PxBoxControllerDesc_new_alloc")] public static extern PxBoxControllerDesc* BoxControllerDesc_new_alloc();
		[LinkName("PxBoxControllerDesc_delete")] public static extern void BoxControllerDesc_delete(PxBoxControllerDesc* self__pod);
		[LinkName("PxBoxControllerDesc_setToDefault_mut")] public static extern void BoxControllerDesc_setToDefault_mut(PxBoxControllerDesc* self__pod);
		[LinkName("PxBoxControllerDesc_isValid")] public static extern bool BoxControllerDesc_isValid(PxBoxControllerDesc* self__pod);
		[LinkName("PxBoxControllerDesc_new_alloc_1")] public static extern PxBoxControllerDesc* BoxControllerDesc_new_alloc_1();
		[LinkName("PxBoxControllerDesc_setToDefault_mut_1")] public static extern void BoxControllerDesc_setToDefault_mut_1(PxBoxControllerDesc* self__pod);
		[LinkName("PxBoxControllerDesc_isValid_1")] public static extern bool BoxControllerDesc_isValid_1(PxBoxControllerDesc* self__pod);
		[LinkName("PxBoxController_getHalfHeight")] public static extern float BoxController_getHalfHeight(PxBoxController* self__pod);
		[LinkName("PxBoxController_getHalfSideExtent")] public static extern float BoxController_getHalfSideExtent(PxBoxController* self__pod);
		[LinkName("PxBoxController_getHalfForwardExtent")] public static extern float BoxController_getHalfForwardExtent(PxBoxController* self__pod);
		[LinkName("PxBoxController_setHalfHeight_mut")] public static extern bool BoxController_setHalfHeight_mut(PxBoxController* self__pod, float halfHeight);
		[LinkName("PxBoxController_setHalfSideExtent_mut")] public static extern bool BoxController_setHalfSideExtent_mut(PxBoxController* self__pod, float halfSideExtent);
		[LinkName("PxBoxController_setHalfForwardExtent_mut")] public static extern bool BoxController_setHalfForwardExtent_mut(PxBoxController* self__pod, float halfForwardExtent);
		[LinkName("PxCapsuleControllerDesc_new_alloc")] public static extern PxCapsuleControllerDesc* CapsuleControllerDesc_new_alloc();
		[LinkName("PxCapsuleControllerDesc_delete")] public static extern void CapsuleControllerDesc_delete(PxCapsuleControllerDesc* self__pod);
		[LinkName("PxCapsuleControllerDesc_setToDefault_mut")] public static extern void CapsuleControllerDesc_setToDefault_mut(PxCapsuleControllerDesc* self__pod);
		[LinkName("PxCapsuleControllerDesc_isValid")] public static extern bool CapsuleControllerDesc_isValid(PxCapsuleControllerDesc* self__pod);
		[LinkName("PxCapsuleControllerDesc_new_alloc_1")] public static extern PxCapsuleControllerDesc* CapsuleControllerDesc_new_alloc_1();
		[LinkName("PxCapsuleControllerDesc_setToDefault_mut_1")] public static extern void CapsuleControllerDesc_setToDefault_mut_1(PxCapsuleControllerDesc* self__pod);
		[LinkName("PxCapsuleControllerDesc_isValid_1")] public static extern bool CapsuleControllerDesc_isValid_1(PxCapsuleControllerDesc* self__pod);
		[LinkName("PxCapsuleController_getRadius")] public static extern float CapsuleController_getRadius(PxCapsuleController* self__pod);
		[LinkName("PxCapsuleController_setRadius_mut")] public static extern bool CapsuleController_setRadius_mut(PxCapsuleController* self__pod, float radius);
		[LinkName("PxCapsuleController_getHeight")] public static extern float CapsuleController_getHeight(PxCapsuleController* self__pod);
		[LinkName("PxCapsuleController_setHeight_mut")] public static extern bool CapsuleController_setHeight_mut(PxCapsuleController* self__pod, float height);
		[LinkName("PxCapsuleController_getClimbingMode")] public static extern uint32 CapsuleController_getClimbingMode(PxCapsuleController* self__pod);
		[LinkName("PxCapsuleController_setClimbingMode_mut")] public static extern bool CapsuleController_setClimbingMode_mut(PxCapsuleController* self__pod, uint32 mode_pod);
		[LinkName("PxControllerBehaviorCallback_getBehaviorFlags_mut")] public static extern PxControllerBehaviorFlags ControllerBehaviorCallback_getBehaviorFlags_mut(PxControllerBehaviorCallback* self__pod, PxShape* shape_pod, PxActor* actor_pod);
		[LinkName("PxControllerBehaviorCallback_getBehaviorFlags_mut_1")] public static extern PxControllerBehaviorFlags ControllerBehaviorCallback_getBehaviorFlags_mut_1(PxControllerBehaviorCallback* self__pod, PxController* controller_pod);
		[LinkName("PxControllerBehaviorCallback_getBehaviorFlags_mut_2")] public static extern PxControllerBehaviorFlags ControllerBehaviorCallback_getBehaviorFlags_mut_2(PxControllerBehaviorCallback* self__pod, PxObstacle* obstacle_pod);
		[LinkName("PxControllerManager_release_mut")] public static extern void ControllerManager_release_mut(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_getScene")] public static extern PxScene* ControllerManager_getScene(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_getNbControllers")] public static extern uint32 ControllerManager_getNbControllers(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_getController_mut")] public static extern PxController* ControllerManager_getController_mut(PxControllerManager* self__pod, uint32 index);
		[LinkName("PxControllerManager_createController_mut")] public static extern PxController* ControllerManager_createController_mut(PxControllerManager* self__pod, PxControllerDesc* desc_pod);
		[LinkName("PxControllerManager_purgeControllers_mut")] public static extern void ControllerManager_purgeControllers_mut(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_getRenderBuffer_mut")] public static extern PxRenderBuffer* ControllerManager_getRenderBuffer_mut(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_setDebugRenderingFlags_mut")] public static extern void ControllerManager_setDebugRenderingFlags_mut(PxControllerManager* self__pod, PxControllerDebugRenderFlags flags_pod);
		[LinkName("PxControllerManager_getNbObstacleContexts")] public static extern uint32 ControllerManager_getNbObstacleContexts(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_getObstacleContext_mut")] public static extern PxObstacleContext* ControllerManager_getObstacleContext_mut(PxControllerManager* self__pod, uint32 index);
		[LinkName("PxControllerManager_createObstacleContext_mut")] public static extern PxObstacleContext* ControllerManager_createObstacleContext_mut(PxControllerManager* self__pod);
		[LinkName("PxControllerManager_computeInteractions_mut")] public static extern void ControllerManager_computeInteractions_mut(PxControllerManager* self__pod, float elapsedTime, PxControllerFilterCallback* cctFilterCb_pod);
		[LinkName("PxControllerManager_setTessellation_mut")] public static extern void ControllerManager_setTessellation_mut(PxControllerManager* self__pod, bool flag, float maxEdgeLength);
		[LinkName("PxControllerManager_setOverlapRecoveryModule_mut")] public static extern void ControllerManager_setOverlapRecoveryModule_mut(PxControllerManager* self__pod, bool flag);
		[LinkName("PxControllerManager_setPreciseSweeps_mut")] public static extern void ControllerManager_setPreciseSweeps_mut(PxControllerManager* self__pod, bool flag);
		[LinkName("PxControllerManager_setPreventVerticalSlidingAgainstCeiling_mut")] public static extern void ControllerManager_setPreventVerticalSlidingAgainstCeiling_mut(PxControllerManager* self__pod, bool flag);
		[LinkName("PxControllerManager_shiftOrigin_mut")] public static extern void ControllerManager_shiftOrigin_mut(PxControllerManager* self__pod, PxVec3* shift_pod);
		[LinkName("phys_PxCreateControllerManager")] public static extern PxControllerManager* CreateControllerManager(PxScene* scene_pod, bool lockingEnabled);
		[LinkName("PxConvexMeshDesc_new")] public static extern PxConvexMeshDesc ConvexMeshDesc_new();
		[LinkName("PxConvexMeshDesc_setToDefault_mut")] public static extern void ConvexMeshDesc_setToDefault_mut(PxConvexMeshDesc* self__pod);
		[LinkName("PxConvexMeshDesc_isValid")] public static extern bool ConvexMeshDesc_isValid(PxConvexMeshDesc* self__pod);
		[LinkName("PxConvexMeshDesc_new_1")] public static extern PxConvexMeshDesc ConvexMeshDesc_new_1();
		[LinkName("PxConvexMeshDesc_setToDefault_mut_1")] public static extern void ConvexMeshDesc_setToDefault_mut_1(PxConvexMeshDesc* self__pod);
		[LinkName("PxConvexMeshDesc_isValid_1")] public static extern bool ConvexMeshDesc_isValid_1(PxConvexMeshDesc* self__pod);
		[LinkName("PxTriangleMeshDesc_new")] public static extern PxTriangleMeshDesc TriangleMeshDesc_new();
		[LinkName("PxTriangleMeshDesc_setToDefault_mut")] public static extern void TriangleMeshDesc_setToDefault_mut(PxTriangleMeshDesc* self__pod);
		[LinkName("PxTriangleMeshDesc_isValid")] public static extern bool TriangleMeshDesc_isValid(PxTriangleMeshDesc* self__pod);
		[LinkName("PxTriangleMeshDesc_new_1")] public static extern PxTriangleMeshDesc TriangleMeshDesc_new_1();
		[LinkName("PxTriangleMeshDesc_setToDefault_mut_1")] public static extern void TriangleMeshDesc_setToDefault_mut_1(PxTriangleMeshDesc* self__pod);
		[LinkName("PxTriangleMeshDesc_isValid_1")] public static extern bool TriangleMeshDesc_isValid_1(PxTriangleMeshDesc* self__pod);
		[LinkName("PxBVH33MidphaseDesc_setToDefault_mut")] public static extern void BVH33MidphaseDesc_setToDefault_mut(PxBVH33MidphaseDesc* self__pod);
		[LinkName("PxBVH33MidphaseDesc_isValid")] public static extern bool BVH33MidphaseDesc_isValid(PxBVH33MidphaseDesc* self__pod);
		[LinkName("PxBVH34MidphaseDesc_setToDefault_mut")] public static extern void BVH34MidphaseDesc_setToDefault_mut(PxBVH34MidphaseDesc* self__pod);
		[LinkName("PxBVH34MidphaseDesc_isValid")] public static extern bool BVH34MidphaseDesc_isValid(PxBVH34MidphaseDesc* self__pod);
		[LinkName("PxMidphaseDesc_new")] public static extern PxMidphaseDesc MidphaseDesc_new();
		[LinkName("PxMidphaseDesc_getType")] public static extern uint32 MidphaseDesc_getType(PxMidphaseDesc* self__pod);
		[LinkName("PxMidphaseDesc_setToDefault_mut")] public static extern void MidphaseDesc_setToDefault_mut(PxMidphaseDesc* self__pod, uint32 type_pod);
		[LinkName("PxMidphaseDesc_isValid")] public static extern bool MidphaseDesc_isValid(PxMidphaseDesc* self__pod);
		[LinkName("PxBVHStructureDesc_new")] public static extern PxBVHStructureDesc BVHStructureDesc_new();
		[LinkName("PxBVHStructureDesc_setToDefault_mut")] public static extern void BVHStructureDesc_setToDefault_mut(PxBVHStructureDesc* self__pod);
		[LinkName("PxBVHStructureDesc_isValid")] public static extern bool BVHStructureDesc_isValid(PxBVHStructureDesc* self__pod);
		[LinkName("PxBVHStructureDesc_new_1")] public static extern PxBVHStructureDesc BVHStructureDesc_new_1();
		[LinkName("PxBVHStructureDesc_setToDefault_mut_1")] public static extern void BVHStructureDesc_setToDefault_mut_1(PxBVHStructureDesc* self__pod);
		[LinkName("PxBVHStructureDesc_isValid_1")] public static extern bool BVHStructureDesc_isValid_1(PxBVHStructureDesc* self__pod);
		[LinkName("PxCookingParams_new")] public static extern PxCookingParams CookingParams_new(PxTolerancesScale* sc_pod);
		[LinkName("PxCooking_release_mut")] public static extern void Cooking_release_mut(PxCooking* self__pod);
		[LinkName("PxCooking_setParams_mut")] public static extern void Cooking_setParams_mut(PxCooking* self__pod, PxCookingParams* params_pod);
		[LinkName("PxCooking_getParams")] public static extern PxCookingParams* Cooking_getParams(PxCooking* self__pod);
		[LinkName("PxCooking_platformMismatch")] public static extern bool Cooking_platformMismatch(PxCooking* self__pod);
		[LinkName("PxCooking_cookTriangleMesh")] public static extern bool Cooking_cookTriangleMesh(PxCooking* self__pod, PxTriangleMeshDesc* desc_pod, PxOutputStream* stream_pod, uint32* condition_pod);
		[LinkName("PxCooking_createTriangleMesh")] public static extern PxTriangleMesh* Cooking_createTriangleMesh(PxCooking* self__pod, PxTriangleMeshDesc* desc_pod, PxPhysicsInsertionCallback* insertionCallback_pod, uint32* condition_pod);
		[LinkName("PxCooking_validateTriangleMesh")] public static extern bool Cooking_validateTriangleMesh(PxCooking* self__pod, PxTriangleMeshDesc* desc_pod);
		[LinkName("PxCooking_cookConvexMesh")] public static extern bool Cooking_cookConvexMesh(PxCooking* self__pod, PxConvexMeshDesc* desc_pod, PxOutputStream* stream_pod, uint32* condition_pod);
		[LinkName("PxCooking_createConvexMesh")] public static extern PxConvexMesh* Cooking_createConvexMesh(PxCooking* self__pod, PxConvexMeshDesc* desc_pod, PxPhysicsInsertionCallback* insertionCallback_pod, uint32* condition_pod);
		[LinkName("PxCooking_validateConvexMesh")] public static extern bool Cooking_validateConvexMesh(PxCooking* self__pod, PxConvexMeshDesc* desc_pod);
		[LinkName("PxCooking_computeHullPolygons")] public static extern bool Cooking_computeHullPolygons(PxCooking* self__pod, PxSimpleTriangleMesh* mesh_pod, PxAllocatorCallback* inCallback_pod, uint32* nbVerts_pod, PxVec3** vertices_pod, uint32* nbIndices_pod, uint32** indices_pod, uint32* nbPolygons_pod, PxHullPolygon** hullPolygons_pod);
		[LinkName("PxCooking_cookHeightField")] public static extern bool Cooking_cookHeightField(PxCooking* self__pod, PxHeightFieldDesc* desc_pod, PxOutputStream* stream_pod);
		[LinkName("PxCooking_createHeightField")] public static extern PxHeightField* Cooking_createHeightField(PxCooking* self__pod, PxHeightFieldDesc* desc_pod, PxPhysicsInsertionCallback* insertionCallback_pod);
		[LinkName("PxCooking_cookBVHStructure")] public static extern bool Cooking_cookBVHStructure(PxCooking* self__pod, PxBVHStructureDesc* desc_pod, PxOutputStream* stream_pod);
		[LinkName("PxCooking_createBVHStructure")] public static extern PxBVHStructure* Cooking_createBVHStructure(PxCooking* self__pod, PxBVHStructureDesc* desc_pod, PxPhysicsInsertionCallback* insertionCallback_pod);
		[LinkName("phys_PxCreateCooking")] public static extern PxCooking* CreateCooking(uint32 version, PxFoundation* foundation_pod, PxCookingParams* params_pod);
		[LinkName("PxDefaultMemoryOutputStream_new_alloc")] public static extern PxDefaultMemoryOutputStream* DefaultMemoryOutputStream_new_alloc(PxAllocatorCallback* allocator_pod);
		[LinkName("PxDefaultMemoryOutputStream_delete")] public static extern void DefaultMemoryOutputStream_delete(PxDefaultMemoryOutputStream* self__pod);
		[LinkName("PxDefaultMemoryOutputStream_write_mut")] public static extern uint32 DefaultMemoryOutputStream_write_mut(PxDefaultMemoryOutputStream* self__pod, void* src, uint32 count);
		[LinkName("PxDefaultMemoryOutputStream_getSize")] public static extern uint32 DefaultMemoryOutputStream_getSize(PxDefaultMemoryOutputStream* self__pod);
		[LinkName("PxDefaultMemoryOutputStream_getData")] public static extern uint8* DefaultMemoryOutputStream_getData(PxDefaultMemoryOutputStream* self__pod);
		[LinkName("PxDefaultMemoryInputData_new_alloc")] public static extern PxDefaultMemoryInputData* DefaultMemoryInputData_new_alloc(uint8* data, uint32 length);
		[LinkName("PxDefaultMemoryInputData_read_mut")] public static extern uint32 DefaultMemoryInputData_read_mut(PxDefaultMemoryInputData* self__pod, void* dest, uint32 count);
		[LinkName("PxDefaultMemoryInputData_getLength")] public static extern uint32 DefaultMemoryInputData_getLength(PxDefaultMemoryInputData* self__pod);
		[LinkName("PxDefaultMemoryInputData_seek_mut")] public static extern void DefaultMemoryInputData_seek_mut(PxDefaultMemoryInputData* self__pod, uint32 pos);
		[LinkName("PxDefaultMemoryInputData_tell")] public static extern uint32 DefaultMemoryInputData_tell(PxDefaultMemoryInputData* self__pod);
		[LinkName("PxDefaultMemoryInputData_delete")] public static extern void DefaultMemoryInputData_delete(PxDefaultMemoryInputData* self__pod);
		[LinkName("PxDefaultFileOutputStream_new_alloc")] public static extern PxDefaultFileOutputStream* DefaultFileOutputStream_new_alloc(char8* name);
		[LinkName("PxDefaultFileOutputStream_delete")] public static extern void DefaultFileOutputStream_delete(PxDefaultFileOutputStream* self__pod);
		[LinkName("PxDefaultFileOutputStream_write_mut")] public static extern uint32 DefaultFileOutputStream_write_mut(PxDefaultFileOutputStream* self__pod, void* src, uint32 count);
		[LinkName("PxDefaultFileOutputStream_isValid_mut")] public static extern bool DefaultFileOutputStream_isValid_mut(PxDefaultFileOutputStream* self__pod);
		[LinkName("PxDefaultFileInputData_new_alloc")] public static extern PxDefaultFileInputData* DefaultFileInputData_new_alloc(char8* name);
		[LinkName("PxDefaultFileInputData_delete")] public static extern void DefaultFileInputData_delete(PxDefaultFileInputData* self__pod);
		[LinkName("PxDefaultFileInputData_read_mut")] public static extern uint32 DefaultFileInputData_read_mut(PxDefaultFileInputData* self__pod, void* dest, uint32 count);
		[LinkName("PxDefaultFileInputData_seek_mut")] public static extern void DefaultFileInputData_seek_mut(PxDefaultFileInputData* self__pod, uint32 pos);
		[LinkName("PxDefaultFileInputData_tell")] public static extern uint32 DefaultFileInputData_tell(PxDefaultFileInputData* self__pod);
		[LinkName("PxDefaultFileInputData_getLength")] public static extern uint32 DefaultFileInputData_getLength(PxDefaultFileInputData* self__pod);
		[LinkName("PxDefaultFileInputData_isValid")] public static extern bool DefaultFileInputData_isValid(PxDefaultFileInputData* self__pod);
		[LinkName("PxJoint_setActors_mut")] public static extern void Joint_setActors_mut(PxJoint* self__pod, PxRigidActor* actor0_pod, PxRigidActor* actor1_pod);
		[LinkName("PxJoint_getActors")] public static extern void Joint_getActors(PxJoint* self__pod, PxRigidActor** actor0_pod, PxRigidActor** actor1_pod);
		[LinkName("PxJoint_setLocalPose_mut")] public static extern void Joint_setLocalPose_mut(PxJoint* self__pod, uint32 actor_pod, PxTransform* localPose_pod);
		[LinkName("PxJoint_getLocalPose")] public static extern PxTransform Joint_getLocalPose(PxJoint* self__pod, uint32 actor_pod);
		[LinkName("PxJoint_getRelativeTransform")] public static extern PxTransform Joint_getRelativeTransform(PxJoint* self__pod);
		[LinkName("PxJoint_getRelativeLinearVelocity")] public static extern PxVec3 Joint_getRelativeLinearVelocity(PxJoint* self__pod);
		[LinkName("PxJoint_getRelativeAngularVelocity")] public static extern PxVec3 Joint_getRelativeAngularVelocity(PxJoint* self__pod);
		[LinkName("PxJoint_setBreakForce_mut")] public static extern void Joint_setBreakForce_mut(PxJoint* self__pod, float force, float torque);
		[LinkName("PxJoint_getBreakForce")] public static extern void Joint_getBreakForce(PxJoint* self__pod, float* force_pod, float* torque_pod);
		[LinkName("PxJoint_setConstraintFlags_mut")] public static extern void Joint_setConstraintFlags_mut(PxJoint* self__pod, PxConstraintFlags flags_pod);
		[LinkName("PxJoint_setConstraintFlag_mut")] public static extern void Joint_setConstraintFlag_mut(PxJoint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxJoint_getConstraintFlags")] public static extern PxConstraintFlags Joint_getConstraintFlags(PxJoint* self__pod);
		[LinkName("PxJoint_setInvMassScale0_mut")] public static extern void Joint_setInvMassScale0_mut(PxJoint* self__pod, float invMassScale);
		[LinkName("PxJoint_getInvMassScale0")] public static extern float Joint_getInvMassScale0(PxJoint* self__pod);
		[LinkName("PxJoint_setInvInertiaScale0_mut")] public static extern void Joint_setInvInertiaScale0_mut(PxJoint* self__pod, float invInertiaScale);
		[LinkName("PxJoint_getInvInertiaScale0")] public static extern float Joint_getInvInertiaScale0(PxJoint* self__pod);
		[LinkName("PxJoint_setInvMassScale1_mut")] public static extern void Joint_setInvMassScale1_mut(PxJoint* self__pod, float invMassScale);
		[LinkName("PxJoint_getInvMassScale1")] public static extern float Joint_getInvMassScale1(PxJoint* self__pod);
		[LinkName("PxJoint_setInvInertiaScale1_mut")] public static extern void Joint_setInvInertiaScale1_mut(PxJoint* self__pod, float invInertiaScale);
		[LinkName("PxJoint_getInvInertiaScale1")] public static extern float Joint_getInvInertiaScale1(PxJoint* self__pod);
		[LinkName("PxJoint_getConstraint")] public static extern PxConstraint* Joint_getConstraint(PxJoint* self__pod);
		[LinkName("PxJoint_setName_mut")] public static extern void Joint_setName_mut(PxJoint* self__pod, char8* name);
		[LinkName("PxJoint_getName")] public static extern char8* Joint_getName(PxJoint* self__pod);
		[LinkName("PxJoint_release_mut")] public static extern void Joint_release_mut(PxJoint* self__pod);
		[LinkName("PxJoint_getScene")] public static extern PxScene* Joint_getScene(PxJoint* self__pod);
		[LinkName("PxJoint_getBinaryMetaData_mut")] public static extern void Joint_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxSpring_new")] public static extern PxSpring Spring_new(float stiffness_, float damping_);
		[LinkName("phys_PxSetJointGlobalFrame")] public static extern void SetJointGlobalFrame(PxJoint* joint_pod, PxVec3* wsAnchor_pod, PxVec3* wsAxis_pod);
		[LinkName("phys_PxDistanceJointCreate")] public static extern PxDistanceJoint* DistanceJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxDistanceJoint_getDistance")] public static extern float DistanceJoint_getDistance(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setMinDistance_mut")] public static extern void DistanceJoint_setMinDistance_mut(PxDistanceJoint* self__pod, float distance);
		[LinkName("PxDistanceJoint_getMinDistance")] public static extern float DistanceJoint_getMinDistance(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setMaxDistance_mut")] public static extern void DistanceJoint_setMaxDistance_mut(PxDistanceJoint* self__pod, float distance);
		[LinkName("PxDistanceJoint_getMaxDistance")] public static extern float DistanceJoint_getMaxDistance(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setTolerance_mut")] public static extern void DistanceJoint_setTolerance_mut(PxDistanceJoint* self__pod, float tolerance);
		[LinkName("PxDistanceJoint_getTolerance")] public static extern float DistanceJoint_getTolerance(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setStiffness_mut")] public static extern void DistanceJoint_setStiffness_mut(PxDistanceJoint* self__pod, float stiffness);
		[LinkName("PxDistanceJoint_getStiffness")] public static extern float DistanceJoint_getStiffness(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setDamping_mut")] public static extern void DistanceJoint_setDamping_mut(PxDistanceJoint* self__pod, float damping);
		[LinkName("PxDistanceJoint_getDamping")] public static extern float DistanceJoint_getDamping(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_setDistanceJointFlags_mut")] public static extern void DistanceJoint_setDistanceJointFlags_mut(PxDistanceJoint* self__pod, PxDistanceJointFlags flags_pod);
		[LinkName("PxDistanceJoint_setDistanceJointFlag_mut")] public static extern void DistanceJoint_setDistanceJointFlag_mut(PxDistanceJoint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxDistanceJoint_getDistanceJointFlags")] public static extern PxDistanceJointFlags DistanceJoint_getDistanceJointFlags(PxDistanceJoint* self__pod);
		[LinkName("PxDistanceJoint_getConcreteTypeName")] public static extern char8* DistanceJoint_getConcreteTypeName(PxDistanceJoint* self__pod);
		[LinkName("PxDefaultAllocator_allocate_mut")] public static extern void* DefaultAllocator_allocate_mut(PxDefaultAllocator* self__pod, uint64 size, char8* anonymous_arg1, char8* anonymous_arg2, int32 anonymous_arg3);
		[LinkName("PxDefaultAllocator_deallocate_mut")] public static extern void DefaultAllocator_deallocate_mut(PxDefaultAllocator* self__pod, void* ptr);
		[LinkName("PxDefaultAllocator_delete")] public static extern void DefaultAllocator_delete(PxDefaultAllocator* self__pod);
		[LinkName("phys_PxContactJointCreate")] public static extern PxContactJoint* ContactJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxJacobianRow_new")] public static extern PxJacobianRow JacobianRow_new();
		[LinkName("PxJacobianRow_new_1")] public static extern PxJacobianRow JacobianRow_new_1(PxVec3* lin0_pod, PxVec3* lin1_pod, PxVec3* ang0_pod, PxVec3* ang1_pod);
		[LinkName("PxContactJoint_setContact_mut")] public static extern void ContactJoint_setContact_mut(PxContactJoint* self__pod, PxVec3* contact_pod);
		[LinkName("PxContactJoint_setContactNormal_mut")] public static extern void ContactJoint_setContactNormal_mut(PxContactJoint* self__pod, PxVec3* contactNormal_pod);
		[LinkName("PxContactJoint_setPenetration_mut")] public static extern void ContactJoint_setPenetration_mut(PxContactJoint* self__pod, float penetration);
		[LinkName("PxContactJoint_getContact")] public static extern PxVec3 ContactJoint_getContact(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_getContactNormal")] public static extern PxVec3 ContactJoint_getContactNormal(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_getPenetration")] public static extern float ContactJoint_getPenetration(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_getResititution")] public static extern float ContactJoint_getResititution(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_setResititution_mut")] public static extern void ContactJoint_setResititution_mut(PxContactJoint* self__pod, float resititution);
		[LinkName("PxContactJoint_getBounceThreshold")] public static extern float ContactJoint_getBounceThreshold(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_setBounceThreshold_mut")] public static extern void ContactJoint_setBounceThreshold_mut(PxContactJoint* self__pod, float bounceThreshold);
		[LinkName("PxContactJoint_getConcreteTypeName")] public static extern char8* ContactJoint_getConcreteTypeName(PxContactJoint* self__pod);
		[LinkName("PxContactJoint_computeJacobians")] public static extern void ContactJoint_computeJacobians(PxContactJoint* self__pod, PxJacobianRow* jacobian_pod);
		[LinkName("PxContactJoint_getNbJacobianRows")] public static extern uint32 ContactJoint_getNbJacobianRows(PxContactJoint* self__pod);
		[LinkName("phys_PxFixedJointCreate")] public static extern PxFixedJoint* FixedJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxFixedJoint_setProjectionLinearTolerance_mut")] public static extern void FixedJoint_setProjectionLinearTolerance_mut(PxFixedJoint* self__pod, float tolerance);
		[LinkName("PxFixedJoint_getProjectionLinearTolerance")] public static extern float FixedJoint_getProjectionLinearTolerance(PxFixedJoint* self__pod);
		[LinkName("PxFixedJoint_setProjectionAngularTolerance_mut")] public static extern void FixedJoint_setProjectionAngularTolerance_mut(PxFixedJoint* self__pod, float tolerance);
		[LinkName("PxFixedJoint_getProjectionAngularTolerance")] public static extern float FixedJoint_getProjectionAngularTolerance(PxFixedJoint* self__pod);
		[LinkName("PxFixedJoint_getConcreteTypeName")] public static extern char8* FixedJoint_getConcreteTypeName(PxFixedJoint* self__pod);
		[LinkName("PxJointLimitParameters_new_alloc")] public static extern PxJointLimitParameters* JointLimitParameters_new_alloc();
		[LinkName("PxJointLimitParameters_isValid")] public static extern bool JointLimitParameters_isValid(PxJointLimitParameters* self__pod);
		[LinkName("PxJointLimitParameters_isSoft")] public static extern bool JointLimitParameters_isSoft(PxJointLimitParameters* self__pod);
		[LinkName("PxJointLinearLimit_new")] public static extern PxJointLinearLimit JointLinearLimit_new(PxTolerancesScale* scale_pod, float extent, float contactDist);
		[LinkName("PxJointLinearLimit_new_1")] public static extern PxJointLinearLimit JointLinearLimit_new_1(float extent, PxSpring* spring_pod);
		[LinkName("PxJointLinearLimit_isValid")] public static extern bool JointLinearLimit_isValid(PxJointLinearLimit* self__pod);
		[LinkName("PxJointLinearLimit_delete")] public static extern void JointLinearLimit_delete(PxJointLinearLimit* self__pod);
		[LinkName("PxJointLinearLimitPair_new")] public static extern PxJointLinearLimitPair JointLinearLimitPair_new(PxTolerancesScale* scale_pod, float lowerLimit, float upperLimit, float contactDist);
		[LinkName("PxJointLinearLimitPair_new_1")] public static extern PxJointLinearLimitPair JointLinearLimitPair_new_1(float lowerLimit, float upperLimit, PxSpring* spring_pod);
		[LinkName("PxJointLinearLimitPair_isValid")] public static extern bool JointLinearLimitPair_isValid(PxJointLinearLimitPair* self__pod);
		[LinkName("PxJointLinearLimitPair_delete")] public static extern void JointLinearLimitPair_delete(PxJointLinearLimitPair* self__pod);
		[LinkName("PxJointAngularLimitPair_new")] public static extern PxJointAngularLimitPair JointAngularLimitPair_new(float lowerLimit, float upperLimit, float contactDist);
		[LinkName("PxJointAngularLimitPair_new_1")] public static extern PxJointAngularLimitPair JointAngularLimitPair_new_1(float lowerLimit, float upperLimit, PxSpring* spring_pod);
		[LinkName("PxJointAngularLimitPair_isValid")] public static extern bool JointAngularLimitPair_isValid(PxJointAngularLimitPair* self__pod);
		[LinkName("PxJointAngularLimitPair_delete")] public static extern void JointAngularLimitPair_delete(PxJointAngularLimitPair* self__pod);
		[LinkName("PxJointLimitCone_new")] public static extern PxJointLimitCone JointLimitCone_new(float yLimitAngle, float zLimitAngle, float contactDist);
		[LinkName("PxJointLimitCone_new_1")] public static extern PxJointLimitCone JointLimitCone_new_1(float yLimitAngle, float zLimitAngle, PxSpring* spring_pod);
		[LinkName("PxJointLimitCone_isValid")] public static extern bool JointLimitCone_isValid(PxJointLimitCone* self__pod);
		[LinkName("PxJointLimitCone_delete")] public static extern void JointLimitCone_delete(PxJointLimitCone* self__pod);
		[LinkName("PxJointLimitPyramid_new")] public static extern PxJointLimitPyramid JointLimitPyramid_new(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax, float contactDist);
		[LinkName("PxJointLimitPyramid_new_1")] public static extern PxJointLimitPyramid JointLimitPyramid_new_1(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax, PxSpring* spring_pod);
		[LinkName("PxJointLimitPyramid_isValid")] public static extern bool JointLimitPyramid_isValid(PxJointLimitPyramid* self__pod);
		[LinkName("PxJointLimitPyramid_delete")] public static extern void JointLimitPyramid_delete(PxJointLimitPyramid* self__pod);
		[LinkName("phys_PxPrismaticJointCreate")] public static extern PxPrismaticJoint* PrismaticJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxPrismaticJoint_getPosition")] public static extern float PrismaticJoint_getPosition(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_getVelocity")] public static extern float PrismaticJoint_getVelocity(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_setLimit_mut")] public static extern void PrismaticJoint_setLimit_mut(PxPrismaticJoint* self__pod, PxJointLinearLimitPair* anonymous_arg0_pod);
		[LinkName("PxPrismaticJoint_getLimit")] public static extern PxJointLinearLimitPair PrismaticJoint_getLimit(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_setPrismaticJointFlags_mut")] public static extern void PrismaticJoint_setPrismaticJointFlags_mut(PxPrismaticJoint* self__pod, PxPrismaticJointFlags flags_pod);
		[LinkName("PxPrismaticJoint_setPrismaticJointFlag_mut")] public static extern void PrismaticJoint_setPrismaticJointFlag_mut(PxPrismaticJoint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxPrismaticJoint_getPrismaticJointFlags")] public static extern PxPrismaticJointFlags PrismaticJoint_getPrismaticJointFlags(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_setProjectionLinearTolerance_mut")] public static extern void PrismaticJoint_setProjectionLinearTolerance_mut(PxPrismaticJoint* self__pod, float tolerance);
		[LinkName("PxPrismaticJoint_getProjectionLinearTolerance")] public static extern float PrismaticJoint_getProjectionLinearTolerance(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_setProjectionAngularTolerance_mut")] public static extern void PrismaticJoint_setProjectionAngularTolerance_mut(PxPrismaticJoint* self__pod, float tolerance);
		[LinkName("PxPrismaticJoint_getProjectionAngularTolerance")] public static extern float PrismaticJoint_getProjectionAngularTolerance(PxPrismaticJoint* self__pod);
		[LinkName("PxPrismaticJoint_getConcreteTypeName")] public static extern char8* PrismaticJoint_getConcreteTypeName(PxPrismaticJoint* self__pod);
		[LinkName("phys_PxRevoluteJointCreate")] public static extern PxRevoluteJoint* RevoluteJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxRevoluteJoint_getAngle")] public static extern float RevoluteJoint_getAngle(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_getVelocity")] public static extern float RevoluteJoint_getVelocity(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setLimit_mut")] public static extern void RevoluteJoint_setLimit_mut(PxRevoluteJoint* self__pod, PxJointAngularLimitPair* limits_pod);
		[LinkName("PxRevoluteJoint_getLimit")] public static extern PxJointAngularLimitPair RevoluteJoint_getLimit(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setDriveVelocity_mut")] public static extern void RevoluteJoint_setDriveVelocity_mut(PxRevoluteJoint* self__pod, float velocity, bool autowake);
		[LinkName("PxRevoluteJoint_getDriveVelocity")] public static extern float RevoluteJoint_getDriveVelocity(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setDriveForceLimit_mut")] public static extern void RevoluteJoint_setDriveForceLimit_mut(PxRevoluteJoint* self__pod, float limit);
		[LinkName("PxRevoluteJoint_getDriveForceLimit")] public static extern float RevoluteJoint_getDriveForceLimit(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setDriveGearRatio_mut")] public static extern void RevoluteJoint_setDriveGearRatio_mut(PxRevoluteJoint* self__pod, float ratio);
		[LinkName("PxRevoluteJoint_getDriveGearRatio")] public static extern float RevoluteJoint_getDriveGearRatio(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setRevoluteJointFlags_mut")] public static extern void RevoluteJoint_setRevoluteJointFlags_mut(PxRevoluteJoint* self__pod, PxRevoluteJointFlags flags_pod);
		[LinkName("PxRevoluteJoint_setRevoluteJointFlag_mut")] public static extern void RevoluteJoint_setRevoluteJointFlag_mut(PxRevoluteJoint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxRevoluteJoint_getRevoluteJointFlags")] public static extern PxRevoluteJointFlags RevoluteJoint_getRevoluteJointFlags(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setProjectionLinearTolerance_mut")] public static extern void RevoluteJoint_setProjectionLinearTolerance_mut(PxRevoluteJoint* self__pod, float tolerance);
		[LinkName("PxRevoluteJoint_getProjectionLinearTolerance")] public static extern float RevoluteJoint_getProjectionLinearTolerance(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_setProjectionAngularTolerance_mut")] public static extern void RevoluteJoint_setProjectionAngularTolerance_mut(PxRevoluteJoint* self__pod, float tolerance);
		[LinkName("PxRevoluteJoint_getProjectionAngularTolerance")] public static extern float RevoluteJoint_getProjectionAngularTolerance(PxRevoluteJoint* self__pod);
		[LinkName("PxRevoluteJoint_getConcreteTypeName")] public static extern char8* RevoluteJoint_getConcreteTypeName(PxRevoluteJoint* self__pod);
		[LinkName("phys_PxSphericalJointCreate")] public static extern PxSphericalJoint* SphericalJointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxSphericalJoint_getLimitCone")] public static extern PxJointLimitCone SphericalJoint_getLimitCone(PxSphericalJoint* self__pod);
		[LinkName("PxSphericalJoint_setLimitCone_mut")] public static extern void SphericalJoint_setLimitCone_mut(PxSphericalJoint* self__pod, PxJointLimitCone* limit_pod);
		[LinkName("PxSphericalJoint_getSwingYAngle")] public static extern float SphericalJoint_getSwingYAngle(PxSphericalJoint* self__pod);
		[LinkName("PxSphericalJoint_getSwingZAngle")] public static extern float SphericalJoint_getSwingZAngle(PxSphericalJoint* self__pod);
		[LinkName("PxSphericalJoint_setSphericalJointFlags_mut")] public static extern void SphericalJoint_setSphericalJointFlags_mut(PxSphericalJoint* self__pod, PxSphericalJointFlags flags_pod);
		[LinkName("PxSphericalJoint_setSphericalJointFlag_mut")] public static extern void SphericalJoint_setSphericalJointFlag_mut(PxSphericalJoint* self__pod, uint32 flag_pod, bool value);
		[LinkName("PxSphericalJoint_getSphericalJointFlags")] public static extern PxSphericalJointFlags SphericalJoint_getSphericalJointFlags(PxSphericalJoint* self__pod);
		[LinkName("PxSphericalJoint_setProjectionLinearTolerance_mut")] public static extern void SphericalJoint_setProjectionLinearTolerance_mut(PxSphericalJoint* self__pod, float tolerance);
		[LinkName("PxSphericalJoint_getProjectionLinearTolerance")] public static extern float SphericalJoint_getProjectionLinearTolerance(PxSphericalJoint* self__pod);
		[LinkName("PxSphericalJoint_getConcreteTypeName")] public static extern char8* SphericalJoint_getConcreteTypeName(PxSphericalJoint* self__pod);
		[LinkName("phys_PxD6JointCreate")] public static extern PxD6Joint* D6JointCreate(PxPhysics* physics_pod, PxRigidActor* actor0_pod, PxTransform* localFrame0_pod, PxRigidActor* actor1_pod, PxTransform* localFrame1_pod);
		[LinkName("PxD6JointDrive_new")] public static extern PxD6JointDrive D6JointDrive_new();
		[LinkName("PxD6JointDrive_new_1")] public static extern PxD6JointDrive D6JointDrive_new_1(float driveStiffness, float driveDamping, float driveForceLimit, bool isAcceleration);
		[LinkName("PxD6JointDrive_isValid")] public static extern bool D6JointDrive_isValid(PxD6JointDrive* self__pod);
		[LinkName("PxD6Joint_setMotion_mut")] public static extern void D6Joint_setMotion_mut(PxD6Joint* self__pod, uint32 axis_pod, uint32 type_pod);
		[LinkName("PxD6Joint_getMotion")] public static extern uint32 D6Joint_getMotion(PxD6Joint* self__pod, uint32 axis_pod);
		[LinkName("PxD6Joint_getTwistAngle")] public static extern float D6Joint_getTwistAngle(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_getTwist")] public static extern float D6Joint_getTwist(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_getSwingYAngle")] public static extern float D6Joint_getSwingYAngle(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_getSwingZAngle")] public static extern float D6Joint_getSwingZAngle(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setDistanceLimit_mut")] public static extern void D6Joint_setDistanceLimit_mut(PxD6Joint* self__pod, PxJointLinearLimit* limit_pod);
		[LinkName("PxD6Joint_getDistanceLimit")] public static extern PxJointLinearLimit D6Joint_getDistanceLimit(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setLinearLimit_mut")] public static extern void D6Joint_setLinearLimit_mut(PxD6Joint* self__pod, PxJointLinearLimit* limit_pod);
		[LinkName("PxD6Joint_getLinearLimit")] public static extern PxJointLinearLimit D6Joint_getLinearLimit(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setLinearLimit_mut_1")] public static extern void D6Joint_setLinearLimit_mut_1(PxD6Joint* self__pod, uint32 axis_pod, PxJointLinearLimitPair* limit_pod);
		[LinkName("PxD6Joint_getLinearLimit_1")] public static extern PxJointLinearLimitPair D6Joint_getLinearLimit_1(PxD6Joint* self__pod, uint32 axis_pod);
		[LinkName("PxD6Joint_setTwistLimit_mut")] public static extern void D6Joint_setTwistLimit_mut(PxD6Joint* self__pod, PxJointAngularLimitPair* limit_pod);
		[LinkName("PxD6Joint_getTwistLimit")] public static extern PxJointAngularLimitPair D6Joint_getTwistLimit(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setSwingLimit_mut")] public static extern void D6Joint_setSwingLimit_mut(PxD6Joint* self__pod, PxJointLimitCone* limit_pod);
		[LinkName("PxD6Joint_getSwingLimit")] public static extern PxJointLimitCone D6Joint_getSwingLimit(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setPyramidSwingLimit_mut")] public static extern void D6Joint_setPyramidSwingLimit_mut(PxD6Joint* self__pod, PxJointLimitPyramid* limit_pod);
		[LinkName("PxD6Joint_getPyramidSwingLimit")] public static extern PxJointLimitPyramid D6Joint_getPyramidSwingLimit(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setDrive_mut")] public static extern void D6Joint_setDrive_mut(PxD6Joint* self__pod, uint32 index_pod, PxD6JointDrive* drive_pod);
		[LinkName("PxD6Joint_getDrive")] public static extern PxD6JointDrive D6Joint_getDrive(PxD6Joint* self__pod, uint32 index_pod);
		[LinkName("PxD6Joint_setDrivePosition_mut")] public static extern void D6Joint_setDrivePosition_mut(PxD6Joint* self__pod, PxTransform* pose_pod, bool autowake);
		[LinkName("PxD6Joint_getDrivePosition")] public static extern PxTransform D6Joint_getDrivePosition(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setDriveVelocity_mut")] public static extern void D6Joint_setDriveVelocity_mut(PxD6Joint* self__pod, PxVec3* linear_pod, PxVec3* angular_pod, bool autowake);
		[LinkName("PxD6Joint_getDriveVelocity")] public static extern void D6Joint_getDriveVelocity(PxD6Joint* self__pod, PxVec3* linear_pod, PxVec3* angular_pod);
		[LinkName("PxD6Joint_setProjectionLinearTolerance_mut")] public static extern void D6Joint_setProjectionLinearTolerance_mut(PxD6Joint* self__pod, float tolerance);
		[LinkName("PxD6Joint_getProjectionLinearTolerance")] public static extern float D6Joint_getProjectionLinearTolerance(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_setProjectionAngularTolerance_mut")] public static extern void D6Joint_setProjectionAngularTolerance_mut(PxD6Joint* self__pod, float tolerance);
		[LinkName("PxD6Joint_getProjectionAngularTolerance")] public static extern float D6Joint_getProjectionAngularTolerance(PxD6Joint* self__pod);
		[LinkName("PxD6Joint_getConcreteTypeName")] public static extern char8* D6Joint_getConcreteTypeName(PxD6Joint* self__pod);
		[LinkName("PxGroupsMask_new_alloc")] public static extern PxGroupsMask* GroupsMask_new_alloc();
		[LinkName("PxGroupsMask_delete")] public static extern void GroupsMask_delete(PxGroupsMask* self__pod);
		[LinkName("phys_PxDefaultSimulationFilterShader")] public static extern PxFilterFlags DefaultSimulationFilterShader(uint32 attributes0, PxFilterData filterData0_pod, uint32 attributes1, PxFilterData filterData1_pod, PxPairFlags* pairFlags_pod, void* constantBlock, uint32 constantBlockSize);
		[LinkName("phys_PxGetGroupCollisionFlag")] public static extern bool GetGroupCollisionFlag(uint16 group1, uint16 group2);
		[LinkName("phys_PxSetGroupCollisionFlag")] public static extern void SetGroupCollisionFlag(uint16 group1, uint16 group2, bool enable);
		[LinkName("phys_PxGetGroup")] public static extern uint16 GetGroup(PxActor* actor_pod);
		[LinkName("phys_PxSetGroup")] public static extern void SetGroup(PxActor* actor_pod, uint16 collisionGroup);
		[LinkName("phys_PxGetFilterOps")] public static extern void GetFilterOps(uint32* op0_pod, uint32* op1_pod, uint32* op2_pod);
		[LinkName("phys_PxSetFilterOps")] public static extern void SetFilterOps(uint32* op0_pod, uint32* op1_pod, uint32* op2_pod);
		[LinkName("phys_PxGetFilterBool")] public static extern bool GetFilterBool();
		[LinkName("phys_PxSetFilterBool")] public static extern void SetFilterBool(bool enable);
		[LinkName("phys_PxGetFilterConstants")] public static extern void GetFilterConstants(PxGroupsMask* c0_pod, PxGroupsMask* c1_pod);
		[LinkName("phys_PxSetFilterConstants")] public static extern void SetFilterConstants(PxGroupsMask* c0_pod, PxGroupsMask* c1_pod);
		[LinkName("phys_PxGetGroupsMask")] public static extern PxGroupsMask GetGroupsMask(PxActor* actor_pod);
		[LinkName("phys_PxSetGroupsMask")] public static extern void SetGroupsMask(PxActor* actor_pod, PxGroupsMask* mask_pod);
		[LinkName("PxDefaultErrorCallback_new_alloc")] public static extern PxDefaultErrorCallback* DefaultErrorCallback_new_alloc();
		[LinkName("PxDefaultErrorCallback_delete")] public static extern void DefaultErrorCallback_delete(PxDefaultErrorCallback* self__pod);
		[LinkName("PxDefaultErrorCallback_reportError_mut")] public static extern void DefaultErrorCallback_reportError_mut(PxDefaultErrorCallback* self__pod, int32 code_pod, char8* message, char8* file, int32 line);
		[LinkName("PxRigidActorExt_createExclusiveShape_mut")] public static extern PxShape* RigidActorExt_createExclusiveShape_mut(PxRigidActor* actor_pod, PxGeometry* geometry_pod, PxMaterial** materials_pod, uint16 materialCount, PxShapeFlags shapeFlags_pod);
		[LinkName("PxRigidActorExt_createExclusiveShape_mut_1")] public static extern PxShape* RigidActorExt_createExclusiveShape_mut_1(PxRigidActor* actor_pod, PxGeometry* geometry_pod, PxMaterial* material_pod, PxShapeFlags shapeFlags_pod);
		[LinkName("PxRigidActorExt_getRigidActorShapeLocalBoundsList_mut")] public static extern PxBounds3* RigidActorExt_getRigidActorShapeLocalBoundsList_mut(PxRigidActor* actor_pod, uint32* numBounds_pod);
		[LinkName("PxMassProperties_new")] public static extern PxMassProperties MassProperties_new();
		[LinkName("PxMassProperties_new_1")] public static extern PxMassProperties MassProperties_new_1(float m, PxMat33* inertiaT_pod, PxVec3* com_pod);
		[LinkName("PxMassProperties_new_2")] public static extern PxMassProperties MassProperties_new_2(PxGeometry* geometry_pod);
		[LinkName("PxMassProperties_translate_mut")] public static extern void MassProperties_translate_mut(PxMassProperties* self__pod, PxVec3* t_pod);
		[LinkName("PxMassProperties_getMassSpaceInertia_mut")] public static extern PxVec3 MassProperties_getMassSpaceInertia_mut(PxMat33* inertia_pod, PxQuat* massFrame_pod);
		[LinkName("PxMassProperties_translateInertia_mut")] public static extern PxMat33 MassProperties_translateInertia_mut(PxMat33* inertia_pod, float mass, PxVec3* t_pod);
		[LinkName("PxMassProperties_rotateInertia_mut")] public static extern PxMat33 MassProperties_rotateInertia_mut(PxMat33* inertia_pod, PxQuat* q_pod);
		[LinkName("PxMassProperties_scaleInertia_mut")] public static extern PxMat33 MassProperties_scaleInertia_mut(PxMat33* inertia_pod, PxQuat* scaleRotation_pod, PxVec3* scale_pod);
		[LinkName("PxMassProperties_sum_mut")] public static extern PxMassProperties MassProperties_sum_mut(PxMassProperties* props_pod, PxTransform* transforms_pod, uint32 count);
		[LinkName("PxRigidBodyExt_updateMassAndInertia_mut")] public static extern bool RigidBodyExt_updateMassAndInertia_mut(PxRigidBody* body_pod, float* shapeDensities, uint32 shapeDensityCount, PxVec3* massLocalPose_pod, bool includeNonSimShapes);
		[LinkName("PxRigidBodyExt_updateMassAndInertia_mut_1")] public static extern bool RigidBodyExt_updateMassAndInertia_mut_1(PxRigidBody* body_pod, float density, PxVec3* massLocalPose_pod, bool includeNonSimShapes);
		[LinkName("PxRigidBodyExt_setMassAndUpdateInertia_mut")] public static extern bool RigidBodyExt_setMassAndUpdateInertia_mut(PxRigidBody* body_pod, float* shapeMasses, uint32 shapeMassCount, PxVec3* massLocalPose_pod, bool includeNonSimShapes);
		[LinkName("PxRigidBodyExt_setMassAndUpdateInertia_mut_1")] public static extern bool RigidBodyExt_setMassAndUpdateInertia_mut_1(PxRigidBody* body_pod, float mass, PxVec3* massLocalPose_pod, bool includeNonSimShapes);
		[LinkName("PxRigidBodyExt_computeMassPropertiesFromShapes_mut")] public static extern PxMassProperties RigidBodyExt_computeMassPropertiesFromShapes_mut(PxShape** shapes_pod, uint32 shapeCount);
		[LinkName("PxRigidBodyExt_addForceAtPos_mut")] public static extern void RigidBodyExt_addForceAtPos_mut(PxRigidBody* body_pod, PxVec3* force_pod, PxVec3* pos_pod, uint32 mode_pod, bool wakeup);
		[LinkName("PxRigidBodyExt_addForceAtLocalPos_mut")] public static extern void RigidBodyExt_addForceAtLocalPos_mut(PxRigidBody* body_pod, PxVec3* force_pod, PxVec3* pos_pod, uint32 mode_pod, bool wakeup);
		[LinkName("PxRigidBodyExt_addLocalForceAtPos_mut")] public static extern void RigidBodyExt_addLocalForceAtPos_mut(PxRigidBody* body_pod, PxVec3* force_pod, PxVec3* pos_pod, uint32 mode_pod, bool wakeup);
		[LinkName("PxRigidBodyExt_addLocalForceAtLocalPos_mut")] public static extern void RigidBodyExt_addLocalForceAtLocalPos_mut(PxRigidBody* body_pod, PxVec3* force_pod, PxVec3* pos_pod, uint32 mode_pod, bool wakeup);
		[LinkName("PxRigidBodyExt_getVelocityAtPos_mut")] public static extern PxVec3 RigidBodyExt_getVelocityAtPos_mut(PxRigidBody* body_pod, PxVec3* pos_pod);
		[LinkName("PxRigidBodyExt_getLocalVelocityAtLocalPos_mut")] public static extern PxVec3 RigidBodyExt_getLocalVelocityAtLocalPos_mut(PxRigidBody* body_pod, PxVec3* pos_pod);
		[LinkName("PxRigidBodyExt_getVelocityAtOffset_mut")] public static extern PxVec3 RigidBodyExt_getVelocityAtOffset_mut(PxRigidBody* body_pod, PxVec3* pos_pod);
		[LinkName("PxRigidBodyExt_linearSweepSingle_mut")] public static extern bool RigidBodyExt_linearSweepSingle_mut(PxRigidBody* body_pod, PxScene* scene_pod, PxVec3* unitDir_pod, float distance, PxHitFlags outputFlags_pod, PxSweepHit* closestHit_pod, uint32* shapeIndex_pod, PxQueryFilterData* filterData_pod, PxQueryFilterCallback* filterCall_pod, PxQueryCache* cache_pod, float inflation);
		[LinkName("PxRigidBodyExt_linearSweepMultiple_mut")] public static extern uint32 RigidBodyExt_linearSweepMultiple_mut(PxRigidBody* body_pod, PxScene* scene_pod, PxVec3* unitDir_pod, float distance, PxHitFlags outputFlags_pod, PxSweepHit* touchHitBuffer_pod, uint32* touchHitShapeIndices, uint32 touchHitBufferSize, PxSweepHit* block_pod, int32* blockingShapeIndex_pod, bool* overflow_pod, PxQueryFilterData* filterData_pod, PxQueryFilterCallback* filterCall_pod, PxQueryCache* cache_pod, float inflation);
		[LinkName("PxRigidBodyExt_computeVelocityDeltaFromImpulse_mut")] public static extern void RigidBodyExt_computeVelocityDeltaFromImpulse_mut(PxRigidBody* body_pod, PxVec3* impulsiveForce_pod, PxVec3* impulsiveTorque_pod, PxVec3* deltaLinearVelocity_pod, PxVec3* deltaAngularVelocity_pod);
		[LinkName("PxRigidBodyExt_computeVelocityDeltaFromImpulse_mut_1")] public static extern void RigidBodyExt_computeVelocityDeltaFromImpulse_mut_1(PxRigidBody* body_pod, PxTransform* globalPose_pod, PxVec3* point_pod, PxVec3* impulse_pod, float invMassScale, float invInertiaScale, PxVec3* deltaLinearVelocity_pod, PxVec3* deltaAngularVelocity_pod);
		[LinkName("PxRigidBodyExt_computeLinearAngularImpulse_mut")] public static extern void RigidBodyExt_computeLinearAngularImpulse_mut(PxRigidBody* body_pod, PxTransform* globalPose_pod, PxVec3* point_pod, PxVec3* impulse_pod, float invMassScale, float invInertiaScale, PxVec3* linearImpulse_pod, PxVec3* angularImpulse_pod);
		[LinkName("PxShapeExt_getGlobalPose_mut")] public static extern PxTransform ShapeExt_getGlobalPose_mut(PxShape* shape_pod, PxRigidActor* actor_pod);
		[LinkName("PxShapeExt_raycast_mut")] public static extern uint32 ShapeExt_raycast_mut(PxShape* shape_pod, PxRigidActor* actor_pod, PxVec3* rayOrigin_pod, PxVec3* rayDir_pod, float maxDist, PxHitFlags hitFlags_pod, uint32 maxHits, PxRaycastHit* rayHits_pod);
		[LinkName("PxShapeExt_overlap_mut")] public static extern bool ShapeExt_overlap_mut(PxShape* shape_pod, PxRigidActor* actor_pod, PxGeometry* otherGeom_pod, PxTransform* otherGeomPose_pod);
		[LinkName("PxShapeExt_sweep_mut")] public static extern bool ShapeExt_sweep_mut(PxShape* shape_pod, PxRigidActor* actor_pod, PxVec3* unitDir_pod, float distance, PxGeometry* otherGeom_pod, PxTransform* otherGeomPose_pod, PxSweepHit* sweepHit_pod, PxHitFlags hitFlags_pod);
		[LinkName("PxShapeExt_getWorldBounds_mut")] public static extern PxBounds3 ShapeExt_getWorldBounds_mut(PxShape* shape_pod, PxRigidActor* actor_pod, float inflation);
		[LinkName("PxMeshOverlapUtil_new_alloc")] public static extern PxMeshOverlapUtil* MeshOverlapUtil_new_alloc();
		[LinkName("PxMeshOverlapUtil_delete")] public static extern void MeshOverlapUtil_delete(PxMeshOverlapUtil* self__pod);
		[LinkName("PxMeshOverlapUtil_findOverlap_mut")] public static extern uint32 MeshOverlapUtil_findOverlap_mut(PxMeshOverlapUtil* self__pod, PxGeometry* geom_pod, PxTransform* geomPose_pod, PxTriangleMeshGeometry* meshGeom_pod, PxTransform* meshPose_pod);
		[LinkName("PxMeshOverlapUtil_findOverlap_mut_1")] public static extern uint32 MeshOverlapUtil_findOverlap_mut_1(PxMeshOverlapUtil* self__pod, PxGeometry* geom_pod, PxTransform* geomPose_pod, PxHeightFieldGeometry* hfGeom_pod, PxTransform* hfPose_pod);
		[LinkName("PxMeshOverlapUtil_getResults")] public static extern uint32* MeshOverlapUtil_getResults(PxMeshOverlapUtil* self__pod);
		[LinkName("PxMeshOverlapUtil_getNbResults")] public static extern uint32 MeshOverlapUtil_getNbResults(PxMeshOverlapUtil* self__pod);
		[LinkName("phys_PxComputeTriangleMeshPenetration")] public static extern bool ComputeTriangleMeshPenetration(PxVec3* direction_pod, float* depth_pod, PxGeometry* geom_pod, PxTransform* geomPose_pod, PxTriangleMeshGeometry* meshGeom_pod, PxTransform* meshPose_pod, uint32 maxIter, uint32* usedIter);
		[LinkName("phys_PxComputeHeightFieldPenetration")] public static extern bool ComputeHeightFieldPenetration(PxVec3* direction_pod, float* depth_pod, PxGeometry* geom_pod, PxTransform* geomPose_pod, PxHeightFieldGeometry* heightFieldGeom_pod, PxTransform* heightFieldPose_pod, uint32 maxIter, uint32* usedIter);
		[LinkName("PxXmlMiscParameter_new")] public static extern PxSerialization_PxXmlMiscParameter XmlMiscParameter_new();
		[LinkName("PxXmlMiscParameter_new_1")] public static extern PxSerialization_PxXmlMiscParameter XmlMiscParameter_new_1(PxVec3* inUpVector_pod, PxTolerancesScale inScale_pod);
		[LinkName("PxSerialization_isSerializable_mut")] public static extern bool Serialization_isSerializable_mut(PxCollection* collection_pod, PxSerializationRegistry* sr_pod, PxCollection* externalReferences_pod);
		[LinkName("PxSerialization_complete_mut")] public static extern void Serialization_complete_mut(PxCollection* collection_pod, PxSerializationRegistry* sr_pod, PxCollection* exceptFor_pod, bool followJoints);
		[LinkName("PxSerialization_createSerialObjectIds_mut")] public static extern void Serialization_createSerialObjectIds_mut(PxCollection* collection_pod, uint64 baseValue);
		[LinkName("PxSerialization_createCollectionFromXml_mut")] public static extern PxCollection* Serialization_createCollectionFromXml_mut(PxInputData* inputData_pod, PxCooking* cooking_pod, PxSerializationRegistry* sr_pod, PxCollection* externalRefs_pod, PxStringTable* stringTable_pod, PxSerialization_PxXmlMiscParameter* outArgs_pod);
		[LinkName("PxSerialization_createCollectionFromBinary_mut")] public static extern PxCollection* Serialization_createCollectionFromBinary_mut(void* memBlock, PxSerializationRegistry* sr_pod, PxCollection* externalRefs_pod);
		[LinkName("PxSerialization_serializeCollectionToXml_mut")] public static extern bool Serialization_serializeCollectionToXml_mut(PxOutputStream* outputStream_pod, PxCollection* collection_pod, PxSerializationRegistry* sr_pod, PxCooking* cooking_pod, PxCollection* externalRefs_pod, PxSerialization_PxXmlMiscParameter* inArgs_pod);
		[LinkName("PxSerialization_serializeCollectionToBinary_mut")] public static extern bool Serialization_serializeCollectionToBinary_mut(PxOutputStream* outputStream_pod, PxCollection* collection_pod, PxSerializationRegistry* sr_pod, PxCollection* externalRefs_pod, bool exportNames);
		[LinkName("PxSerialization_serializeCollectionToBinaryDeterministic_mut")] public static extern bool Serialization_serializeCollectionToBinaryDeterministic_mut(PxOutputStream* outputStream_pod, PxCollection* collection_pod, PxSerializationRegistry* sr_pod, PxCollection* externalRefs_pod, bool exportNames);
		[LinkName("PxSerialization_dumpBinaryMetaData_mut")] public static extern void Serialization_dumpBinaryMetaData_mut(PxOutputStream* outputStream_pod, PxSerializationRegistry* sr_pod);
		[LinkName("PxSerialization_createBinaryConverter_mut")] public static extern PxBinaryConverter* Serialization_createBinaryConverter_mut();
		[LinkName("PxSerialization_createSerializationRegistry_mut")] public static extern PxSerializationRegistry* Serialization_createSerializationRegistry_mut(PxPhysics* physics_pod);
		[LinkName("PxDefaultCpuDispatcher_release_mut")] public static extern void DefaultCpuDispatcher_release_mut(PxDefaultCpuDispatcher* self__pod);
		[LinkName("PxDefaultCpuDispatcher_setRunProfiled_mut")] public static extern void DefaultCpuDispatcher_setRunProfiled_mut(PxDefaultCpuDispatcher* self__pod, bool runProfiled);
		[LinkName("PxDefaultCpuDispatcher_getRunProfiled")] public static extern bool DefaultCpuDispatcher_getRunProfiled(PxDefaultCpuDispatcher* self__pod);
		[LinkName("phys_PxDefaultCpuDispatcherCreate")] public static extern PxDefaultCpuDispatcher* DefaultCpuDispatcherCreate(uint32 numThreads, uint32* affinityMasks);
		[LinkName("phys_PxBuildSmoothNormals")] public static extern bool BuildSmoothNormals(uint32 nbTris, uint32 nbVerts, PxVec3* verts_pod, uint32* dFaces, uint16* wFaces, PxVec3* normals_pod, bool flip);
		[LinkName("phys_PxCreateDynamic")] public static extern PxRigidDynamic* CreateDynamic(PxPhysics* sdk_pod, PxTransform* transform_pod, PxGeometry* geometry_pod, PxMaterial* material_pod, float density, PxTransform* shapeOffset_pod);
		[LinkName("phys_PxCreateDynamic_1")] public static extern PxRigidDynamic* CreateDynamic_1(PxPhysics* sdk_pod, PxTransform* transform_pod, PxShape* shape_pod, float density);
		[LinkName("phys_PxCreateKinematic")] public static extern PxRigidDynamic* CreateKinematic(PxPhysics* sdk_pod, PxTransform* transform_pod, PxGeometry* geometry_pod, PxMaterial* material_pod, float density, PxTransform* shapeOffset_pod);
		[LinkName("phys_PxCreateKinematic_1")] public static extern PxRigidDynamic* CreateKinematic_1(PxPhysics* sdk_pod, PxTransform* transform_pod, PxShape* shape_pod, float density);
		[LinkName("phys_PxCreateStatic")] public static extern PxRigidStatic* CreateStatic(PxPhysics* sdk_pod, PxTransform* transform_pod, PxGeometry* geometry_pod, PxMaterial* material_pod, PxTransform* shapeOffset_pod);
		[LinkName("phys_PxCreateStatic_1")] public static extern PxRigidStatic* CreateStatic_1(PxPhysics* sdk_pod, PxTransform* transform_pod, PxShape* shape_pod);
		[LinkName("phys_PxCreateStatic_2")] public static extern PxRigidStatic* CreateStatic_2(PxPhysics* sdk_pod, PxTransform* transform_pod, PxShape* shape_pod);
		[LinkName("phys_PxCloneShape")] public static extern PxShape* CloneShape(PxPhysics* physicsSDK_pod, PxShape* shape_pod, bool isExclusive);
		[LinkName("phys_PxCloneStatic")] public static extern PxRigidStatic* CloneStatic(PxPhysics* physicsSDK_pod, PxTransform* transform_pod, PxRigidActor* actor_pod);
		[LinkName("phys_PxCloneDynamic")] public static extern PxRigidDynamic* CloneDynamic(PxPhysics* physicsSDK_pod, PxTransform* transform_pod, PxRigidDynamic* body_pod);
		[LinkName("phys_PxCreatePlane")] public static extern PxRigidStatic* CreatePlane(PxPhysics* sdk_pod, PxPlane* plane_pod, PxMaterial* material_pod);
		[LinkName("phys_PxScaleRigidActor")] public static extern void ScaleRigidActor(PxRigidActor* actor_pod, float scale, bool scaleMassProps);
		[LinkName("PxStringTableExt_createStringTable_mut")] public static extern PxStringTable* StringTableExt_createStringTable_mut(PxAllocatorCallback* inAllocator_pod);
		[LinkName("PxBroadPhaseExt_createRegionsFromWorldBounds_mut")] public static extern uint32 BroadPhaseExt_createRegionsFromWorldBounds_mut(PxBounds3* regions_pod, PxBounds3* globalBounds_pod, uint32 nbSubdiv, uint32 upAxis);
		[LinkName("PxSceneQueryExt_raycastAny_mut")] public static extern bool SceneQueryExt_raycastAny_mut(PxScene* scene_pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryHit* hit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod);
		[LinkName("PxSceneQueryExt_raycastSingle_mut")] public static extern bool SceneQueryExt_raycastSingle_mut(PxScene* scene_pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryFlags outputFlags_pod, PxRaycastHit* hit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod);
		[LinkName("PxSceneQueryExt_raycastMultiple_mut")] public static extern int32 SceneQueryExt_raycastMultiple_mut(PxScene* scene_pod, PxVec3* origin_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryFlags outputFlags_pod, PxRaycastHit* hitBuffer_pod, uint32 hitBufferSize, bool* blockingHit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod);
		[LinkName("PxSceneQueryExt_sweepAny_mut")] public static extern bool SceneQueryExt_sweepAny_mut(PxScene* scene_pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryFlags queryFlags_pod, PxSceneQueryHit* hit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod, float inflation);
		[LinkName("PxSceneQueryExt_sweepSingle_mut")] public static extern bool SceneQueryExt_sweepSingle_mut(PxScene* scene_pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryFlags outputFlags_pod, PxSweepHit* hit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod, float inflation);
		[LinkName("PxSceneQueryExt_sweepMultiple_mut")] public static extern int32 SceneQueryExt_sweepMultiple_mut(PxScene* scene_pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxVec3* unitDir_pod, float distance, PxSceneQueryFlags outputFlags_pod, PxSweepHit* hitBuffer_pod, uint32 hitBufferSize, bool* blockingHit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod, PxSceneQueryCache* cache_pod, float inflation);
		[LinkName("PxSceneQueryExt_overlapMultiple_mut")] public static extern int32 SceneQueryExt_overlapMultiple_mut(PxScene* scene_pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxOverlapHit* hitBuffer_pod, uint32 hitBufferSize, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod);
		[LinkName("PxSceneQueryExt_overlapAny_mut")] public static extern bool SceneQueryExt_overlapAny_mut(PxScene* scene_pod, PxGeometry* geometry_pod, PxTransform* pose_pod, PxOverlapHit* hit_pod, PxSceneQueryFilterData* filterData_pod, PxSceneQueryFilterCallback* filterCall_pod);
		[LinkName("phys_PxInitExtensions")] public static extern bool InitExtensions(PxPhysics* physics_pod, PxPvd* pvd_pod);
		[LinkName("phys_PxCloseExtensions")] public static extern void CloseExtensions();
		[LinkName("phys_PxFindFaceIndex")] public static extern uint32 FindFaceIndex(PxConvexMeshGeometry* convexGeom_pod, PxTransform* geomPose_pod, PxVec3* impactPos_pod, PxVec3* unitDir_pod);
		[LinkName("PxBinaryConverter_release_mut")] public static extern void BinaryConverter_release_mut(PxBinaryConverter* self__pod);
		[LinkName("PxBinaryConverter_setReportMode_mut")] public static extern void BinaryConverter_setReportMode_mut(PxBinaryConverter* self__pod, uint32 mode_pod);
		[LinkName("PxBinaryConverter_setMetaData_mut")] public static extern bool BinaryConverter_setMetaData_mut(PxBinaryConverter* self__pod, PxInputStream* srcMetaData_pod, PxInputStream* dstMetaData_pod);
		[LinkName("PxBinaryConverter_compareMetaData")] public static extern bool BinaryConverter_compareMetaData(PxBinaryConverter* self__pod);
		[LinkName("PxBinaryConverter_convert_mut")] public static extern bool BinaryConverter_convert_mut(PxBinaryConverter* self__pod, PxInputStream* srcStream_pod, uint32 srcSize, PxOutputStream* targetStream_pod);
		[LinkName("PxRepXObject_new")] public static extern PxRepXObject RepXObject_new(char8* inTypeName, void* inSerializable, uint64 inId);
		[LinkName("PxRepXObject_isValid")] public static extern bool RepXObject_isValid(PxRepXObject* self__pod);
		[LinkName("PxRepXInstantiationArgs_new")] public static extern PxRepXInstantiationArgs RepXInstantiationArgs_new(PxPhysics* inPhysics_pod, PxCooking* inCooking_pod, PxStringTable* inStringTable_pod);
		[LinkName("PxRepXSerializer_getTypeName_mut")] public static extern char8* RepXSerializer_getTypeName_mut(PxRepXSerializer* self__pod);
		[LinkName("PxRepXSerializer_objectToFile_mut")] public static extern void RepXSerializer_objectToFile_mut(PxRepXSerializer* self__pod, PxRepXObject* inLiveObject_pod, PxCollection* inCollection_pod, XmlWriter* inWriter_pod, MemoryBuffer* inTempBuffer_pod, PxRepXInstantiationArgs* inArgs_pod);
		[LinkName("PxRepXSerializer_fileToObject_mut")] public static extern PxRepXObject RepXSerializer_fileToObject_mut(PxRepXSerializer* self__pod, XmlReader* inReader_pod, XmlMemoryAllocator* inAllocator_pod, PxRepXInstantiationArgs* inArgs_pod, PxCollection* inCollection_pod);
		[LinkName("phys_PxCreateRepXObject")] public static extern PxRepXObject CreateRepXObject(PxBase* inType_pod, uint64 inId);
		[LinkName("phys_PxInitVehicleSDK")] public static extern bool InitVehicleSDK(PxPhysics* physics_pod, PxSerializationRegistry* serializationRegistry_pod);
		[LinkName("phys_PxCloseVehicleSDK")] public static extern void CloseVehicleSDK(PxSerializationRegistry* serializationRegistry_pod);
		[LinkName("phys_PxVehicleSetBasisVectors")] public static extern void VehicleSetBasisVectors(PxVec3* up_pod, PxVec3* forward_pod);
		[LinkName("phys_PxVehicleSetUpdateMode")] public static extern void VehicleSetUpdateMode(uint32 vehicleUpdateMode_pod);
		[LinkName("phys_PxVehicleSetSweepHitRejectionAngles")] public static extern void VehicleSetSweepHitRejectionAngles(float pointRejectAngle, float normalRejectAngle);
		[LinkName("phys_PxVehicleSetMaxHitActorAcceleration")] public static extern void VehicleSetMaxHitActorAcceleration(float maxHitActorAcceleration);
		[LinkName("PxVehicleChassisData_new")] public static extern PxVehicleChassisData VehicleChassisData_new();
		[LinkName("PxVehicleEngineData_new")] public static extern PxVehicleEngineData VehicleEngineData_new();
		[LinkName("PxVehicleEngineData_getRecipMOI")] public static extern float VehicleEngineData_getRecipMOI(PxVehicleEngineData* self__pod);
		[LinkName("PxVehicleEngineData_getRecipMaxOmega")] public static extern float VehicleEngineData_getRecipMaxOmega(PxVehicleEngineData* self__pod);
		[LinkName("PxVehicleEngineData_new_1")] public static extern PxVehicleEngineData VehicleEngineData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleEngineData_delete")] public static extern void VehicleEngineData_delete(PxVehicleEngineData* self__pod);
		[LinkName("PxVehicleGearsData_new")] public static extern PxVehicleGearsData VehicleGearsData_new();
		[LinkName("PxVehicleGearsData_new_1")] public static extern PxVehicleGearsData VehicleGearsData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleGearsData_getGearRatio")] public static extern float VehicleGearsData_getGearRatio(PxVehicleGearsData* self__pod, uint32 a_pod);
		[LinkName("PxVehicleGearsData_setGearRatio_mut")] public static extern void VehicleGearsData_setGearRatio_mut(PxVehicleGearsData* self__pod, uint32 a_pod, float ratio);
		[LinkName("PxVehicleAutoBoxData_new")] public static extern PxVehicleAutoBoxData VehicleAutoBoxData_new();
		[LinkName("PxVehicleAutoBoxData_setLatency_mut")] public static extern void VehicleAutoBoxData_setLatency_mut(PxVehicleAutoBoxData* self__pod, float latency);
		[LinkName("PxVehicleAutoBoxData_getLatency")] public static extern float VehicleAutoBoxData_getLatency(PxVehicleAutoBoxData* self__pod);
		[LinkName("PxVehicleAutoBoxData_new_1")] public static extern PxVehicleAutoBoxData VehicleAutoBoxData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleAutoBoxData_getUpRatios")] public static extern float VehicleAutoBoxData_getUpRatios(PxVehicleAutoBoxData* self__pod, uint32 a_pod);
		[LinkName("PxVehicleAutoBoxData_setUpRatios_mut")] public static extern void VehicleAutoBoxData_setUpRatios_mut(PxVehicleAutoBoxData* self__pod, uint32 a_pod, float ratio);
		[LinkName("PxVehicleAutoBoxData_getDownRatios")] public static extern float VehicleAutoBoxData_getDownRatios(PxVehicleAutoBoxData* self__pod, uint32 a_pod);
		[LinkName("PxVehicleAutoBoxData_setDownRatios_mut")] public static extern void VehicleAutoBoxData_setDownRatios_mut(PxVehicleAutoBoxData* self__pod, uint32 a_pod, float ratio);
		[LinkName("PxVehicleDifferential4WData_new")] public static extern PxVehicleDifferential4WData VehicleDifferential4WData_new();
		[LinkName("PxVehicleDifferential4WData_new_1")] public static extern PxVehicleDifferential4WData VehicleDifferential4WData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDifferentialNWData_new")] public static extern PxVehicleDifferentialNWData VehicleDifferentialNWData_new();
		[LinkName("PxVehicleDifferentialNWData_setDrivenWheel_mut")] public static extern void VehicleDifferentialNWData_setDrivenWheel_mut(PxVehicleDifferentialNWData* self__pod, uint32 wheelId, bool drivenState);
		[LinkName("PxVehicleDifferentialNWData_getIsDrivenWheel")] public static extern bool VehicleDifferentialNWData_getIsDrivenWheel(PxVehicleDifferentialNWData* self__pod, uint32 wheelId);
		[LinkName("PxVehicleDifferentialNWData_new_1")] public static extern PxVehicleDifferentialNWData VehicleDifferentialNWData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDifferentialNWData_getDrivenWheelStatus")] public static extern uint32 VehicleDifferentialNWData_getDrivenWheelStatus(PxVehicleDifferentialNWData* self__pod);
		[LinkName("PxVehicleDifferentialNWData_setDrivenWheelStatus_mut")] public static extern void VehicleDifferentialNWData_setDrivenWheelStatus_mut(PxVehicleDifferentialNWData* self__pod, uint32 status);
		[LinkName("PxVehicleAckermannGeometryData_new")] public static extern PxVehicleAckermannGeometryData VehicleAckermannGeometryData_new();
		[LinkName("PxVehicleAckermannGeometryData_new_1")] public static extern PxVehicleAckermannGeometryData VehicleAckermannGeometryData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleClutchData_new")] public static extern PxVehicleClutchData VehicleClutchData_new();
		[LinkName("PxVehicleClutchData_new_1")] public static extern PxVehicleClutchData VehicleClutchData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleTireLoadFilterData_new")] public static extern PxVehicleTireLoadFilterData VehicleTireLoadFilterData_new();
		[LinkName("PxVehicleTireLoadFilterData_getDenominator")] public static extern float VehicleTireLoadFilterData_getDenominator(PxVehicleTireLoadFilterData* self__pod);
		[LinkName("PxVehicleTireLoadFilterData_new_1")] public static extern PxVehicleTireLoadFilterData VehicleTireLoadFilterData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleWheelData_new")] public static extern PxVehicleWheelData VehicleWheelData_new();
		[LinkName("PxVehicleWheelData_getRecipRadius")] public static extern float VehicleWheelData_getRecipRadius(PxVehicleWheelData* self__pod);
		[LinkName("PxVehicleWheelData_getRecipMOI")] public static extern float VehicleWheelData_getRecipMOI(PxVehicleWheelData* self__pod);
		[LinkName("PxVehicleSuspensionData_new")] public static extern PxVehicleSuspensionData VehicleSuspensionData_new();
		[LinkName("PxVehicleSuspensionData_getRecipMaxCompression")] public static extern float VehicleSuspensionData_getRecipMaxCompression(PxVehicleSuspensionData* self__pod);
		[LinkName("PxVehicleSuspensionData_getRecipMaxDroop")] public static extern float VehicleSuspensionData_getRecipMaxDroop(PxVehicleSuspensionData* self__pod);
		[LinkName("PxVehicleSuspensionData_setMassAndPreserveNaturalFrequency_mut")] public static extern void VehicleSuspensionData_setMassAndPreserveNaturalFrequency_mut(PxVehicleSuspensionData* self__pod, float newSprungMass);
		[LinkName("PxVehicleAntiRollBarData_new")] public static extern PxVehicleAntiRollBarData VehicleAntiRollBarData_new();
		[LinkName("PxVehicleTireData_new")] public static extern PxVehicleTireData VehicleTireData_new();
		[LinkName("PxVehicleTireData_getRecipLongitudinalStiffnessPerUnitGravity")] public static extern float VehicleTireData_getRecipLongitudinalStiffnessPerUnitGravity(PxVehicleTireData* self__pod);
		[LinkName("PxVehicleTireData_getFrictionVsSlipGraphRecipx1Minusx0")] public static extern float VehicleTireData_getFrictionVsSlipGraphRecipx1Minusx0(PxVehicleTireData* self__pod);
		[LinkName("PxVehicleTireData_getFrictionVsSlipGraphRecipx2Minusx1")] public static extern float VehicleTireData_getFrictionVsSlipGraphRecipx2Minusx1(PxVehicleTireData* self__pod);
		[LinkName("PxVehicleWheelsSimData_allocate_mut")] public static extern PxVehicleWheelsSimData* VehicleWheelsSimData_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleWheelsSimData_setChassisMass_mut")] public static extern void VehicleWheelsSimData_setChassisMass_mut(PxVehicleWheelsSimData* self__pod, float chassisMass);
		[LinkName("PxVehicleWheelsSimData_free_mut")] public static extern void VehicleWheelsSimData_free_mut(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_copy_mut")] public static extern void VehicleWheelsSimData_copy_mut(PxVehicleWheelsSimData* self__pod, PxVehicleWheelsSimData* src_pod, uint32 srcWheel, uint32 trgWheel);
		[LinkName("PxVehicleWheelsSimData_getNbWheels")] public static extern uint32 VehicleWheelsSimData_getNbWheels(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getSuspensionData")] public static extern PxVehicleSuspensionData* VehicleWheelsSimData_getSuspensionData(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getWheelData")] public static extern PxVehicleWheelData* VehicleWheelsSimData_getWheelData(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getTireData")] public static extern PxVehicleTireData* VehicleWheelsSimData_getTireData(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getSuspTravelDirection")] public static extern PxVec3* VehicleWheelsSimData_getSuspTravelDirection(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getSuspForceAppPointOffset")] public static extern PxVec3* VehicleWheelsSimData_getSuspForceAppPointOffset(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getTireForceAppPointOffset")] public static extern PxVec3* VehicleWheelsSimData_getTireForceAppPointOffset(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getWheelCentreOffset")] public static extern PxVec3* VehicleWheelsSimData_getWheelCentreOffset(PxVehicleWheelsSimData* self__pod, uint32 id);
		[LinkName("PxVehicleWheelsSimData_getWheelShapeMapping")] public static extern int32 VehicleWheelsSimData_getWheelShapeMapping(PxVehicleWheelsSimData* self__pod, uint32 wheelId);
		[LinkName("PxVehicleWheelsSimData_getSceneQueryFilterData")] public static extern PxFilterData* VehicleWheelsSimData_getSceneQueryFilterData(PxVehicleWheelsSimData* self__pod, uint32 suspId);
		[LinkName("PxVehicleWheelsSimData_getNbAntiRollBars")] public static extern uint32 VehicleWheelsSimData_getNbAntiRollBars(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getAntiRollBarData")] public static extern PxVehicleAntiRollBarData* VehicleWheelsSimData_getAntiRollBarData(PxVehicleWheelsSimData* self__pod, uint32 antiRollId);
		[LinkName("PxVehicleWheelsSimData_getTireLoadFilterData")] public static extern PxVehicleTireLoadFilterData* VehicleWheelsSimData_getTireLoadFilterData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setSuspensionData_mut")] public static extern void VehicleWheelsSimData_setSuspensionData_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVehicleSuspensionData* susp_pod);
		[LinkName("PxVehicleWheelsSimData_setWheelData_mut")] public static extern void VehicleWheelsSimData_setWheelData_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVehicleWheelData* wheel_pod);
		[LinkName("PxVehicleWheelsSimData_setTireData_mut")] public static extern void VehicleWheelsSimData_setTireData_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVehicleTireData* tire_pod);
		[LinkName("PxVehicleWheelsSimData_setSuspTravelDirection_mut")] public static extern void VehicleWheelsSimData_setSuspTravelDirection_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVec3* dir_pod);
		[LinkName("PxVehicleWheelsSimData_setSuspForceAppPointOffset_mut")] public static extern void VehicleWheelsSimData_setSuspForceAppPointOffset_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVec3* offset_pod);
		[LinkName("PxVehicleWheelsSimData_setTireForceAppPointOffset_mut")] public static extern void VehicleWheelsSimData_setTireForceAppPointOffset_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVec3* offset_pod);
		[LinkName("PxVehicleWheelsSimData_setWheelCentreOffset_mut")] public static extern void VehicleWheelsSimData_setWheelCentreOffset_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVec3* offset_pod);
		[LinkName("PxVehicleWheelsSimData_setWheelShapeMapping_mut")] public static extern void VehicleWheelsSimData_setWheelShapeMapping_mut(PxVehicleWheelsSimData* self__pod, uint32 wheelId, int32 shapeId);
		[LinkName("PxVehicleWheelsSimData_setSceneQueryFilterData_mut")] public static extern void VehicleWheelsSimData_setSceneQueryFilterData_mut(PxVehicleWheelsSimData* self__pod, uint32 suspId, PxFilterData* sqFilterData_pod);
		[LinkName("PxVehicleWheelsSimData_setTireLoadFilterData_mut")] public static extern void VehicleWheelsSimData_setTireLoadFilterData_mut(PxVehicleWheelsSimData* self__pod, PxVehicleTireLoadFilterData* tireLoadFilter_pod);
		[LinkName("PxVehicleWheelsSimData_addAntiRollBarData_mut")] public static extern uint32 VehicleWheelsSimData_addAntiRollBarData_mut(PxVehicleWheelsSimData* self__pod, PxVehicleAntiRollBarData* antiRoll_pod);
		[LinkName("PxVehicleWheelsSimData_disableWheel_mut")] public static extern void VehicleWheelsSimData_disableWheel_mut(PxVehicleWheelsSimData* self__pod, uint32 wheel);
		[LinkName("PxVehicleWheelsSimData_enableWheel_mut")] public static extern void VehicleWheelsSimData_enableWheel_mut(PxVehicleWheelsSimData* self__pod, uint32 wheel);
		[LinkName("PxVehicleWheelsSimData_getIsWheelDisabled")] public static extern bool VehicleWheelsSimData_getIsWheelDisabled(PxVehicleWheelsSimData* self__pod, uint32 wheel);
		[LinkName("PxVehicleWheelsSimData_setSubStepCount_mut")] public static extern void VehicleWheelsSimData_setSubStepCount_mut(PxVehicleWheelsSimData* self__pod, float thresholdLongitudinalSpeed, uint32 lowForwardSpeedSubStepCount, uint32 highForwardSpeedSubStepCount);
		[LinkName("PxVehicleWheelsSimData_setMinLongSlipDenominator_mut")] public static extern void VehicleWheelsSimData_setMinLongSlipDenominator_mut(PxVehicleWheelsSimData* self__pod, float minLongSlipDenominator);
		[LinkName("PxVehicleWheelsSimData_new_alloc")] public static extern PxVehicleWheelsSimData* VehicleWheelsSimData_new_alloc(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleWheelsSimData_getBinaryMetaData_mut")] public static extern void VehicleWheelsSimData_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleWheelsSimData_getNbWheels4")] public static extern uint32 VehicleWheelsSimData_getNbWheels4(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbSuspensionData")] public static extern uint32 VehicleWheelsSimData_getNbSuspensionData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbWheelData")] public static extern uint32 VehicleWheelsSimData_getNbWheelData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbSuspTravelDirection")] public static extern uint32 VehicleWheelsSimData_getNbSuspTravelDirection(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbTireData")] public static extern uint32 VehicleWheelsSimData_getNbTireData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbSuspForceAppPointOffset")] public static extern uint32 VehicleWheelsSimData_getNbSuspForceAppPointOffset(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbTireForceAppPointOffset")] public static extern uint32 VehicleWheelsSimData_getNbTireForceAppPointOffset(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbWheelCentreOffset")] public static extern uint32 VehicleWheelsSimData_getNbWheelCentreOffset(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbWheelShapeMapping")] public static extern uint32 VehicleWheelsSimData_getNbWheelShapeMapping(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbSceneQueryFilterData")] public static extern uint32 VehicleWheelsSimData_getNbSceneQueryFilterData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getMinLongSlipDenominator")] public static extern float VehicleWheelsSimData_getMinLongSlipDenominator(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setThresholdLongSpeed_mut")] public static extern void VehicleWheelsSimData_setThresholdLongSpeed_mut(PxVehicleWheelsSimData* self__pod, float f);
		[LinkName("PxVehicleWheelsSimData_getThresholdLongSpeed")] public static extern float VehicleWheelsSimData_getThresholdLongSpeed(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setLowForwardSpeedSubStepCount_mut")] public static extern void VehicleWheelsSimData_setLowForwardSpeedSubStepCount_mut(PxVehicleWheelsSimData* self__pod, uint32 f);
		[LinkName("PxVehicleWheelsSimData_getLowForwardSpeedSubStepCount")] public static extern uint32 VehicleWheelsSimData_getLowForwardSpeedSubStepCount(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setHighForwardSpeedSubStepCount_mut")] public static extern void VehicleWheelsSimData_setHighForwardSpeedSubStepCount_mut(PxVehicleWheelsSimData* self__pod, uint32 f);
		[LinkName("PxVehicleWheelsSimData_getHighForwardSpeedSubStepCount")] public static extern uint32 VehicleWheelsSimData_getHighForwardSpeedSubStepCount(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setWheelEnabledState_mut")] public static extern void VehicleWheelsSimData_setWheelEnabledState_mut(PxVehicleWheelsSimData* self__pod, uint32 wheel, bool state);
		[LinkName("PxVehicleWheelsSimData_getWheelEnabledState")] public static extern bool VehicleWheelsSimData_getWheelEnabledState(PxVehicleWheelsSimData* self__pod, uint32 wheel);
		[LinkName("PxVehicleWheelsSimData_getNbWheelEnabledState")] public static extern uint32 VehicleWheelsSimData_getNbWheelEnabledState(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbAntiRollBars4")] public static extern uint32 VehicleWheelsSimData_getNbAntiRollBars4(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_getNbAntiRollBarData")] public static extern uint32 VehicleWheelsSimData_getNbAntiRollBarData(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsSimData_setAntiRollBarData_mut")] public static extern void VehicleWheelsSimData_setAntiRollBarData_mut(PxVehicleWheelsSimData* self__pod, uint32 id, PxVehicleAntiRollBarData* antiRoll_pod);
		[LinkName("PxVehicleWheelsSimData_new_alloc_1")] public static extern PxVehicleWheelsSimData* VehicleWheelsSimData_new_alloc_1();
		[LinkName("PxVehicleWheelsSimData_delete")] public static extern void VehicleWheelsSimData_delete(PxVehicleWheelsSimData* self__pod);
		[LinkName("PxVehicleWheelsDynData_new_alloc")] public static extern PxVehicleWheelsDynData* VehicleWheelsDynData_new_alloc();
		[LinkName("PxVehicleWheelsDynData_delete")] public static extern void VehicleWheelsDynData_delete(PxVehicleWheelsDynData* self__pod);
		[LinkName("PxVehicleWheelsDynData_setToRestState_mut")] public static extern void VehicleWheelsDynData_setToRestState_mut(PxVehicleWheelsDynData* self__pod);
		[LinkName("PxVehicleWheelsDynData_setTireForceShaderFunction_mut")] public static extern void VehicleWheelsDynData_setTireForceShaderFunction_mut(PxVehicleWheelsDynData* self__pod, void* tireForceShaderFn_pod);
		[LinkName("PxVehicleWheelsDynData_setTireForceShaderData_mut")] public static extern void VehicleWheelsDynData_setTireForceShaderData_mut(PxVehicleWheelsDynData* self__pod, uint32 tireId, void* tireForceShaderData);
		[LinkName("PxVehicleWheelsDynData_getTireForceShaderData")] public static extern void* VehicleWheelsDynData_getTireForceShaderData(PxVehicleWheelsDynData* self__pod, uint32 tireId);
		[LinkName("PxVehicleWheelsDynData_setWheelRotationSpeed_mut")] public static extern void VehicleWheelsDynData_setWheelRotationSpeed_mut(PxVehicleWheelsDynData* self__pod, uint32 wheelIdx, float speed);
		[LinkName("PxVehicleWheelsDynData_getWheelRotationSpeed")] public static extern float VehicleWheelsDynData_getWheelRotationSpeed(PxVehicleWheelsDynData* self__pod, uint32 wheelIdx);
		[LinkName("PxVehicleWheelsDynData_setWheelRotationAngle_mut")] public static extern void VehicleWheelsDynData_setWheelRotationAngle_mut(PxVehicleWheelsDynData* self__pod, uint32 wheelIdx, float angle);
		[LinkName("PxVehicleWheelsDynData_getWheelRotationAngle")] public static extern float VehicleWheelsDynData_getWheelRotationAngle(PxVehicleWheelsDynData* self__pod, uint32 wheelIdx);
		[LinkName("PxVehicleWheelsDynData_setUserData_mut")] public static extern void VehicleWheelsDynData_setUserData_mut(PxVehicleWheelsDynData* self__pod, uint32 tireIdx, void* userData);
		[LinkName("PxVehicleWheelsDynData_getUserData")] public static extern void* VehicleWheelsDynData_getUserData(PxVehicleWheelsDynData* self__pod, uint32 tireIdx);
		[LinkName("PxVehicleWheelsDynData_copy_mut")] public static extern void VehicleWheelsDynData_copy_mut(PxVehicleWheelsDynData* self__pod, PxVehicleWheelsDynData* src_pod, uint32 srcWheel, uint32 trgWheel);
		[LinkName("PxVehicleWheelsDynData_getBinaryMetaData_mut")] public static extern void VehicleWheelsDynData_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleWheelsDynData_getNbWheelRotationSpeed")] public static extern uint32 VehicleWheelsDynData_getNbWheelRotationSpeed(PxVehicleWheelsDynData* self__pod);
		[LinkName("PxVehicleWheelsDynData_getNbWheelRotationAngle")] public static extern uint32 VehicleWheelsDynData_getNbWheelRotationAngle(PxVehicleWheelsDynData* self__pod);
		[LinkName("PxVehicleWheelsDynData_getWheel4DynData")] public static extern PxVehicleWheels4DynData* VehicleWheelsDynData_getWheel4DynData(PxVehicleWheelsDynData* self__pod);
		[LinkName("PxVehicleWheels_getVehicleType")] public static extern uint32 VehicleWheels_getVehicleType(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_getRigidDynamicActor_mut")] public static extern PxRigidDynamic* VehicleWheels_getRigidDynamicActor_mut(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_getRigidDynamicActor")] public static extern PxRigidDynamic* VehicleWheels_getRigidDynamicActor(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_computeForwardSpeed")] public static extern float VehicleWheels_computeForwardSpeed(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_computeSidewaysSpeed")] public static extern float VehicleWheels_computeSidewaysSpeed(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_requiresObjects_mut")] public static extern void VehicleWheels_requiresObjects_mut(PxVehicleWheels* self__pod, PxProcessPxBaseCallback* c_pod);
		[LinkName("PxVehicleWheels_getConcreteTypeName")] public static extern char8* VehicleWheels_getConcreteTypeName(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_isKindOf")] public static extern bool VehicleWheels_isKindOf(PxVehicleWheels* self__pod, char8* name);
		[LinkName("PxVehicleWheels_preExportDataReset_mut")] public static extern void VehicleWheels_preExportDataReset_mut(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_exportExtraData_mut")] public static extern void VehicleWheels_exportExtraData_mut(PxVehicleWheels* self__pod, PxSerializationContext* anonymous_arg0_pod);
		[LinkName("PxVehicleWheels_importExtraData_mut")] public static extern void VehicleWheels_importExtraData_mut(PxVehicleWheels* self__pod, PxDeserializationContext* anonymous_arg0_pod);
		[LinkName("PxVehicleWheels_resolveReferences_mut")] public static extern void VehicleWheels_resolveReferences_mut(PxVehicleWheels* self__pod, PxDeserializationContext* anonymous_arg0_pod);
		[LinkName("PxVehicleWheels_getBinaryMetaData_mut")] public static extern void VehicleWheels_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleWheels_getNbNonDrivenWheels")] public static extern uint32 VehicleWheels_getNbNonDrivenWheels(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleWheels_new_alloc")] public static extern PxVehicleWheels* VehicleWheels_new_alloc(uint16 concreteType, PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleWheels_new_alloc_1")] public static extern PxVehicleWheels* VehicleWheels_new_alloc_1(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleWheels_release_mut")] public static extern void VehicleWheels_release_mut(PxVehicleWheels* self__pod);
		[LinkName("PxVehicleDriveSimData_getEngineData")] public static extern PxVehicleEngineData* VehicleDriveSimData_getEngineData(PxVehicleDriveSimData* self__pod);
		[LinkName("PxVehicleDriveSimData_setEngineData_mut")] public static extern void VehicleDriveSimData_setEngineData_mut(PxVehicleDriveSimData* self__pod, PxVehicleEngineData* engine_pod);
		[LinkName("PxVehicleDriveSimData_getGearsData")] public static extern PxVehicleGearsData* VehicleDriveSimData_getGearsData(PxVehicleDriveSimData* self__pod);
		[LinkName("PxVehicleDriveSimData_setGearsData_mut")] public static extern void VehicleDriveSimData_setGearsData_mut(PxVehicleDriveSimData* self__pod, PxVehicleGearsData* gears_pod);
		[LinkName("PxVehicleDriveSimData_getClutchData")] public static extern PxVehicleClutchData* VehicleDriveSimData_getClutchData(PxVehicleDriveSimData* self__pod);
		[LinkName("PxVehicleDriveSimData_setClutchData_mut")] public static extern void VehicleDriveSimData_setClutchData_mut(PxVehicleDriveSimData* self__pod, PxVehicleClutchData* clutch_pod);
		[LinkName("PxVehicleDriveSimData_getAutoBoxData")] public static extern PxVehicleAutoBoxData* VehicleDriveSimData_getAutoBoxData(PxVehicleDriveSimData* self__pod);
		[LinkName("PxVehicleDriveSimData_setAutoBoxData_mut")] public static extern void VehicleDriveSimData_setAutoBoxData_mut(PxVehicleDriveSimData* self__pod, PxVehicleAutoBoxData* autobox_pod);
		[LinkName("PxVehicleDriveSimData_new")] public static extern PxVehicleDriveSimData VehicleDriveSimData_new();
		[LinkName("PxVehicleDriveSimData_new_1")] public static extern PxVehicleDriveSimData VehicleDriveSimData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDriveSimData_getBinaryMetaData_mut")] public static extern void VehicleDriveSimData_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDriveSimData_delete")] public static extern void VehicleDriveSimData_delete(PxVehicleDriveSimData* self__pod);
		[LinkName("PxVehicleDriveDynData_setToRestState_mut")] public static extern void VehicleDriveDynData_setToRestState_mut(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setAnalogInput_mut")] public static extern void VehicleDriveDynData_setAnalogInput_mut(PxVehicleDriveDynData* self__pod, uint32 type, float analogVal);
		[LinkName("PxVehicleDriveDynData_getAnalogInput")] public static extern float VehicleDriveDynData_getAnalogInput(PxVehicleDriveDynData* self__pod, uint32 type);
		[LinkName("PxVehicleDriveDynData_setGearUp_mut")] public static extern void VehicleDriveDynData_setGearUp_mut(PxVehicleDriveDynData* self__pod, bool digitalVal);
		[LinkName("PxVehicleDriveDynData_setGearDown_mut")] public static extern void VehicleDriveDynData_setGearDown_mut(PxVehicleDriveDynData* self__pod, bool digitalVal);
		[LinkName("PxVehicleDriveDynData_getGearUp")] public static extern bool VehicleDriveDynData_getGearUp(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_getGearDown")] public static extern bool VehicleDriveDynData_getGearDown(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setUseAutoGears_mut")] public static extern void VehicleDriveDynData_setUseAutoGears_mut(PxVehicleDriveDynData* self__pod, bool useAutoGears);
		[LinkName("PxVehicleDriveDynData_getUseAutoGears")] public static extern bool VehicleDriveDynData_getUseAutoGears(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_toggleAutoGears_mut")] public static extern void VehicleDriveDynData_toggleAutoGears_mut(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setCurrentGear_mut")] public static extern void VehicleDriveDynData_setCurrentGear_mut(PxVehicleDriveDynData* self__pod, uint32 currentGear);
		[LinkName("PxVehicleDriveDynData_getCurrentGear")] public static extern uint32 VehicleDriveDynData_getCurrentGear(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setTargetGear_mut")] public static extern void VehicleDriveDynData_setTargetGear_mut(PxVehicleDriveDynData* self__pod, uint32 targetGear);
		[LinkName("PxVehicleDriveDynData_getTargetGear")] public static extern uint32 VehicleDriveDynData_getTargetGear(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_startGearChange_mut")] public static extern void VehicleDriveDynData_startGearChange_mut(PxVehicleDriveDynData* self__pod, uint32 targetGear);
		[LinkName("PxVehicleDriveDynData_forceGearChange_mut")] public static extern void VehicleDriveDynData_forceGearChange_mut(PxVehicleDriveDynData* self__pod, uint32 targetGear);
		[LinkName("PxVehicleDriveDynData_setEngineRotationSpeed_mut")] public static extern void VehicleDriveDynData_setEngineRotationSpeed_mut(PxVehicleDriveDynData* self__pod, float speed);
		[LinkName("PxVehicleDriveDynData_getEngineRotationSpeed")] public static extern float VehicleDriveDynData_getEngineRotationSpeed(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_getGearSwitchTime")] public static extern float VehicleDriveDynData_getGearSwitchTime(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_getAutoBoxSwitchTime")] public static extern float VehicleDriveDynData_getAutoBoxSwitchTime(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_new")] public static extern PxVehicleDriveDynData VehicleDriveDynData_new();
		[LinkName("PxVehicleDriveDynData_new_1")] public static extern PxVehicleDriveDynData VehicleDriveDynData_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDriveDynData_getNbAnalogInput")] public static extern uint32 VehicleDriveDynData_getNbAnalogInput(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setGearChange_mut")] public static extern void VehicleDriveDynData_setGearChange_mut(PxVehicleDriveDynData* self__pod, uint32 gearChange);
		[LinkName("PxVehicleDriveDynData_getGearChange")] public static extern uint32 VehicleDriveDynData_getGearChange(PxVehicleDriveDynData* self__pod);
		[LinkName("PxVehicleDriveDynData_setGearSwitchTime_mut")] public static extern void VehicleDriveDynData_setGearSwitchTime_mut(PxVehicleDriveDynData* self__pod, float switchTime);
		[LinkName("PxVehicleDriveDynData_setAutoBoxSwitchTime_mut")] public static extern void VehicleDriveDynData_setAutoBoxSwitchTime_mut(PxVehicleDriveDynData* self__pod, float autoBoxSwitchTime);
		[LinkName("PxVehicleDrive_getBinaryMetaData_mut")] public static extern void VehicleDrive_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDrive_new_alloc")] public static extern PxVehicleDrive* VehicleDrive_new_alloc(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleDrive_getConcreteTypeName")] public static extern char8* VehicleDrive_getConcreteTypeName(PxVehicleDrive* self__pod);
		[LinkName("PxVehicleDriveSimData4W_new")] public static extern PxVehicleDriveSimData4W VehicleDriveSimData4W_new();
		[LinkName("PxVehicleDriveSimData4W_getDiffData")] public static extern PxVehicleDifferential4WData* VehicleDriveSimData4W_getDiffData(PxVehicleDriveSimData4W* self__pod);
		[LinkName("PxVehicleDriveSimData4W_getAckermannGeometryData")] public static extern PxVehicleAckermannGeometryData* VehicleDriveSimData4W_getAckermannGeometryData(PxVehicleDriveSimData4W* self__pod);
		[LinkName("PxVehicleDriveSimData4W_setDiffData_mut")] public static extern void VehicleDriveSimData4W_setDiffData_mut(PxVehicleDriveSimData4W* self__pod, PxVehicleDifferential4WData* diff_pod);
		[LinkName("PxVehicleDriveSimData4W_setAckermannGeometryData_mut")] public static extern void VehicleDriveSimData4W_setAckermannGeometryData_mut(PxVehicleDriveSimData4W* self__pod, PxVehicleAckermannGeometryData* ackermannData_pod);
		[LinkName("PxVehicleDriveSimData4W_new_1")] public static extern PxVehicleDriveSimData4W VehicleDriveSimData4W_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDriveSimData4W_getBinaryMetaData_mut")] public static extern void VehicleDriveSimData4W_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDriveSimData4W_delete")] public static extern void VehicleDriveSimData4W_delete(PxVehicleDriveSimData4W* self__pod);
		[LinkName("PxVehicleDrive4W_allocate_mut")] public static extern PxVehicleDrive4W* VehicleDrive4W_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleDrive4W_free_mut")] public static extern void VehicleDrive4W_free_mut(PxVehicleDrive4W* self__pod);
		[LinkName("PxVehicleDrive4W_setup_mut")] public static extern void VehicleDrive4W_setup_mut(PxVehicleDrive4W* self__pod, PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimData4W* driveData_pod, uint32 nbNonDrivenWheels);
		[LinkName("PxVehicleDrive4W_create_mut")] public static extern PxVehicleDrive4W* VehicleDrive4W_create_mut(PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimData4W* driveData_pod, uint32 nbNonDrivenWheels);
		[LinkName("PxVehicleDrive4W_setToRestState_mut")] public static extern void VehicleDrive4W_setToRestState_mut(PxVehicleDrive4W* self__pod);
		[LinkName("PxVehicleDrive4W_createObject_mut")] public static extern PxVehicleDrive4W* VehicleDrive4W_createObject_mut(uint8** address_pod, PxDeserializationContext* context_pod);
		[LinkName("PxVehicleDrive4W_getBinaryMetaData_mut")] public static extern void VehicleDrive4W_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDrive4W_new_alloc")] public static extern PxVehicleDrive4W* VehicleDrive4W_new_alloc(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleDrive4W_getConcreteTypeName")] public static extern char8* VehicleDrive4W_getConcreteTypeName(PxVehicleDrive4W* self__pod);
		[LinkName("PxVehicleDriveTank_allocate_mut")] public static extern PxVehicleDriveTank* VehicleDriveTank_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleDriveTank_free_mut")] public static extern void VehicleDriveTank_free_mut(PxVehicleDriveTank* self__pod);
		[LinkName("PxVehicleDriveTank_setup_mut")] public static extern void VehicleDriveTank_setup_mut(PxVehicleDriveTank* self__pod, PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimData* driveData_pod, uint32 nbDrivenWheels);
		[LinkName("PxVehicleDriveTank_create_mut")] public static extern PxVehicleDriveTank* VehicleDriveTank_create_mut(PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimData* driveData_pod, uint32 nbDrivenWheels);
		[LinkName("PxVehicleDriveTank_setDriveModel_mut")] public static extern void VehicleDriveTank_setDriveModel_mut(PxVehicleDriveTank* self__pod, uint32 driveModel_pod);
		[LinkName("PxVehicleDriveTank_getDriveModel")] public static extern uint32 VehicleDriveTank_getDriveModel(PxVehicleDriveTank* self__pod);
		[LinkName("PxVehicleDriveTank_setToRestState_mut")] public static extern void VehicleDriveTank_setToRestState_mut(PxVehicleDriveTank* self__pod);
		[LinkName("PxVehicleDriveTank_new_alloc")] public static extern PxVehicleDriveTank* VehicleDriveTank_new_alloc(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleDriveTank_createObject_mut")] public static extern PxVehicleDriveTank* VehicleDriveTank_createObject_mut(uint8** address_pod, PxDeserializationContext* context_pod);
		[LinkName("PxVehicleDriveTank_getBinaryMetaData_mut")] public static extern void VehicleDriveTank_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDriveTank_getConcreteTypeName")] public static extern char8* VehicleDriveTank_getConcreteTypeName(PxVehicleDriveTank* self__pod);
		[LinkName("PxVehicleDriveTank_isKindOf")] public static extern bool VehicleDriveTank_isKindOf(PxVehicleDriveTank* self__pod, char8* name);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_allocate_mut")] public static extern PxVehicleDrivableSurfaceToTireFrictionPairs* VehicleDrivableSurfaceToTireFrictionPairs_allocate_mut(uint32 maxNbTireTypes, uint32 maxNbSurfaceTypes);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_setup_mut")] public static extern void VehicleDrivableSurfaceToTireFrictionPairs_setup_mut(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod, uint32 nbTireTypes, uint32 nbSurfaceTypes, PxMaterial** drivableSurfaceMaterials_pod, PxVehicleDrivableSurfaceType* drivableSurfaceTypes_pod);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_release_mut")] public static extern void VehicleDrivableSurfaceToTireFrictionPairs_release_mut(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_mut")] public static extern void VehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_mut(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod, uint32 surfaceType, uint32 tireType, float value);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction")] public static extern float VehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod, uint32 surfaceType, uint32 tireType);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes")] public static extern uint32 VehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod);
		[LinkName("PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes")] public static extern uint32 VehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes(PxVehicleDrivableSurfaceToTireFrictionPairs* self__pod);
		[LinkName("PxWheelQueryResult_new")] public static extern PxWheelQueryResult WheelQueryResult_new();
		[LinkName("PxVehicleWheelConcurrentUpdateData_new")] public static extern PxVehicleWheelConcurrentUpdateData VehicleWheelConcurrentUpdateData_new();
		[LinkName("PxVehicleConcurrentUpdateData_new")] public static extern PxVehicleConcurrentUpdateData VehicleConcurrentUpdateData_new();
		[LinkName("phys_PxVehicleSuspensionRaycasts")] public static extern void VehicleSuspensionRaycasts(PxBatchQuery* batchQuery_pod, uint32 nbVehicles, PxVehicleWheels** vehicles_pod, uint32 nbSceneQueryResults, PxRaycastQueryResult* sceneQueryResults_pod, bool* vehiclesToRaycast);
		[LinkName("phys_PxVehicleSuspensionSweeps")] public static extern void VehicleSuspensionSweeps(PxBatchQuery* batchQuery_pod, uint32 nbVehicles, PxVehicleWheels** vehicles_pod, uint32 nbSceneQueryResults, PxSweepQueryResult* sceneQueryResults_pod, uint16 nbHitsPerQuery, bool* vehiclesToSweep, float sweepWidthScale, float sweepRadiusScale);
		[LinkName("phys_PxVehicleModifyWheelContacts")] public static extern uint32 VehicleModifyWheelContacts(PxVehicleWheels* vehicle_pod, uint32 wheelId, float wheelTangentVelocityMultiplier, float maxImpulse, PxContactModifyPair* contactModifyPair_pod);
		[LinkName("phys_PxVehicleUpdates")] public static extern void VehicleUpdates(float timestep, PxVec3* gravity_pod, PxVehicleDrivableSurfaceToTireFrictionPairs* vehicleDrivableSurfaceToTireFrictionPairs_pod, uint32 nbVehicles, PxVehicleWheels** vehicles_pod, PxVehicleWheelQueryResult* vehicleWheelQueryResults_pod, PxVehicleConcurrentUpdateData* vehicleConcurrentUpdates_pod);
		[LinkName("phys_PxVehiclePostUpdates")] public static extern void VehiclePostUpdates(PxVehicleConcurrentUpdateData* vehicleConcurrentUpdates_pod, uint32 nbVehicles, PxVehicleWheels** vehicles_pod);
		[LinkName("phys_PxVehicleShiftOrigin")] public static extern void VehicleShiftOrigin(PxVec3* shift_pod, uint32 nbVehicles, PxVehicleWheels** vehicles_pod);
		[LinkName("phys_PxVehicleUpdateSingleVehicleAndStoreTelemetryData")] public static extern void VehicleUpdateSingleVehicleAndStoreTelemetryData(float timestep, PxVec3* gravity_pod, PxVehicleDrivableSurfaceToTireFrictionPairs* vehicleDrivableSurfaceToTireFrictionPairs_pod, PxVehicleWheels* focusVehicle_pod, PxVehicleWheelQueryResult* vehicleWheelQueryResults_pod, PxVehicleTelemetryData* telemetryData_pod);
		[LinkName("PxVehicleDriveSimDataNW_new")] public static extern PxVehicleDriveSimDataNW VehicleDriveSimDataNW_new();
		[LinkName("PxVehicleDriveSimDataNW_getDiffData")] public static extern PxVehicleDifferentialNWData* VehicleDriveSimDataNW_getDiffData(PxVehicleDriveSimDataNW* self__pod);
		[LinkName("PxVehicleDriveSimDataNW_setDiffData_mut")] public static extern void VehicleDriveSimDataNW_setDiffData_mut(PxVehicleDriveSimDataNW* self__pod, PxVehicleDifferentialNWData* diff_pod);
		[LinkName("PxVehicleDriveSimDataNW_new_1")] public static extern PxVehicleDriveSimDataNW VehicleDriveSimDataNW_new_1(uint32 anonymous_arg0_pod);
		[LinkName("PxVehicleDriveSimDataNW_getBinaryMetaData_mut")] public static extern void VehicleDriveSimDataNW_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDriveSimDataNW_delete")] public static extern void VehicleDriveSimDataNW_delete(PxVehicleDriveSimDataNW* self__pod);
		[LinkName("PxVehicleDriveNW_allocate_mut")] public static extern PxVehicleDriveNW* VehicleDriveNW_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleDriveNW_free_mut")] public static extern void VehicleDriveNW_free_mut(PxVehicleDriveNW* self__pod);
		[LinkName("PxVehicleDriveNW_setup_mut")] public static extern void VehicleDriveNW_setup_mut(PxVehicleDriveNW* self__pod, PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimDataNW* driveData_pod, uint32 nbWheels);
		[LinkName("PxVehicleDriveNW_create_mut")] public static extern PxVehicleDriveNW* VehicleDriveNW_create_mut(PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod, PxVehicleDriveSimDataNW* driveData_pod, uint32 nbWheels);
		[LinkName("PxVehicleDriveNW_setToRestState_mut")] public static extern void VehicleDriveNW_setToRestState_mut(PxVehicleDriveNW* self__pod);
		[LinkName("PxVehicleDriveNW_new_alloc")] public static extern PxVehicleDriveNW* VehicleDriveNW_new_alloc(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleDriveNW_new_alloc_1")] public static extern PxVehicleDriveNW* VehicleDriveNW_new_alloc_1();
		[LinkName("PxVehicleDriveNW_createObject_mut")] public static extern PxVehicleDriveNW* VehicleDriveNW_createObject_mut(uint8** address_pod, PxDeserializationContext* context_pod);
		[LinkName("PxVehicleDriveNW_getBinaryMetaData_mut")] public static extern void VehicleDriveNW_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleDriveNW_getConcreteTypeName")] public static extern char8* VehicleDriveNW_getConcreteTypeName(PxVehicleDriveNW* self__pod);
		[LinkName("PxVehicleDriveNW_isKindOf")] public static extern bool VehicleDriveNW_isKindOf(PxVehicleDriveNW* self__pod, char8* name);
		[LinkName("PxVehicleDrive4WRawInputData_new_alloc")] public static extern PxVehicleDrive4WRawInputData* VehicleDrive4WRawInputData_new_alloc();
		[LinkName("PxVehicleDrive4WRawInputData_delete")] public static extern void VehicleDrive4WRawInputData_delete(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_setDigitalAccel_mut")] public static extern void VehicleDrive4WRawInputData_setDigitalAccel_mut(PxVehicleDrive4WRawInputData* self__pod, bool accelKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_setDigitalBrake_mut")] public static extern void VehicleDrive4WRawInputData_setDigitalBrake_mut(PxVehicleDrive4WRawInputData* self__pod, bool brakeKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_setDigitalHandbrake_mut")] public static extern void VehicleDrive4WRawInputData_setDigitalHandbrake_mut(PxVehicleDrive4WRawInputData* self__pod, bool handbrakeKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_setDigitalSteerLeft_mut")] public static extern void VehicleDrive4WRawInputData_setDigitalSteerLeft_mut(PxVehicleDrive4WRawInputData* self__pod, bool steerLeftKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_setDigitalSteerRight_mut")] public static extern void VehicleDrive4WRawInputData_setDigitalSteerRight_mut(PxVehicleDrive4WRawInputData* self__pod, bool steerRightKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_getDigitalAccel")] public static extern bool VehicleDrive4WRawInputData_getDigitalAccel(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getDigitalBrake")] public static extern bool VehicleDrive4WRawInputData_getDigitalBrake(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getDigitalHandbrake")] public static extern bool VehicleDrive4WRawInputData_getDigitalHandbrake(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getDigitalSteerLeft")] public static extern bool VehicleDrive4WRawInputData_getDigitalSteerLeft(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getDigitalSteerRight")] public static extern bool VehicleDrive4WRawInputData_getDigitalSteerRight(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_setAnalogAccel_mut")] public static extern void VehicleDrive4WRawInputData_setAnalogAccel_mut(PxVehicleDrive4WRawInputData* self__pod, float accel);
		[LinkName("PxVehicleDrive4WRawInputData_setAnalogBrake_mut")] public static extern void VehicleDrive4WRawInputData_setAnalogBrake_mut(PxVehicleDrive4WRawInputData* self__pod, float brake);
		[LinkName("PxVehicleDrive4WRawInputData_setAnalogHandbrake_mut")] public static extern void VehicleDrive4WRawInputData_setAnalogHandbrake_mut(PxVehicleDrive4WRawInputData* self__pod, float handbrake);
		[LinkName("PxVehicleDrive4WRawInputData_setAnalogSteer_mut")] public static extern void VehicleDrive4WRawInputData_setAnalogSteer_mut(PxVehicleDrive4WRawInputData* self__pod, float steer);
		[LinkName("PxVehicleDrive4WRawInputData_getAnalogAccel")] public static extern float VehicleDrive4WRawInputData_getAnalogAccel(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getAnalogBrake")] public static extern float VehicleDrive4WRawInputData_getAnalogBrake(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getAnalogHandbrake")] public static extern float VehicleDrive4WRawInputData_getAnalogHandbrake(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getAnalogSteer")] public static extern float VehicleDrive4WRawInputData_getAnalogSteer(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_setGearUp_mut")] public static extern void VehicleDrive4WRawInputData_setGearUp_mut(PxVehicleDrive4WRawInputData* self__pod, bool gearUpKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_setGearDown_mut")] public static extern void VehicleDrive4WRawInputData_setGearDown_mut(PxVehicleDrive4WRawInputData* self__pod, bool gearDownKeyPressed);
		[LinkName("PxVehicleDrive4WRawInputData_getGearUp")] public static extern bool VehicleDrive4WRawInputData_getGearUp(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("PxVehicleDrive4WRawInputData_getGearDown")] public static extern bool VehicleDrive4WRawInputData_getGearDown(PxVehicleDrive4WRawInputData* self__pod);
		[LinkName("phys_PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs")] public static extern void VehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs(PxVehicleKeySmoothingData* keySmoothing_pod, PxFixedSizeLookupTable_8__Pod* steerVsForwardSpeedTable_pod, PxVehicleDrive4WRawInputData* rawInputData_pod, float timestep, bool isVehicleInAir, PxVehicleDrive4W* focusVehicle_pod);
		[LinkName("phys_PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs")] public static extern void VehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs(PxVehiclePadSmoothingData* padSmoothing_pod, PxFixedSizeLookupTable_8__Pod* steerVsForwardSpeedTable_pod, PxVehicleDrive4WRawInputData* rawInputData_pod, float timestep, bool isVehicleInAir, PxVehicleDrive4W* focusVehicle_pod);
		[LinkName("PxVehicleDriveNWRawInputData_new_alloc")] public static extern PxVehicleDriveNWRawInputData* VehicleDriveNWRawInputData_new_alloc();
		[LinkName("PxVehicleDriveNWRawInputData_delete")] public static extern void VehicleDriveNWRawInputData_delete(PxVehicleDriveNWRawInputData* self__pod);
		[LinkName("phys_PxVehicleDriveNWSmoothDigitalRawInputsAndSetAnalogInputs")] public static extern void VehicleDriveNWSmoothDigitalRawInputsAndSetAnalogInputs(PxVehicleKeySmoothingData* keySmoothing_pod, PxFixedSizeLookupTable_8__Pod* steerVsForwardSpeedTable_pod, PxVehicleDriveNWRawInputData* rawInputData_pod, float timestep, bool isVehicleInAir, PxVehicleDriveNW* focusVehicle_pod);
		[LinkName("phys_PxVehicleDriveNWSmoothAnalogRawInputsAndSetAnalogInputs")] public static extern void VehicleDriveNWSmoothAnalogRawInputsAndSetAnalogInputs(PxVehiclePadSmoothingData* padSmoothing_pod, PxFixedSizeLookupTable_8__Pod* steerVsForwardSpeedTable_pod, PxVehicleDriveNWRawInputData* rawInputData_pod, float timestep, bool isVehicleInAir, PxVehicleDriveNW* focusVehicle_pod);
		[LinkName("PxVehicleDriveTankRawInputData_new_alloc")] public static extern PxVehicleDriveTankRawInputData* VehicleDriveTankRawInputData_new_alloc(uint32 mode_pod);
		[LinkName("PxVehicleDriveTankRawInputData_delete")] public static extern void VehicleDriveTankRawInputData_delete(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getDriveModel")] public static extern uint32 VehicleDriveTankRawInputData_getDriveModel(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_setDigitalAccel_mut")] public static extern void VehicleDriveTankRawInputData_setDigitalAccel_mut(PxVehicleDriveTankRawInputData* self__pod, bool b);
		[LinkName("PxVehicleDriveTankRawInputData_setDigitalLeftThrust_mut")] public static extern void VehicleDriveTankRawInputData_setDigitalLeftThrust_mut(PxVehicleDriveTankRawInputData* self__pod, bool b);
		[LinkName("PxVehicleDriveTankRawInputData_setDigitalRightThrust_mut")] public static extern void VehicleDriveTankRawInputData_setDigitalRightThrust_mut(PxVehicleDriveTankRawInputData* self__pod, bool b);
		[LinkName("PxVehicleDriveTankRawInputData_setDigitalLeftBrake_mut")] public static extern void VehicleDriveTankRawInputData_setDigitalLeftBrake_mut(PxVehicleDriveTankRawInputData* self__pod, bool b);
		[LinkName("PxVehicleDriveTankRawInputData_setDigitalRightBrake_mut")] public static extern void VehicleDriveTankRawInputData_setDigitalRightBrake_mut(PxVehicleDriveTankRawInputData* self__pod, bool b);
		[LinkName("PxVehicleDriveTankRawInputData_getDigitalAccel")] public static extern bool VehicleDriveTankRawInputData_getDigitalAccel(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getDigitalLeftThrust")] public static extern bool VehicleDriveTankRawInputData_getDigitalLeftThrust(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getDigitalRightThrust")] public static extern bool VehicleDriveTankRawInputData_getDigitalRightThrust(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getDigitalLeftBrake")] public static extern bool VehicleDriveTankRawInputData_getDigitalLeftBrake(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getDigitalRightBrake")] public static extern bool VehicleDriveTankRawInputData_getDigitalRightBrake(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_setAnalogAccel_mut")] public static extern void VehicleDriveTankRawInputData_setAnalogAccel_mut(PxVehicleDriveTankRawInputData* self__pod, float accel);
		[LinkName("PxVehicleDriveTankRawInputData_setAnalogLeftThrust_mut")] public static extern void VehicleDriveTankRawInputData_setAnalogLeftThrust_mut(PxVehicleDriveTankRawInputData* self__pod, float leftThrust);
		[LinkName("PxVehicleDriveTankRawInputData_setAnalogRightThrust_mut")] public static extern void VehicleDriveTankRawInputData_setAnalogRightThrust_mut(PxVehicleDriveTankRawInputData* self__pod, float rightThrust);
		[LinkName("PxVehicleDriveTankRawInputData_setAnalogLeftBrake_mut")] public static extern void VehicleDriveTankRawInputData_setAnalogLeftBrake_mut(PxVehicleDriveTankRawInputData* self__pod, float leftBrake);
		[LinkName("PxVehicleDriveTankRawInputData_setAnalogRightBrake_mut")] public static extern void VehicleDriveTankRawInputData_setAnalogRightBrake_mut(PxVehicleDriveTankRawInputData* self__pod, float rightBrake);
		[LinkName("PxVehicleDriveTankRawInputData_getAnalogAccel")] public static extern float VehicleDriveTankRawInputData_getAnalogAccel(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getAnalogLeftThrust")] public static extern float VehicleDriveTankRawInputData_getAnalogLeftThrust(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getAnalogRightThrust")] public static extern float VehicleDriveTankRawInputData_getAnalogRightThrust(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getAnalogLeftBrake")] public static extern float VehicleDriveTankRawInputData_getAnalogLeftBrake(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getAnalogRightBrake")] public static extern float VehicleDriveTankRawInputData_getAnalogRightBrake(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_setGearUp_mut")] public static extern void VehicleDriveTankRawInputData_setGearUp_mut(PxVehicleDriveTankRawInputData* self__pod, bool gearUp);
		[LinkName("PxVehicleDriveTankRawInputData_setGearDown_mut")] public static extern void VehicleDriveTankRawInputData_setGearDown_mut(PxVehicleDriveTankRawInputData* self__pod, bool gearDown);
		[LinkName("PxVehicleDriveTankRawInputData_getGearUp")] public static extern bool VehicleDriveTankRawInputData_getGearUp(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("PxVehicleDriveTankRawInputData_getGearDown")] public static extern bool VehicleDriveTankRawInputData_getGearDown(PxVehicleDriveTankRawInputData* self__pod);
		[LinkName("phys_PxVehicleDriveTankSmoothDigitalRawInputsAndSetAnalogInputs")] public static extern void VehicleDriveTankSmoothDigitalRawInputsAndSetAnalogInputs(PxVehicleKeySmoothingData* keySmoothing_pod, PxVehicleDriveTankRawInputData* rawInputData_pod, float timestep, PxVehicleDriveTank* focusVehicle_pod);
		[LinkName("phys_PxVehicleDriveTankSmoothAnalogRawInputsAndSetAnalogInputs")] public static extern void VehicleDriveTankSmoothAnalogRawInputsAndSetAnalogInputs(PxVehiclePadSmoothingData* padSmoothing_pod, PxVehicleDriveTankRawInputData* rawInputData_pod, float timestep, PxVehicleDriveTank* focusVehicle_pod);
		[LinkName("phys_PxVehicle4WEnable3WTadpoleMode")] public static extern void Vehicle4WEnable3WTadpoleMode(PxVehicleWheelsSimData* wheelsSimData_pod, PxVehicleWheelsDynData* wheelsDynData_pod, PxVehicleDriveSimData4W* driveSimData_pod);
		[LinkName("phys_PxVehicle4WEnable3WDeltaMode")] public static extern void Vehicle4WEnable3WDeltaMode(PxVehicleWheelsSimData* wheelsSimData_pod, PxVehicleWheelsDynData* wheelsDynData_pod, PxVehicleDriveSimData4W* driveSimData_pod);
		[LinkName("phys_PxVehicleComputeSprungMasses")] public static extern void VehicleComputeSprungMasses(uint32 nbSprungMasses, PxVec3* sprungMassCoordinates_pod, PxVec3* centreOfMass_pod, float totalMass, uint32 gravityDirection, float* sprungMasses);
		[LinkName("phys_PxVehicleUpdateCMassLocalPose")] public static extern void VehicleUpdateCMassLocalPose(PxTransform* oldCMassLocalPose_pod, PxTransform* newCMassLocalPose_pod, uint32 gravityDirection, PxVehicleWheels* vehicle_pod);
		[LinkName("PxVehicleCopyDynamicsMap_new")] public static extern PxVehicleCopyDynamicsMap VehicleCopyDynamicsMap_new();
		[LinkName("phys_PxVehicleCopyDynamicsData")] public static extern void VehicleCopyDynamicsData(PxVehicleCopyDynamicsMap* wheelMap_pod, PxVehicleWheels* src_pod, PxVehicleWheels* trg_pod);
		[LinkName("PxVehicleGraphChannelDesc_new")] public static extern PxVehicleGraphChannelDesc VehicleGraphChannelDesc_new();
		[LinkName("PxVehicleGraph_setup_mut")] public static extern void VehicleGraph_setup_mut(PxVehicleGraph* self__pod, PxVehicleGraphDesc* desc_pod, uint32 graphType_pod);
		[LinkName("PxVehicleGraph_clearRecordedChannelData_mut")] public static extern void VehicleGraph_clearRecordedChannelData_mut(PxVehicleGraph* self__pod);
		[LinkName("PxVehicleGraph_getBackgroundColor")] public static extern PxVec3* VehicleGraph_getBackgroundColor(PxVehicleGraph* self__pod);
		[LinkName("PxVehicleGraph_getBackgroundAlpha")] public static extern float VehicleGraph_getBackgroundAlpha(PxVehicleGraph* self__pod);
		[LinkName("PxVehicleGraph_getBackgroundCoords")] public static extern void VehicleGraph_getBackgroundCoords(PxVehicleGraph* self__pod, float* xMin_pod, float* yMin_pod, float* xMax_pod, float* yMax_pod);
		[LinkName("PxVehicleGraph_computeGraphChannel")] public static extern void VehicleGraph_computeGraphChannel(PxVehicleGraph* self__pod, uint32 channel, float* xy, PxVec3* colors_pod, char8* title);
		[LinkName("PxVehicleGraph_getLatestValue")] public static extern float VehicleGraph_getLatestValue(PxVehicleGraph* self__pod, uint32 channel);
		[LinkName("PxVehicleTelemetryData_allocate_mut")] public static extern PxVehicleTelemetryData* VehicleTelemetryData_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleTelemetryData_free_mut")] public static extern void VehicleTelemetryData_free_mut(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleTelemetryData_setup_mut")] public static extern void VehicleTelemetryData_setup_mut(PxVehicleTelemetryData* self__pod, float graphSizeX, float graphSizeY, float engineGraphPosX, float engineGraphPosY, float* wheelGraphPosX, float* wheelGraphPosY, PxVec3* backGroundColor_pod, PxVec3* lineColorHigh_pod, PxVec3* lineColorLow_pod);
		[LinkName("PxVehicleTelemetryData_clear_mut")] public static extern void VehicleTelemetryData_clear_mut(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleTelemetryData_getEngineGraph")] public static extern PxVehicleGraph* VehicleTelemetryData_getEngineGraph(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleTelemetryData_getNbWheelGraphs")] public static extern uint32 VehicleTelemetryData_getNbWheelGraphs(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleTelemetryData_getWheelGraph")] public static extern PxVehicleGraph* VehicleTelemetryData_getWheelGraph(PxVehicleTelemetryData* self__pod, uint32 k);
		[LinkName("PxVehicleTelemetryData_getTireforceAppPoints")] public static extern PxVec3* VehicleTelemetryData_getTireforceAppPoints(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleTelemetryData_getSuspforceAppPoints")] public static extern PxVec3* VehicleTelemetryData_getSuspforceAppPoints(PxVehicleTelemetryData* self__pod);
		[LinkName("PxVehicleNoDrive_allocate_mut")] public static extern PxVehicleNoDrive* VehicleNoDrive_allocate_mut(uint32 nbWheels);
		[LinkName("PxVehicleNoDrive_free_mut")] public static extern void VehicleNoDrive_free_mut(PxVehicleNoDrive* self__pod);
		[LinkName("PxVehicleNoDrive_setup_mut")] public static extern void VehicleNoDrive_setup_mut(PxVehicleNoDrive* self__pod, PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod);
		[LinkName("PxVehicleNoDrive_create_mut")] public static extern PxVehicleNoDrive* VehicleNoDrive_create_mut(PxPhysics* physics_pod, PxRigidDynamic* vehActor_pod, PxVehicleWheelsSimData* wheelsData_pod);
		[LinkName("PxVehicleNoDrive_setToRestState_mut")] public static extern void VehicleNoDrive_setToRestState_mut(PxVehicleNoDrive* self__pod);
		[LinkName("PxVehicleNoDrive_setBrakeTorque_mut")] public static extern void VehicleNoDrive_setBrakeTorque_mut(PxVehicleNoDrive* self__pod, uint32 id, float brakeTorque);
		[LinkName("PxVehicleNoDrive_setDriveTorque_mut")] public static extern void VehicleNoDrive_setDriveTorque_mut(PxVehicleNoDrive* self__pod, uint32 id, float driveTorque);
		[LinkName("PxVehicleNoDrive_setSteerAngle_mut")] public static extern void VehicleNoDrive_setSteerAngle_mut(PxVehicleNoDrive* self__pod, uint32 id, float steerAngle);
		[LinkName("PxVehicleNoDrive_getBrakeTorque")] public static extern float VehicleNoDrive_getBrakeTorque(PxVehicleNoDrive* self__pod, uint32 id);
		[LinkName("PxVehicleNoDrive_getDriveTorque")] public static extern float VehicleNoDrive_getDriveTorque(PxVehicleNoDrive* self__pod, uint32 id);
		[LinkName("PxVehicleNoDrive_getSteerAngle")] public static extern float VehicleNoDrive_getSteerAngle(PxVehicleNoDrive* self__pod, uint32 id);
		[LinkName("PxVehicleNoDrive_new_alloc")] public static extern PxVehicleNoDrive* VehicleNoDrive_new_alloc(PxBaseFlags baseFlags_pod);
		[LinkName("PxVehicleNoDrive_exportExtraData_mut")] public static extern void VehicleNoDrive_exportExtraData_mut(PxVehicleNoDrive* self__pod, PxSerializationContext* anonymous_arg0_pod);
		[LinkName("PxVehicleNoDrive_importExtraData_mut")] public static extern void VehicleNoDrive_importExtraData_mut(PxVehicleNoDrive* self__pod, PxDeserializationContext* anonymous_arg0_pod);
		[LinkName("PxVehicleNoDrive_createObject_mut")] public static extern PxVehicleNoDrive* VehicleNoDrive_createObject_mut(uint8** address_pod, PxDeserializationContext* context_pod);
		[LinkName("PxVehicleNoDrive_getBinaryMetaData_mut")] public static extern void VehicleNoDrive_getBinaryMetaData_mut(PxOutputStream* stream_pod);
		[LinkName("PxVehicleNoDrive_getConcreteTypeName")] public static extern char8* VehicleNoDrive_getConcreteTypeName(PxVehicleNoDrive* self__pod);
		[LinkName("PxVehicleNoDrive_isKindOf")] public static extern bool VehicleNoDrive_isKindOf(PxVehicleNoDrive* self__pod, char8* name);
		[LinkName("PxVehicleNoDrive_getNbSteerAngle")] public static extern uint32 VehicleNoDrive_getNbSteerAngle(PxVehicleNoDrive* self__pod);
		[LinkName("PxVehicleNoDrive_getNbDriveTorque")] public static extern uint32 VehicleNoDrive_getNbDriveTorque(PxVehicleNoDrive* self__pod);
		[LinkName("PxVehicleNoDrive_getNbBrakeTorque")] public static extern uint32 VehicleNoDrive_getNbBrakeTorque(PxVehicleNoDrive* self__pod);
		[LinkName("PxProfilerCallback_zoneStart_mut")] public static extern void* ProfilerCallback_zoneStart_mut(PxProfilerCallback* self__pod, char8* eventName, bool detached, uint64 contextId);
		[LinkName("PxProfilerCallback_zoneEnd_mut")] public static extern void ProfilerCallback_zoneEnd_mut(PxProfilerCallback* self__pod, void* profilerData, char8* eventName, bool detached, uint64 contextId);
		[LinkName("PxProfileScoped_new_alloc")] public static extern PxProfileScoped* ProfileScoped_new_alloc(PxProfilerCallback* callback_pod, char8* eventName, bool detached, uint64 contextId);
		[LinkName("PxProfileScoped_delete")] public static extern void ProfileScoped_delete(PxProfileScoped* self__pod);
		[LinkName("PxPvd_connect_mut")] public static extern bool Pvd_connect_mut(PxPvd* self__pod, PxPvdTransport* transport_pod, PxPvdInstrumentationFlags flags_pod);
		[LinkName("PxPvd_disconnect_mut")] public static extern void Pvd_disconnect_mut(PxPvd* self__pod);
		[LinkName("PxPvd_isConnected_mut")] public static extern bool Pvd_isConnected_mut(PxPvd* self__pod, bool useCachedStatus);
		[LinkName("PxPvd_getTransport_mut")] public static extern PxPvdTransport* Pvd_getTransport_mut(PxPvd* self__pod);
		[LinkName("PxPvd_getInstrumentationFlags_mut")] public static extern PxPvdInstrumentationFlags Pvd_getInstrumentationFlags_mut(PxPvd* self__pod);
		[LinkName("PxPvd_release_mut")] public static extern void Pvd_release_mut(PxPvd* self__pod);
		[LinkName("phys_PxCreatePvd")] public static extern PxPvd* CreatePvd(PxFoundation* foundation_pod);
		[LinkName("PxPvdTransport_connect_mut")] public static extern bool PvdTransport_connect_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_disconnect_mut")] public static extern void PvdTransport_disconnect_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_isConnected_mut")] public static extern bool PvdTransport_isConnected_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_write_mut")] public static extern bool PvdTransport_write_mut(PxPvdTransport* self__pod, uint8* inBytes, uint32 inLength);
		[LinkName("PxPvdTransport_lock_mut")] public static extern PxPvdTransport* PvdTransport_lock_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_unlock_mut")] public static extern void PvdTransport_unlock_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_flush_mut")] public static extern void PvdTransport_flush_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_getWrittenDataSize_mut")] public static extern uint64 PvdTransport_getWrittenDataSize_mut(PxPvdTransport* self__pod);
		[LinkName("PxPvdTransport_release_mut")] public static extern void PvdTransport_release_mut(PxPvdTransport* self__pod);
		[LinkName("phys_PxDefaultPvdSocketTransportCreate")] public static extern PxPvdTransport* DefaultPvdSocketTransportCreate(char8* host, int32 port, uint32 timeoutInMilliseconds);
		[LinkName("phys_PxDefaultPvdFileTransportCreate")] public static extern PxPvdTransport* DefaultPvdFileTransportCreate(char8* name);
	}
}

